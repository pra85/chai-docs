[
  {
    "tags": [],
    "description": {
      "full": "<p>chai<br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#106;&#x61;&#107;&#101;&#x40;&#x61;&#x6c;&#111;&#103;&#x69;&#x63;&#x61;&#x6c;&#112;&#97;&#114;&#x61;&#100;&#111;&#120;&#46;&#99;&#x6f;&#x6d;\">&#106;&#x61;&#107;&#101;&#x40;&#x61;&#x6c;&#111;&#103;&#x69;&#x63;&#x61;&#x6c;&#112;&#97;&#114;&#x61;&#100;&#111;&#120;&#46;&#99;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>chai<br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6a;&#x61;&#x6b;&#101;&#x40;&#97;&#x6c;&#111;&#x67;&#x69;&#x63;&#97;&#x6c;&#x70;&#x61;&#x72;&#97;&#100;&#111;&#x78;&#x2e;&#99;&#x6f;&#x6d;\">&#x6a;&#x61;&#x6b;&#101;&#x40;&#97;&#x6c;&#111;&#x67;&#x69;&#x63;&#97;&#x6c;&#x70;&#x61;&#x72;&#97;&#100;&#111;&#x78;&#x2e;&#99;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 5,
    "codeStart": 11,
    "code": "var used = []\n  , exports = module.exports = {};",
    "ctx": {
      "type": "declaration",
      "name": "used",
      "value": "[]",
      "string": "used"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai version</p>",
      "summary": "<p>Chai version</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 14,
    "codeStart": 18,
    "code": "exports.version = '3.5.0';",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "version",
      "value": "'3.5.0'",
      "string": "exports.version"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Assertion Error</p>",
      "summary": "<p>Assertion Error</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 20,
    "codeStart": 24,
    "code": "exports.AssertionError = require('assertion-error');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "AssertionError",
      "value": "require('assertion-error')",
      "string": "exports.AssertionError"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Utils for plugins (not exported)</p>",
      "summary": "<p>Utils for plugins (not exported)</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 26,
    "codeStart": 30,
    "code": "var util = require('./chai/utils');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('./chai/utils')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Function}",
        "name": "",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function}</p>"
      },
      {
        "type": "returns",
        "string": "{this} for chaining",
        "types": [
          "this"
        ],
        "typesDescription": "<a href=\"this.html\">this</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>for chaining</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h1>.use(function)</h1>\n<p>Provides a way to extend the internals of Chai</p>",
      "summary": "<h1>.use(function)</h1>\n",
      "body": "<p>Provides a way to extend the internals of Chai</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 32,
    "codeStart": 42,
    "code": "exports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(this, util);\n    used.push(fn);\n  }\n\n  return this;\n};",
    "ctx": {
      "type": "method",
      "receiver": "exports",
      "name": "use",
      "string": "exports.use()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Utility Functions</p>",
      "summary": "<p>Utility Functions</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 51,
    "codeStart": 55,
    "code": "exports.util = util;",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "util",
      "value": "util",
      "string": "exports.util"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Configuration</p>",
      "summary": "<p>Configuration</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 57,
    "codeStart": 61,
    "code": "var config = require('./chai/config');\nexports.config = config;",
    "ctx": {
      "type": "declaration",
      "name": "config",
      "value": "require('./chai/config')",
      "string": "config"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Primary <code>Assertion</code> prototype</p>",
      "summary": "<p>Primary <code>Assertion</code> prototype</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 64,
    "codeStart": 68,
    "code": "var assertion = require('./chai/assertion');\nexports.use(assertion);",
    "ctx": {
      "type": "declaration",
      "name": "assertion",
      "value": "require('./chai/assertion')",
      "string": "assertion"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Core Assertions</p>",
      "summary": "<p>Core Assertions</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 71,
    "codeStart": 75,
    "code": "var core = require('./chai/core/assertions');\nexports.use(core);",
    "ctx": {
      "type": "declaration",
      "name": "core",
      "value": "require('./chai/core/assertions')",
      "string": "core"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Expect interface</p>",
      "summary": "<p>Expect interface</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 78,
    "codeStart": 82,
    "code": "var expect = require('./chai/interface/expect');\nexports.use(expect);",
    "ctx": {
      "type": "declaration",
      "name": "expect",
      "value": "require('./chai/interface/expect')",
      "string": "expect"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Should interface</p>",
      "summary": "<p>Should interface</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 85,
    "codeStart": 89,
    "code": "var should = require('./chai/interface/should');\nexports.use(should);",
    "ctx": {
      "type": "declaration",
      "name": "should",
      "value": "require('./chai/interface/should')",
      "string": "should"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Assert interface</p>",
      "summary": "<p>Assert interface</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 92,
    "codeStart": 96,
    "code": "var assert = require('./chai/interface/assert');\nexports.use(assert);\n\n},{\"./chai/assertion\":3,\"./chai/config\":4,\"./chai/core/assertions\":5,\"./chai/interface/assert\":6,\"./chai/interface/expect\":7,\"./chai/interface/should\":8,\"./chai/utils\":22,\"assertion-error\":30}],3:[function(require,module,exports){",
    "ctx": {
      "type": "declaration",
      "name": "assert",
      "value": "require('./chai/interface/assert')",
      "string": "assert"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>chai<br /><a href=\"http://chaijs.com\">http://chaijs.com</a><br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#106;&#x61;&#x6b;&#x65;&#x40;&#x61;&#108;&#x6f;&#103;&#x69;&#99;&#97;&#x6c;&#112;&#x61;&#114;&#97;&#x64;&#111;&#x78;&#46;&#x63;&#111;&#x6d;\">&#106;&#x61;&#x6b;&#x65;&#x40;&#x61;&#108;&#x6f;&#103;&#x69;&#99;&#97;&#x6c;&#112;&#x61;&#114;&#97;&#x64;&#111;&#x78;&#46;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>chai<br /><a href=\"http://chaijs.com\">http://chaijs.com</a><br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#106;&#97;&#x6b;&#x65;&#x40;&#x61;&#x6c;&#x6f;&#x67;&#105;&#99;&#97;&#108;&#112;&#x61;&#114;&#97;&#x64;&#111;&#120;&#46;&#x63;&#x6f;&#x6d;\">&#106;&#97;&#x6b;&#x65;&#x40;&#x61;&#x6c;&#x6f;&#x67;&#105;&#99;&#97;&#108;&#112;&#x61;&#114;&#97;&#x64;&#111;&#120;&#46;&#x63;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 100,
    "codeStart": 107,
    "code": "var config = require('./config');\n\nmodule.exports = function (_chai, util) {",
    "ctx": {
      "type": "declaration",
      "name": "config",
      "value": "require('./config')",
      "string": "config"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Module dependencies.</p>",
      "summary": "<p>Module dependencies.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 110,
    "codeStart": 114,
    "code": "var AssertionError = _chai.AssertionError\n  , flag = util.flag;",
    "ctx": {
      "type": "declaration",
      "name": "AssertionError",
      "value": "_chai.AssertionError",
      "string": "AssertionError"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Module export.</p>",
      "summary": "<p>Module export.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 117,
    "codeStart": 121,
    "code": "_chai.Assertion = Assertion;",
    "ctx": {
      "type": "property",
      "receiver": "_chai",
      "name": "Assertion",
      "value": "Assertion",
      "string": "_chai.Assertion"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "<p>Assertion Constructor</p><p>Creates object for chaining.</p>",
      "summary": "<p>Assertion Constructor</p>",
      "body": "<p>Creates object for chaining.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 123,
    "codeStart": 131,
    "code": "function Assertion (obj, msg, stack) {\n  flag(this, 'ssfi', stack || arguments.callee);\n  flag(this, 'object', obj);\n  flag(this, 'message', msg);\n}\n\nObject.defineProperty(Assertion, 'includeStack', {\n  get: function() {\n    console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n    return config.includeStack;\n  },\n  set: function(value) {\n    console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n    config.includeStack = value;\n  }\n});\n\nObject.defineProperty(Assertion, 'showDiff', {\n  get: function() {\n    console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n    return config.showDiff;\n  },\n  set: function(value) {\n    console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n    config.showDiff = value;\n  }\n});\n\nAssertion.addProperty = function (name, fn) {\n  util.addProperty(this.prototype, name, fn);\n};\n\nAssertion.addMethod = function (name, fn) {\n  util.addMethod(this.prototype, name, fn);\n};\n\nAssertion.addChainableMethod = function (name, fn, chainingBehavior) {\n  util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n};\n\nAssertion.overwriteProperty = function (name, fn) {\n  util.overwriteProperty(this.prototype, name, fn);\n};\n\nAssertion.overwriteMethod = function (name, fn) {\n  util.overwriteMethod(this.prototype, name, fn);\n};\n\nAssertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n  util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n};",
    "ctx": {
      "type": "function",
      "name": "Assertion",
      "string": "Assertion()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "assert",
        "html": "<p>assert</p>"
      },
      {
        "type": "param",
        "string": "{Philosophical} expression to be tested",
        "name": "expression",
        "description": "<p>to be tested</p>",
        "types": [
          "Philosophical"
        ],
        "typesDescription": "<a href=\"Philosophical.html\">Philosophical</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String|Function} message or function that returns message to display if expression fails",
        "name": "message",
        "description": "<p>or function that returns message to display if expression fails</p>",
        "types": [
          "String",
          "Function"
        ],
        "typesDescription": "<code>String</code>|<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails",
        "name": "negatedMessage",
        "description": "<p>or function that returns negatedMessage to display if negated expression fails</p>",
        "types": [
          "String",
          "Function"
        ],
        "typesDescription": "<code>String</code>|<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Mixed} expected value (remember to check for negation)",
        "name": "expected",
        "description": "<p>value (remember to check for negation)</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Mixed} actual (optional) will default to `this.obj`",
        "name": "actual",
        "description": "<p>(optional) will default to <code>this.obj</code></p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails",
        "name": "showDiff",
        "description": "<p>(optional) when set to <code>true</code>, assert will display a diff in addition to the message if expression fails</p>",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "<h3>.assert(expression, message, negateMessage, expected, actual, showDiff)</h3>\n<p>Executes an expression and check expectations. Throws AssertionError for reporting if test doesn&#39;t pass.</p>",
      "summary": "<h3>.assert(expression, message, negateMessage, expected, actual, showDiff)</h3>\n",
      "body": "<p>Executes an expression and check expectations. Throws AssertionError for reporting if test doesn&#39;t pass.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 183,
    "codeStart": 198,
    "code": "Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n  var ok = util.test(this, arguments);\n  if (true !== showDiff) showDiff = false;\n  if (true !== config.showDiff) showDiff = false;\n\n  if (!ok) {\n    var msg = util.getMessage(this, arguments)\n      , actual = util.getActual(this, arguments);\n    throw new AssertionError(msg, {\n        actual: actual\n      , expected: expected\n      , showDiff: showDiff\n    }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n  }\n};",
    "ctx": {
      "type": "method",
      "constructor": "Assertion",
      "cons": "Assertion",
      "name": "assert",
      "string": "Assertion.prototype.assert()"
    }
  },
  {
    "tags": [
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "<h3>._obj</h3>\n<p>Quick reference to stored <code>actual</code> value for plugin developers.</p>",
      "summary": "<h3>._obj</h3>\n",
      "body": "<p>Quick reference to stored <code>actual</code> value for plugin developers.</p>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 214,
    "codeStart": 222,
    "code": "Object.defineProperty(Assertion.prototype, '_obj',\n  { get: function () {\n      return flag(this, 'object');\n    }\n  , set: function (val) {\n      flag(this, 'object', val);\n    }\n});\n};\n\n},{\"./config\":4}],4:[function(require,module,exports){\nmodule.exports = {",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Boolean}",
        "name": "",
        "description": "",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Boolean}</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>config.includeStack</h3>\n<p>User configurable property, influences whether stack trace<br />is included in Assertion error message. Default of false<br />suppresses stack trace in the error message.</p><pre><code>chai.config.includeStack = true;  // enable stack on error\n</code></pre>",
      "summary": "<h3>config.includeStack</h3>\n",
      "body": "<p>User configurable property, influences whether stack trace<br />is included in Assertion error message. Default of false<br />suppresses stack trace in the error message.</p><pre><code>chai.config.includeStack = true;  // enable stack on error\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 235,
    "codeStart": 248,
    "code": "includeStack: false,",
    "ctx": {
      "type": "property",
      "name": "includeStack",
      "value": "false,",
      "string": "includeStack"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Boolean}",
        "name": "",
        "description": "",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Boolean}</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>config.showDiff</h3>\n<p>User configurable property, influences whether or not<br />the <code>showDiff</code> flag should be included in the thrown<br />AssertionErrors. <code>false</code> will always be <code>false</code>; <code>true</code><br />will be true when the assertion has requested a diff<br />be shown.</p>",
      "summary": "<h3>config.showDiff</h3>\n",
      "body": "<p>User configurable property, influences whether or not<br />the <code>showDiff</code> flag should be included in the thrown<br />AssertionErrors. <code>false</code> will always be <code>false</code>; <code>true</code><br />will be true when the assertion has requested a diff<br />be shown.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 250,
    "codeStart": 263,
    "code": "showDiff: true,",
    "ctx": {
      "type": "property",
      "name": "showDiff",
      "value": "true,",
      "string": "showDiff"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Number}",
        "name": "",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number}</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>config.truncateThreshold</h3>\n<p>User configurable property, sets length threshold for actual and<br />expected values in assertion errors. If this threshold is exceeded, for<br />example for large data structures, the value is replaced with something<br />like <code>[ Array(3) ]</code> or <code>{ Object (prop1, prop2) }</code>.</p><p>Set it to zero if you want to disable truncating altogether.</p><p>This is especially userful when doing assertions on arrays: having this<br />set to a reasonable large value makes the failure messages readily<br />inspectable.</p><pre><code>chai.config.truncateThreshold = 0;  // disable truncating\n</code></pre>",
      "summary": "<h3>config.truncateThreshold</h3>\n",
      "body": "<p>User configurable property, sets length threshold for actual and<br />expected values in assertion errors. If this threshold is exceeded, for<br />example for large data structures, the value is replaced with something<br />like <code>[ Array(3) ]</code> or <code>{ Object (prop1, prop2) }</code>.</p><p>Set it to zero if you want to disable truncating altogether.</p><p>This is especially userful when doing assertions on arrays: having this<br />set to a reasonable large value makes the failure messages readily<br />inspectable.</p><pre><code>chai.config.truncateThreshold = 0;  // disable truncating\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 265,
    "codeStart": 285,
    "code": "truncateThreshold: 40\n\n};\n\n},{}],5:[function(require,module,exports){",
    "ctx": {
      "type": "property",
      "name": "truncateThreshold",
      "value": "40",
      "string": "truncateThreshold"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>chai<br /><a href=\"http://chaijs.com\">http://chaijs.com</a><br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#x6a;&#x61;&#107;&#x65;&#64;&#x61;&#x6c;&#111;&#103;&#105;&#x63;&#x61;&#x6c;&#x70;&#x61;&#x72;&#x61;&#100;&#111;&#120;&#x2e;&#x63;&#x6f;&#109;\">&#x6a;&#x61;&#107;&#x65;&#64;&#x61;&#x6c;&#111;&#103;&#105;&#x63;&#x61;&#x6c;&#x70;&#x61;&#x72;&#x61;&#100;&#111;&#120;&#x2e;&#x63;&#x6f;&#109;</a><br />MIT Licensed</p>",
      "summary": "<p>chai<br /><a href=\"http://chaijs.com\">http://chaijs.com</a><br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x6a;&#97;&#107;&#x65;&#x40;&#97;&#x6c;&#x6f;&#103;&#x69;&#99;&#x61;&#x6c;&#x70;&#x61;&#114;&#x61;&#x64;&#x6f;&#120;&#x2e;&#x63;&#111;&#x6d;\">&#x6a;&#97;&#107;&#x65;&#x40;&#97;&#x6c;&#x6f;&#103;&#x69;&#99;&#x61;&#x6c;&#x70;&#x61;&#114;&#x61;&#x64;&#x6f;&#120;&#x2e;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 290,
    "codeStart": 297,
    "code": "module.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , toString = Object.prototype.toString\n    , flag = _.flag;",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "language chains",
        "html": "<p>language chains</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>Language Chains</h3>\n<p>The following are provided as chainable getters to<br />improve the readability of your assertions. They<br />do not provide testing capabilities unless they<br />have been overwritten by a plugin.</p><p><strong>Chains</strong></p><ul>\n<li>to</li>\n<li>be</li>\n<li>been</li>\n<li>is</li>\n<li>that</li>\n<li>which</li>\n<li>and</li>\n<li>has</li>\n<li>have</li>\n<li>with</li>\n<li>at</li>\n<li>of</li>\n<li>same</li>\n</ul>\n",
      "summary": "<h3>Language Chains</h3>\n",
      "body": "<p>The following are provided as chainable getters to<br />improve the readability of your assertions. They<br />do not provide testing capabilities unless they<br />have been overwritten by a plugin.</p><p><strong>Chains</strong></p><ul>\n<li>to</li>\n<li>be</li>\n<li>been</li>\n<li>is</li>\n<li>that</li>\n<li>which</li>\n<li>and</li>\n<li>has</li>\n<li>have</li>\n<li>with</li>\n<li>at</li>\n<li>of</li>\n<li>same</li>\n</ul>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 302,
    "codeStart": 331,
    "code": "[ 'to', 'be', 'been'\n, 'is', 'and', 'has', 'have'\n, 'with', 'that', 'which', 'at'\n, 'of', 'same' ].forEach(function (chain) {\n  Assertion.addProperty(chain, function () {\n    return this;\n  });\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "not",
        "html": "<p>not</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.not</h3>\n<p>Negates any of assertions following in the chain.</p><pre><code>expect(foo).to.not.equal(&#39;bar&#39;);\nexpect(goodFn).to.not.throw(Error);\nexpect({ foo: &#39;baz&#39; }).to.have.property(&#39;foo&#39;)\n  .and.not.equal(&#39;bar&#39;);\n</code></pre>",
      "summary": "<h3>.not</h3>\n",
      "body": "<p>Negates any of assertions following in the chain.</p><pre><code>expect(foo).to.not.equal(&#39;bar&#39;);\nexpect(goodFn).to.not.throw(Error);\nexpect({ foo: &#39;baz&#39; }).to.have.property(&#39;foo&#39;)\n  .and.not.equal(&#39;bar&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 340,
    "codeStart": 355,
    "code": "Assertion.addProperty('not', function () {\n  flag(this, 'negate', true);\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "deep",
        "html": "<p>deep</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.deep</h3>\n<p>Sets the <code>deep</code> flag, later used by the <code>equal</code> and<br /><code>property</code> assertions.</p><pre><code>expect(foo).to.deep.equal({ bar: &#39;baz&#39; });\nexpect({ foo: { bar: { baz: &#39;quux&#39; } } })\n  .to.have.deep.property(&#39;foo.bar.baz&#39;, &#39;quux&#39;);\n</code></pre><p><code>.deep.property</code> special characters can be escaped<br />by adding two slashes before the <code>.</code> or <code>[]</code>.</p><pre><code>var deepCss = { &#39;.link&#39;: { &#39;[target]&#39;: 42 }};\nexpect(deepCss).to.have.deep.property(&#39;\\\\.link.\\\\[target\\\\]&#39;, 42);\n</code></pre>",
      "summary": "<h3>.deep</h3>\n",
      "body": "<p>Sets the <code>deep</code> flag, later used by the <code>equal</code> and<br /><code>property</code> assertions.</p><pre><code>expect(foo).to.deep.equal({ bar: &#39;baz&#39; });\nexpect({ foo: { bar: { baz: &#39;quux&#39; } } })\n  .to.have.deep.property(&#39;foo.bar.baz&#39;, &#39;quux&#39;);\n</code></pre><p><code>.deep.property</code> special characters can be escaped<br />by adding two slashes before the <code>.</code> or <code>[]</code>.</p><pre><code>var deepCss = { &#39;.link&#39;: { &#39;[target]&#39;: 42 }};\nexpect(deepCss).to.have.deep.property(&#39;\\\\.link.\\\\[target\\\\]&#39;, 42);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 359,
    "codeStart": 380,
    "code": "Assertion.addProperty('deep', function () {\n  flag(this, 'deep', true);\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "any",
        "html": "<p>any</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.any</h3>\n<p>Sets the <code>any</code> flag, (opposite of the <code>all</code> flag)<br />later used in the <code>keys</code> assertion.</p><pre><code>expect(foo).to.have.any.keys(&#39;bar&#39;, &#39;baz&#39;);\n</code></pre>",
      "summary": "<h3>.any</h3>\n",
      "body": "<p>Sets the <code>any</code> flag, (opposite of the <code>all</code> flag)<br />later used in the <code>keys</code> assertion.</p><pre><code>expect(foo).to.have.any.keys(&#39;bar&#39;, &#39;baz&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 384,
    "codeStart": 397,
    "code": "Assertion.addProperty('any', function () {\n  flag(this, 'any', true);\n  flag(this, 'all', false)\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "all",
        "html": "<p>all</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.all</h3>\n<p>Sets the <code>all</code> flag (opposite of the <code>any</code> flag)<br />later used by the <code>keys</code> assertion.</p><pre><code>expect(foo).to.have.all.keys(&#39;bar&#39;, &#39;baz&#39;);\n</code></pre>",
      "summary": "<h3>.all</h3>\n",
      "body": "<p>Sets the <code>all</code> flag (opposite of the <code>any</code> flag)<br />later used by the <code>keys</code> assertion.</p><pre><code>expect(foo).to.have.all.keys(&#39;bar&#39;, &#39;baz&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 403,
    "codeStart": 416,
    "code": "Assertion.addProperty('all', function () {\n  flag(this, 'all', true);\n  flag(this, 'any', false);\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "a",
        "html": "<p>a</p>"
      },
      {
        "type": "alias",
        "string": "an",
        "html": "<p>an</p>"
      },
      {
        "type": "param",
        "string": "{String} type",
        "name": "type",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} type</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.a(type)</h3>\n<p>The <code>a</code> and <code>an</code> assertions are aliases that can be<br />used either as language chains or to assert a value&#39;s<br />type.</p><pre><code>// typeof\nexpect(&#39;test&#39;).to.be.a(&#39;string&#39;);\nexpect({ foo: &#39;bar&#39; }).to.be.an(&#39;object&#39;);\nexpect(null).to.be.a(&#39;null&#39;);\nexpect(undefined).to.be.an(&#39;undefined&#39;);\nexpect(new Error).to.be.an(&#39;error&#39;);\nexpect(new Promise).to.be.a(&#39;promise&#39;);\nexpect(new Float32Array()).to.be.a(&#39;float32array&#39;);\nexpect(Symbol()).to.be.a(&#39;symbol&#39;);\n\n// es6 overrides\nexpect({[Symbol.toStringTag]:()=&gt;&#39;foo&#39;}).to.be.a(&#39;foo&#39;);\n\n// language chain\nexpect(foo).to.be.an.instanceof(Foo);\n</code></pre>",
      "summary": "<h3>.a(type)</h3>\n",
      "body": "<p>The <code>a</code> and <code>an</code> assertions are aliases that can be<br />used either as language chains or to assert a value&#39;s<br />type.</p><pre><code>// typeof\nexpect(&#39;test&#39;).to.be.a(&#39;string&#39;);\nexpect({ foo: &#39;bar&#39; }).to.be.an(&#39;object&#39;);\nexpect(null).to.be.a(&#39;null&#39;);\nexpect(undefined).to.be.an(&#39;undefined&#39;);\nexpect(new Error).to.be.an(&#39;error&#39;);\nexpect(new Promise).to.be.a(&#39;promise&#39;);\nexpect(new Float32Array()).to.be.a(&#39;float32array&#39;);\nexpect(Symbol()).to.be.a(&#39;symbol&#39;);\n\n// es6 overrides\nexpect({[Symbol.toStringTag]:()=&gt;&#39;foo&#39;}).to.be.a(&#39;foo&#39;);\n\n// language chain\nexpect(foo).to.be.an.instanceof(Foo);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 421,
    "codeStart": 452,
    "code": "function an (type, msg) {\n  if (msg) flag(this, 'message', msg);\n  type = type.toLowerCase();\n  var obj = flag(this, 'object')\n    , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n  this.assert(\n      type === _.type(obj)\n    , 'expected #{this} to be ' + article + type\n    , 'expected #{this} not to be ' + article + type\n  );\n}\n\nAssertion.addChainableMethod('an', an);\nAssertion.addChainableMethod('a', an);",
    "ctx": {
      "type": "function",
      "name": "an",
      "string": "an()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "include",
        "html": "<p>include</p>"
      },
      {
        "type": "alias",
        "string": "contain",
        "html": "<p>contain</p>"
      },
      {
        "type": "alias",
        "string": "includes",
        "html": "<p>includes</p>"
      },
      {
        "type": "alias",
        "string": "contains",
        "html": "<p>contains</p>"
      },
      {
        "type": "param",
        "string": "{Object|String|Number} obj",
        "name": "obj",
        "description": "",
        "types": [
          "Object",
          "String",
          "Number"
        ],
        "typesDescription": "<code>Object</code>|<code>String</code>|<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object|String|Number} obj</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.include(value)</h3>\n<p>The <code>include</code> and <code>contain</code> assertions can be used as either property<br />based language chains or as methods to assert the inclusion of an object<br />in an array or a substring in a string. When used as language chains,<br />they toggle the <code>contains</code> flag for the <code>keys</code> assertion.</p><pre><code>expect([1,2,3]).to.include(2);\nexpect(&#39;foobar&#39;).to.contain(&#39;foo&#39;);\nexpect({ foo: &#39;bar&#39;, hello: &#39;universe&#39; }).to.include.keys(&#39;foo&#39;);\n</code></pre>",
      "summary": "<h3>.include(value)</h3>\n",
      "body": "<p>The <code>include</code> and <code>contain</code> assertions can be used as either property<br />based language chains or as methods to assert the inclusion of an object<br />in an array or a substring in a string. When used as language chains,<br />they toggle the <code>contains</code> flag for the <code>keys</code> assertion.</p><pre><code>expect([1,2,3]).to.include(2);\nexpect(&#39;foobar&#39;).to.contain(&#39;foo&#39;);\nexpect({ foo: &#39;bar&#39;, hello: &#39;universe&#39; }).to.include.keys(&#39;foo&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 468,
    "codeStart": 490,
    "code": "function includeChainingBehavior () {\n  flag(this, 'contains', true);\n}\n\nfunction include (val, msg) {\n  _.expectTypes(this, ['array', 'object', 'string']);\n\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  var expected = false;\n\n  if (_.type(obj) === 'array' && _.type(val) === 'object') {\n    for (var i in obj) {\n      if (_.eql(obj[i], val)) {\n        expected = true;\n        break;\n      }\n    }\n  } else if (_.type(val) === 'object') {\n    if (!flag(this, 'negate')) {\n      for (var k in val) new Assertion(obj).property(k, val[k]);\n      return;\n    }\n    var subset = {};\n    for (var k in val) subset[k] = obj[k];\n    expected = _.eql(subset, val);\n  } else {\n    expected = (obj != undefined) && ~obj.indexOf(val);\n  }\n  this.assert(\n      expected\n    , 'expected #{this} to include ' + _.inspect(val)\n    , 'expected #{this} to not include ' + _.inspect(val));\n}\n\nAssertion.addChainableMethod('include', include, includeChainingBehavior);\nAssertion.addChainableMethod('contain', include, includeChainingBehavior);\nAssertion.addChainableMethod('contains', include, includeChainingBehavior);\nAssertion.addChainableMethod('includes', include, includeChainingBehavior);",
    "ctx": {
      "type": "function",
      "name": "includeChainingBehavior",
      "string": "includeChainingBehavior()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "ok",
        "html": "<p>ok</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.ok</h3>\n<p>Asserts that the target is truthy.</p><pre><code>expect(&#39;everything&#39;).to.be.ok;\nexpect(1).to.be.ok;\nexpect(false).to.not.be.ok;\nexpect(undefined).to.not.be.ok;\nexpect(null).to.not.be.ok;\n</code></pre>",
      "summary": "<h3>.ok</h3>\n",
      "body": "<p>Asserts that the target is truthy.</p><pre><code>expect(&#39;everything&#39;).to.be.ok;\nexpect(1).to.be.ok;\nexpect(false).to.not.be.ok;\nexpect(undefined).to.not.be.ok;\nexpect(null).to.not.be.ok;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 530,
    "codeStart": 546,
    "code": "Assertion.addProperty('ok', function () {\n  this.assert(\n      flag(this, 'object')\n    , 'expected #{this} to be truthy'\n    , 'expected #{this} to be falsy');\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "true",
        "html": "<p>true</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.true</h3>\n<p>Asserts that the target is <code>true</code>.</p><pre><code>expect(true).to.be.true;\nexpect(1).to.not.be.true;\n</code></pre>",
      "summary": "<h3>.true</h3>\n",
      "body": "<p>Asserts that the target is <code>true</code>.</p><pre><code>expect(true).to.be.true;\nexpect(1).to.not.be.true;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 553,
    "codeStart": 566,
    "code": "Assertion.addProperty('true', function () {\n  this.assert(\n      true === flag(this, 'object')\n    , 'expected #{this} to be true'\n    , 'expected #{this} to be false'\n    , this.negate ? false : true\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "false",
        "html": "<p>false</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.false</h3>\n<p>Asserts that the target is <code>false</code>.</p><pre><code>expect(false).to.be.false;\nexpect(0).to.not.be.false;\n</code></pre>",
      "summary": "<h3>.false</h3>\n",
      "body": "<p>Asserts that the target is <code>false</code>.</p><pre><code>expect(false).to.be.false;\nexpect(0).to.not.be.false;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 575,
    "codeStart": 588,
    "code": "Assertion.addProperty('false', function () {\n  this.assert(\n      false === flag(this, 'object')\n    , 'expected #{this} to be false'\n    , 'expected #{this} to be true'\n    , this.negate ? true : false\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "null",
        "html": "<p>null</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.null</h3>\n<p>Asserts that the target is <code>null</code>.</p><pre><code>expect(null).to.be.null;\nexpect(undefined).to.not.be.null;\n</code></pre>",
      "summary": "<h3>.null</h3>\n",
      "body": "<p>Asserts that the target is <code>null</code>.</p><pre><code>expect(null).to.be.null;\nexpect(undefined).to.not.be.null;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 597,
    "codeStart": 610,
    "code": "Assertion.addProperty('null', function () {\n  this.assert(\n      null === flag(this, 'object')\n    , 'expected #{this} to be null'\n    , 'expected #{this} not to be null'\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "undefined",
        "html": "<p>undefined</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.undefined</h3>\n<p>Asserts that the target is <code>undefined</code>.</p><pre><code>expect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;\n</code></pre>",
      "summary": "<h3>.undefined</h3>\n",
      "body": "<p>Asserts that the target is <code>undefined</code>.</p><pre><code>expect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 618,
    "codeStart": 631,
    "code": "Assertion.addProperty('undefined', function () {\n  this.assert(\n      undefined === flag(this, 'object')\n    , 'expected #{this} to be undefined'\n    , 'expected #{this} not to be undefined'\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "NaN",
        "html": "<p>NaN</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.NaN</h3>\n<p>Asserts that the target is <code>NaN</code>.</p><pre><code>expect(&#39;foo&#39;).to.be.NaN;\nexpect(4).not.to.be.NaN;\n</code></pre>",
      "summary": "<h3>.NaN</h3>\n<p>Asserts that the target is <code>NaN</code>.</p>",
      "body": "<pre><code>expect(&#39;foo&#39;).to.be.NaN;\nexpect(4).not.to.be.NaN;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 639,
    "codeStart": 651,
    "code": "Assertion.addProperty('NaN', function () {\n  this.assert(\n      isNaN(flag(this, 'object'))\n      , 'expected #{this} to be NaN'\n      , 'expected #{this} not to be NaN'\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "exist",
        "html": "<p>exist</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.exist</h3>\n<p>Asserts that the target is neither <code>null</code> nor <code>undefined</code>.</p><pre><code>var foo = &#39;hi&#39;\n  , bar = null\n  , baz;\n\nexpect(foo).to.exist;\nexpect(bar).to.not.exist;\nexpect(baz).to.not.exist;\n</code></pre>",
      "summary": "<h3>.exist</h3>\n",
      "body": "<p>Asserts that the target is neither <code>null</code> nor <code>undefined</code>.</p><pre><code>var foo = &#39;hi&#39;\n  , bar = null\n  , baz;\n\nexpect(foo).to.exist;\nexpect(bar).to.not.exist;\nexpect(baz).to.not.exist;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 659,
    "codeStart": 677,
    "code": "Assertion.addProperty('exist', function () {\n  this.assert(\n      null != flag(this, 'object')\n    , 'expected #{this} to exist'\n    , 'expected #{this} to not exist'\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "empty",
        "html": "<p>empty</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.empty</h3>\n<p>Asserts that the target&#39;s length is <code>0</code>. For arrays and strings, it checks<br />the <code>length</code> property. For objects, it gets the count of<br />enumerable keys.</p><pre><code>expect([]).to.be.empty;\nexpect(&#39;&#39;).to.be.empty;\nexpect({}).to.be.empty;\n</code></pre>",
      "summary": "<h3>.empty</h3>\n",
      "body": "<p>Asserts that the target&#39;s length is <code>0</code>. For arrays and strings, it checks<br />the <code>length</code> property. For objects, it gets the count of<br />enumerable keys.</p><pre><code>expect([]).to.be.empty;\nexpect(&#39;&#39;).to.be.empty;\nexpect({}).to.be.empty;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 686,
    "codeStart": 702,
    "code": "Assertion.addProperty('empty', function () {\n  var obj = flag(this, 'object')\n    , expected = obj;\n\n  if (Array.isArray(obj) || 'string' === typeof object) {\n    expected = obj.length;\n  } else if (typeof obj === 'object') {\n    expected = Object.keys(obj).length;\n  }\n\n  this.assert(\n      !expected\n    , 'expected #{this} to be empty'\n    , 'expected #{this} not to be empty'\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "arguments",
        "html": "<p>arguments</p>"
      },
      {
        "type": "alias",
        "string": "Arguments",
        "html": "<p>Arguments</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.arguments</h3>\n<p>Asserts that the target is an arguments object.</p><pre><code>function test () {\n  expect(arguments).to.be.arguments;\n}\n</code></pre>",
      "summary": "<h3>.arguments</h3>\n",
      "body": "<p>Asserts that the target is an arguments object.</p><pre><code>function test () {\n  expect(arguments).to.be.arguments;\n}\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 719,
    "codeStart": 734,
    "code": "function checkArguments () {\n  var obj = flag(this, 'object')\n    , type = Object.prototype.toString.call(obj);\n  this.assert(\n      '[object Arguments]' === type\n    , 'expected #{this} to be arguments but got ' + type\n    , 'expected #{this} to not be arguments'\n  );\n}\n\nAssertion.addProperty('arguments', checkArguments);\nAssertion.addProperty('Arguments', checkArguments);",
    "ctx": {
      "type": "function",
      "name": "checkArguments",
      "string": "checkArguments()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "equal",
        "html": "<p>equal</p>"
      },
      {
        "type": "alias",
        "string": "equals",
        "html": "<p>equals</p>"
      },
      {
        "type": "alias",
        "string": "eq",
        "html": "<p>eq</p>"
      },
      {
        "type": "alias",
        "string": "deep.equal",
        "html": "<p>deep.equal</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.equal(value)</h3>\n<p>Asserts that the target is strictly equal (<code>===</code>) to <code>value</code>.<br />Alternately, if the <code>deep</code> flag is set, asserts that<br />the target is deeply equal to <code>value</code>.</p><pre><code>expect(&#39;hello&#39;).to.equal(&#39;hello&#39;);\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({ foo: &#39;bar&#39; }).to.not.equal({ foo: &#39;bar&#39; });\nexpect({ foo: &#39;bar&#39; }).to.deep.equal({ foo: &#39;bar&#39; });\n</code></pre>",
      "summary": "<h3>.equal(value)</h3>\n",
      "body": "<p>Asserts that the target is strictly equal (<code>===</code>) to <code>value</code>.<br />Alternately, if the <code>deep</code> flag is set, asserts that<br />the target is deeply equal to <code>value</code>.</p><pre><code>expect(&#39;hello&#39;).to.equal(&#39;hello&#39;);\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({ foo: &#39;bar&#39; }).to.not.equal({ foo: &#39;bar&#39; });\nexpect({ foo: &#39;bar&#39; }).to.deep.equal({ foo: &#39;bar&#39; });\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 747,
    "codeStart": 770,
    "code": "function assertEqual (val, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  if (flag(this, 'deep')) {\n    return this.eql(val);\n  } else {\n    this.assert(\n        val === obj\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{exp}'\n      , val\n      , this._obj\n      , true\n    );\n  }\n}\n\nAssertion.addMethod('equal', assertEqual);\nAssertion.addMethod('equals', assertEqual);\nAssertion.addMethod('eq', assertEqual);",
    "ctx": {
      "type": "function",
      "name": "assertEqual",
      "string": "assertEqual()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "eql",
        "html": "<p>eql</p>"
      },
      {
        "type": "alias",
        "string": "eqls",
        "html": "<p>eqls</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.eql(value)</h3>\n<p>Asserts that the target is deeply equal to <code>value</code>.</p><pre><code>expect({ foo: &#39;bar&#39; }).to.eql({ foo: &#39;bar&#39; });\nexpect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n</code></pre>",
      "summary": "<h3>.eql(value)</h3>\n",
      "body": "<p>Asserts that the target is deeply equal to <code>value</code>.</p><pre><code>expect({ foo: &#39;bar&#39; }).to.eql({ foo: &#39;bar&#39; });\nexpect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 791,
    "codeStart": 807,
    "code": "function assertEql(obj, msg) {\n  if (msg) flag(this, 'message', msg);\n  this.assert(\n      _.eql(obj, flag(this, 'object'))\n    , 'expected #{this} to deeply equal #{exp}'\n    , 'expected #{this} to not deeply equal #{exp}'\n    , obj\n    , this._obj\n    , true\n  );\n}\n\nAssertion.addMethod('eql', assertEql);\nAssertion.addMethod('eqls', assertEql);",
    "ctx": {
      "type": "function",
      "name": "assertEql",
      "string": "assertEql()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "above",
        "html": "<p>above</p>"
      },
      {
        "type": "alias",
        "string": "gt",
        "html": "<p>gt</p>"
      },
      {
        "type": "alias",
        "string": "greaterThan",
        "html": "<p>greaterThan</p>"
      },
      {
        "type": "param",
        "string": "{Number} value",
        "name": "value",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.above(value)</h3>\n<p>Asserts that the target is greater than <code>value</code>.</p><pre><code>expect(10).to.be.above(5);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a minimum length. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);\n</code></pre>",
      "summary": "<h3>.above(value)</h3>\n",
      "body": "<p>Asserts that the target is greater than <code>value</code>.</p><pre><code>expect(10).to.be.above(5);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a minimum length. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 822,
    "codeStart": 846,
    "code": "function assertAbove (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  if (flag(this, 'doLength')) {\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n    this.assert(\n        len > n\n      , 'expected #{this} to have a length above #{exp} but got #{act}'\n      , 'expected #{this} to not have a length above #{exp}'\n      , n\n      , len\n    );\n  } else {\n    this.assert(\n        obj > n\n      , 'expected #{this} to be above ' + n\n      , 'expected #{this} to be at most ' + n\n    );\n  }\n}\n\nAssertion.addMethod('above', assertAbove);\nAssertion.addMethod('gt', assertAbove);\nAssertion.addMethod('greaterThan', assertAbove);",
    "ctx": {
      "type": "function",
      "name": "assertAbove",
      "string": "assertAbove()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "least",
        "html": "<p>least</p>"
      },
      {
        "type": "alias",
        "string": "gte",
        "html": "<p>gte</p>"
      },
      {
        "type": "param",
        "string": "{Number} value",
        "name": "value",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.least(value)</h3>\n<p>Asserts that the target is greater than or equal to <code>value</code>.</p><pre><code>expect(10).to.be.at.least(10);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a minimum length. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.of.at.least(2);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n</code></pre>",
      "summary": "<h3>.least(value)</h3>\n",
      "body": "<p>Asserts that the target is greater than or equal to <code>value</code>.</p><pre><code>expect(10).to.be.at.least(10);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a minimum length. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.of.at.least(2);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.least(3);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 872,
    "codeStart": 895,
    "code": "function assertLeast (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  if (flag(this, 'doLength')) {\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n    this.assert(\n        len >= n\n      , 'expected #{this} to have a length at least #{exp} but got #{act}'\n      , 'expected #{this} to have a length below #{exp}'\n      , n\n      , len\n    );\n  } else {\n    this.assert(\n        obj >= n\n      , 'expected #{this} to be at least ' + n\n      , 'expected #{this} to be below ' + n\n    );\n  }\n}\n\nAssertion.addMethod('least', assertLeast);\nAssertion.addMethod('gte', assertLeast);",
    "ctx": {
      "type": "function",
      "name": "assertLeast",
      "string": "assertLeast()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "below",
        "html": "<p>below</p>"
      },
      {
        "type": "alias",
        "string": "lt",
        "html": "<p>lt</p>"
      },
      {
        "type": "alias",
        "string": "lessThan",
        "html": "<p>lessThan</p>"
      },
      {
        "type": "param",
        "string": "{Number} value",
        "name": "value",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.below(value)</h3>\n<p>Asserts that the target is less than <code>value</code>.</p><pre><code>expect(5).to.be.below(10);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a maximum length. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);\n</code></pre>",
      "summary": "<h3>.below(value)</h3>\n",
      "body": "<p>Asserts that the target is less than <code>value</code>.</p><pre><code>expect(5).to.be.below(10);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a maximum length. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 920,
    "codeStart": 944,
    "code": "function assertBelow (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  if (flag(this, 'doLength')) {\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n    this.assert(\n        len < n\n      , 'expected #{this} to have a length below #{exp} but got #{act}'\n      , 'expected #{this} to not have a length below #{exp}'\n      , n\n      , len\n    );\n  } else {\n    this.assert(\n        obj < n\n      , 'expected #{this} to be below ' + n\n      , 'expected #{this} to be at least ' + n\n    );\n  }\n}\n\nAssertion.addMethod('below', assertBelow);\nAssertion.addMethod('lt', assertBelow);\nAssertion.addMethod('lessThan', assertBelow);",
    "ctx": {
      "type": "function",
      "name": "assertBelow",
      "string": "assertBelow()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "most",
        "html": "<p>most</p>"
      },
      {
        "type": "alias",
        "string": "lte",
        "html": "<p>lte</p>"
      },
      {
        "type": "param",
        "string": "{Number} value",
        "name": "value",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.most(value)</h3>\n<p>Asserts that the target is less than or equal to <code>value</code>.</p><pre><code>expect(5).to.be.at.most(5);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a maximum length. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.of.at.most(4);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n</code></pre>",
      "summary": "<h3>.most(value)</h3>\n",
      "body": "<p>Asserts that the target is less than or equal to <code>value</code>.</p><pre><code>expect(5).to.be.at.most(5);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a maximum length. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.of.at.most(4);\nexpect([ 1, 2, 3 ]).to.have.length.of.at.most(3);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 970,
    "codeStart": 993,
    "code": "function assertMost (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  if (flag(this, 'doLength')) {\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n    this.assert(\n        len <= n\n      , 'expected #{this} to have a length at most #{exp} but got #{act}'\n      , 'expected #{this} to have a length above #{exp}'\n      , n\n      , len\n    );\n  } else {\n    this.assert(\n        obj <= n\n      , 'expected #{this} to be at most ' + n\n      , 'expected #{this} to be above ' + n\n    );\n  }\n}\n\nAssertion.addMethod('most', assertMost);\nAssertion.addMethod('lte', assertMost);",
    "ctx": {
      "type": "function",
      "name": "assertMost",
      "string": "assertMost()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "within",
        "html": "<p>within</p>"
      },
      {
        "type": "param",
        "string": "{Number} start lowerbound inclusive",
        "name": "start",
        "description": "<p>lowerbound inclusive</p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} finish upperbound inclusive",
        "name": "finish",
        "description": "<p>upperbound inclusive</p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.within(start, finish)</h3>\n<p>Asserts that the target is within a range.</p><pre><code>expect(7).to.be.within(5,10);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a length range. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);\n</code></pre>",
      "summary": "<h3>.within(start, finish)</h3>\n",
      "body": "<p>Asserts that the target is within a range.</p><pre><code>expect(7).to.be.within(5,10);\n</code></pre><p>Can also be used in conjunction with <code>length</code> to<br />assert a length range. The benefit being a<br />more informative error message than if the length<br />was supplied directly.</p><pre><code>expect(&#39;foo&#39;).to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1018,
    "codeStart": 1041,
    "code": "Assertion.addMethod('within', function (start, finish, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , range = start + '..' + finish;\n  if (flag(this, 'doLength')) {\n    new Assertion(obj, msg).to.have.property('length');\n    var len = obj.length;\n    this.assert(\n        len >= start && len <= finish\n      , 'expected #{this} to have a length within ' + range\n      , 'expected #{this} to not have a length within ' + range\n    );\n  } else {\n    this.assert(\n        obj >= start && obj <= finish\n      , 'expected #{this} to be within ' + range\n      , 'expected #{this} to not be within ' + range\n    );\n  }\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "instanceof",
        "html": "<p>instanceof</p>"
      },
      {
        "type": "param",
        "string": "{Constructor} constructor",
        "name": "constructor",
        "description": "",
        "types": [
          "Constructor"
        ],
        "typesDescription": "<a href=\"Constructor.html\">Constructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Constructor} constructor</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "alias",
        "string": "instanceOf",
        "html": "<p>instanceOf</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.instanceof(constructor)</h3>\n<p>Asserts that the target is an instance of <code>constructor</code>.</p><pre><code>var Tea = function (name) { this.name = name; }\n  , Chai = new Tea(&#39;chai&#39;);\n\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([ 1, 2, 3 ]).to.be.instanceof(Array);\n</code></pre>",
      "summary": "<h3>.instanceof(constructor)</h3>\n",
      "body": "<p>Asserts that the target is an instance of <code>constructor</code>.</p><pre><code>var Tea = function (name) { this.name = name; }\n  , Chai = new Tea(&#39;chai&#39;);\n\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([ 1, 2, 3 ]).to.be.instanceof(Array);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1062,
    "codeStart": 1081,
    "code": "function assertInstanceOf (constructor, msg) {\n  if (msg) flag(this, 'message', msg);\n  var name = _.getName(constructor);\n  this.assert(\n      flag(this, 'object') instanceof constructor\n    , 'expected #{this} to be an instance of ' + name\n    , 'expected #{this} to not be an instance of ' + name\n  );\n};\n\nAssertion.addMethod('instanceof', assertInstanceOf);\nAssertion.addMethod('instanceOf', assertInstanceOf);",
    "ctx": {
      "type": "function",
      "name": "assertInstanceOf",
      "string": "assertInstanceOf()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "property",
        "html": "<p>property</p>"
      },
      {
        "type": "alias",
        "string": "deep.property",
        "html": "<p>deep.property</p>"
      },
      {
        "type": "param",
        "string": "{String} name",
        "name": "name",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} name</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value (optional)",
        "name": "value",
        "description": "<p>(optional)</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "value of property for chaining",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>value of property for chaining</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.property(name, [value])</h3>\n<p>Asserts that the target has a property <code>name</code>, optionally asserting that<br />the value of that property is strictly equal to  <code>value</code>.<br />If the <code>deep</code> flag is set, you can use dot- and bracket-notation for deep<br />references into objects and arrays.</p><pre><code>// simple referencing\nvar obj = { foo: &#39;bar&#39; };\nexpect(obj).to.have.property(&#39;foo&#39;);\nexpect(obj).to.have.property(&#39;foo&#39;, &#39;bar&#39;);\n\n// deep referencing\nvar deepObj = {\n    green: { tea: &#39;matcha&#39; }\n  , teas: [ &#39;chai&#39;, &#39;matcha&#39;, { tea: &#39;konacha&#39; } ]\n};\n\nexpect(deepObj).to.have.deep.property(&#39;green.tea&#39;, &#39;matcha&#39;);\nexpect(deepObj).to.have.deep.property(&#39;teas[1]&#39;, &#39;matcha&#39;);\nexpect(deepObj).to.have.deep.property(&#39;teas[2].tea&#39;, &#39;konacha&#39;);\n</code></pre><p>You can also use an array as the starting point of a <code>deep.property</code><br />assertion, or traverse nested arrays.</p><pre><code>var arr = [\n    [ &#39;chai&#39;, &#39;matcha&#39;, &#39;konacha&#39; ]\n  , [ { tea: &#39;chai&#39; }\n    , { tea: &#39;matcha&#39; }\n    , { tea: &#39;konacha&#39; } ]\n];\n\nexpect(arr).to.have.deep.property(&#39;[0][1]&#39;, &#39;matcha&#39;);\nexpect(arr).to.have.deep.property(&#39;[1][2].tea&#39;, &#39;konacha&#39;);\n</code></pre><p>Furthermore, <code>property</code> changes the subject of the assertion<br />to be the value of that property from the original object. This<br />permits for further chainable assertions on that property.</p><pre><code>expect(obj).to.have.property(&#39;foo&#39;)\n  .that.is.a(&#39;string&#39;);\nexpect(deepObj).to.have.property(&#39;green&#39;)\n  .that.is.an(&#39;object&#39;)\n  .that.deep.equals({ tea: &#39;matcha&#39; });\nexpect(deepObj).to.have.property(&#39;teas&#39;)\n  .that.is.an(&#39;array&#39;)\n  .with.deep.property(&#39;[2]&#39;)\n    .that.deep.equals({ tea: &#39;konacha&#39; });\n</code></pre><p>Note that dots and bracket in <code>name</code> must be backslash-escaped when<br />the <code>deep</code> flag is set, while they must NOT be escaped when the <code>deep</code><br />flag is not set.</p><pre><code>// simple referencing\nvar css = { &#39;.link[target]&#39;: 42 };\nexpect(css).to.have.property(&#39;.link[target]&#39;, 42);\n\n// deep referencing\nvar deepCss = { &#39;.link&#39;: { &#39;[target]&#39;: 42 }};\nexpect(deepCss).to.have.deep.property(&#39;\\\\.link.\\\\[target\\\\]&#39;, 42);\n</code></pre>",
      "summary": "<h3>.property(name, [value])</h3>\n",
      "body": "<p>Asserts that the target has a property <code>name</code>, optionally asserting that<br />the value of that property is strictly equal to  <code>value</code>.<br />If the <code>deep</code> flag is set, you can use dot- and bracket-notation for deep<br />references into objects and arrays.</p><pre><code>// simple referencing\nvar obj = { foo: &#39;bar&#39; };\nexpect(obj).to.have.property(&#39;foo&#39;);\nexpect(obj).to.have.property(&#39;foo&#39;, &#39;bar&#39;);\n\n// deep referencing\nvar deepObj = {\n    green: { tea: &#39;matcha&#39; }\n  , teas: [ &#39;chai&#39;, &#39;matcha&#39;, { tea: &#39;konacha&#39; } ]\n};\n\nexpect(deepObj).to.have.deep.property(&#39;green.tea&#39;, &#39;matcha&#39;);\nexpect(deepObj).to.have.deep.property(&#39;teas[1]&#39;, &#39;matcha&#39;);\nexpect(deepObj).to.have.deep.property(&#39;teas[2].tea&#39;, &#39;konacha&#39;);\n</code></pre><p>You can also use an array as the starting point of a <code>deep.property</code><br />assertion, or traverse nested arrays.</p><pre><code>var arr = [\n    [ &#39;chai&#39;, &#39;matcha&#39;, &#39;konacha&#39; ]\n  , [ { tea: &#39;chai&#39; }\n    , { tea: &#39;matcha&#39; }\n    , { tea: &#39;konacha&#39; } ]\n];\n\nexpect(arr).to.have.deep.property(&#39;[0][1]&#39;, &#39;matcha&#39;);\nexpect(arr).to.have.deep.property(&#39;[1][2].tea&#39;, &#39;konacha&#39;);\n</code></pre><p>Furthermore, <code>property</code> changes the subject of the assertion<br />to be the value of that property from the original object. This<br />permits for further chainable assertions on that property.</p><pre><code>expect(obj).to.have.property(&#39;foo&#39;)\n  .that.is.a(&#39;string&#39;);\nexpect(deepObj).to.have.property(&#39;green&#39;)\n  .that.is.an(&#39;object&#39;)\n  .that.deep.equals({ tea: &#39;matcha&#39; });\nexpect(deepObj).to.have.property(&#39;teas&#39;)\n  .that.is.an(&#39;array&#39;)\n  .with.deep.property(&#39;[2]&#39;)\n    .that.deep.equals({ tea: &#39;konacha&#39; });\n</code></pre><p>Note that dots and bracket in <code>name</code> must be backslash-escaped when<br />the <code>deep</code> flag is set, while they must NOT be escaped when the <code>deep</code><br />flag is not set.</p><pre><code>// simple referencing\nvar css = { &#39;.link[target]&#39;: 42 };\nexpect(css).to.have.property(&#39;.link[target]&#39;, 42);\n\n// deep referencing\nvar deepCss = { &#39;.link&#39;: { &#39;[target]&#39;: 42 }};\nexpect(deepCss).to.have.deep.property(&#39;\\\\.link.\\\\[target\\\\]&#39;, 42);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1094,
    "codeStart": 1166,
    "code": "Assertion.addMethod('property', function (name, val, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  var isDeep = !!flag(this, 'deep')\n    , descriptor = isDeep ? 'deep property ' : 'property '\n    , negate = flag(this, 'negate')\n    , obj = flag(this, 'object')\n    , pathInfo = isDeep ? _.getPathInfo(name, obj) : null\n    , hasProperty = isDeep\n      ? pathInfo.exists\n      : _.hasProperty(name, obj)\n    , value = isDeep\n      ? pathInfo.value\n      : obj[name];\n\n  if (negate && arguments.length > 1) {\n    if (undefined === value) {\n      msg = (msg != null) ? msg + ': ' : '';\n      throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));\n    }\n  } else {\n    this.assert(\n        hasProperty\n      , 'expected #{this} to have a ' + descriptor + _.inspect(name)\n      , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n  }\n\n  if (arguments.length > 1) {\n    this.assert(\n        val === value\n      , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'\n      , val\n      , value\n    );\n  }\n\n  flag(this, 'object', value);\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "ownProperty",
        "html": "<p>ownProperty</p>"
      },
      {
        "type": "alias",
        "string": "haveOwnProperty",
        "html": "<p>haveOwnProperty</p>"
      },
      {
        "type": "param",
        "string": "{String} name",
        "name": "name",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} name</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.ownProperty(name)</h3>\n<p>Asserts that the target has an own property <code>name</code>.</p><pre><code>expect(&#39;test&#39;).to.have.ownProperty(&#39;length&#39;);\n</code></pre>",
      "summary": "<h3>.ownProperty(name)</h3>\n",
      "body": "<p>Asserts that the target has an own property <code>name</code>.</p><pre><code>expect(&#39;test&#39;).to.have.ownProperty(&#39;length&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1207,
    "codeStart": 1222,
    "code": "function assertOwnProperty (name, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  this.assert(\n      obj.hasOwnProperty(name)\n    , 'expected #{this} to have own property ' + _.inspect(name)\n    , 'expected #{this} to not have own property ' + _.inspect(name)\n  );\n}\n\nAssertion.addMethod('ownProperty', assertOwnProperty);\nAssertion.addMethod('haveOwnProperty', assertOwnProperty);",
    "ctx": {
      "type": "function",
      "name": "assertOwnProperty",
      "string": "assertOwnProperty()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "ownPropertyDescriptor",
        "html": "<p>ownPropertyDescriptor</p>"
      },
      {
        "type": "alias",
        "string": "haveOwnPropertyDescriptor",
        "html": "<p>haveOwnPropertyDescriptor</p>"
      },
      {
        "type": "param",
        "string": "{String} name",
        "name": "name",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} name</p>"
      },
      {
        "type": "param",
        "string": "{Object} descriptor _optional_",
        "name": "descriptor",
        "description": "<p><em>optional</em></p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.ownPropertyDescriptor(name[, descriptor[, message]])</h3>\n<p>Asserts that the target has an own property descriptor <code>name</code>, that optionally matches <code>descriptor</code>.</p><pre><code>expect(&#39;test&#39;).to.have.ownPropertyDescriptor(&#39;length&#39;);\nexpect(&#39;test&#39;).to.have.ownPropertyDescriptor(&#39;length&#39;, { enumerable: false, configurable: false, writable: false, value: 4 });\nexpect(&#39;test&#39;).not.to.have.ownPropertyDescriptor(&#39;length&#39;, { enumerable: false, configurable: false, writable: false, value: 3 });\nexpect(&#39;test&#39;).ownPropertyDescriptor(&#39;length&#39;).to.have.property(&#39;enumerable&#39;, false);\nexpect(&#39;test&#39;).ownPropertyDescriptor(&#39;length&#39;).to.have.keys(&#39;value&#39;);\n</code></pre>",
      "summary": "<h3>.ownPropertyDescriptor(name[, descriptor[, message]])</h3>\n",
      "body": "<p>Asserts that the target has an own property descriptor <code>name</code>, that optionally matches <code>descriptor</code>.</p><pre><code>expect(&#39;test&#39;).to.have.ownPropertyDescriptor(&#39;length&#39;);\nexpect(&#39;test&#39;).to.have.ownPropertyDescriptor(&#39;length&#39;, { enumerable: false, configurable: false, writable: false, value: 4 });\nexpect(&#39;test&#39;).not.to.have.ownPropertyDescriptor(&#39;length&#39;, { enumerable: false, configurable: false, writable: false, value: 3 });\nexpect(&#39;test&#39;).ownPropertyDescriptor(&#39;length&#39;).to.have.property(&#39;enumerable&#39;, false);\nexpect(&#39;test&#39;).ownPropertyDescriptor(&#39;length&#39;).to.have.keys(&#39;value&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1235,
    "codeStart": 1255,
    "code": "function assertOwnPropertyDescriptor (name, descriptor, msg) {\n  if (typeof descriptor === 'string') {\n    msg = descriptor;\n    descriptor = null;\n  }\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n  if (actualDescriptor && descriptor) {\n    this.assert(\n        _.eql(descriptor, actualDescriptor)\n      , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n      , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n      , descriptor\n      , actualDescriptor\n      , true\n    );\n  } else {\n    this.assert(\n        actualDescriptor\n      , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n      , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n    );\n  }\n  flag(this, 'object', actualDescriptor);\n}\n\nAssertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\nAssertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);",
    "ctx": {
      "type": "function",
      "name": "assertOwnPropertyDescriptor",
      "string": "assertOwnPropertyDescriptor()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "length",
        "html": "<p>length</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.length</h3>\n<p>Sets the <code>doLength</code> flag later used as a chain precursor to a value<br />comparison for the <code>length</code> property.</p><pre><code>expect(&#39;foo&#39;).to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);\nexpect(&#39;foo&#39;).to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);\nexpect(&#39;foo&#39;).to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);\n</code></pre><p><em>Deprecation notice:</em> Using <code>length</code> as an assertion will be deprecated<br />in version 2.4.0 and removed in 3.0.0. Code using the old style of<br />asserting for <code>length</code> property value using <code>length(value)</code> should be<br />switched to use <code>lengthOf(value)</code> instead.</p>",
      "summary": "<h3>.length</h3>\n",
      "body": "<p>Sets the <code>doLength</code> flag later used as a chain precursor to a value<br />comparison for the <code>length</code> property.</p><pre><code>expect(&#39;foo&#39;).to.have.length.above(2);\nexpect([ 1, 2, 3 ]).to.have.length.above(2);\nexpect(&#39;foo&#39;).to.have.length.below(4);\nexpect([ 1, 2, 3 ]).to.have.length.below(4);\nexpect(&#39;foo&#39;).to.have.length.within(2,4);\nexpect([ 1, 2, 3 ]).to.have.length.within(2,4);\n</code></pre><p><em>Deprecation notice:</em> Using <code>length</code> as an assertion will be deprecated<br />in version 2.4.0 and removed in 3.0.0. Code using the old style of<br />asserting for <code>length</code> property value using <code>length(value)</code> should be<br />switched to use <code>lengthOf(value)</code> instead.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1285,
    "codeStart": 1307
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "lengthOf",
        "html": "<p>lengthOf</p>"
      },
      {
        "type": "param",
        "string": "{Number} length",
        "name": "length",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} length</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.lengthOf(value[, message])</h3>\n<p>Asserts that the target&#39;s <code>length</code> property has<br />the expected value.</p><pre><code>expect([ 1, 2, 3]).to.have.lengthOf(3);\nexpect(&#39;foobar&#39;).to.have.lengthOf(6);\n</code></pre>",
      "summary": "<h3>.lengthOf(value[, message])</h3>\n",
      "body": "<p>Asserts that the target&#39;s <code>length</code> property has<br />the expected value.</p><pre><code>expect([ 1, 2, 3]).to.have.lengthOf(3);\nexpect(&#39;foobar&#39;).to.have.lengthOf(6);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1308,
    "codeStart": 1324,
    "code": "function assertLengthChain () {\n  flag(this, 'doLength', true);\n}\n\nfunction assertLength (n, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  new Assertion(obj, msg).to.have.property('length');\n  var len = obj.length;\n\n  this.assert(\n      len == n\n    , 'expected #{this} to have a length of #{exp} but got #{act}'\n    , 'expected #{this} to not have a length of #{act}'\n    , n\n    , len\n  );\n}\n\nAssertion.addChainableMethod('length', assertLength, assertLengthChain);\nAssertion.addMethod('lengthOf', assertLength);",
    "ctx": {
      "type": "function",
      "name": "assertLengthChain",
      "string": "assertLengthChain()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "match",
        "html": "<p>match</p>"
      },
      {
        "type": "alias",
        "string": "matches",
        "html": "<p>matches</p>"
      },
      {
        "type": "param",
        "string": "{RegExp} RegularExpression",
        "name": "RegularExpression",
        "description": "",
        "types": [
          "RegExp"
        ],
        "typesDescription": "<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp} RegularExpression</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.match(regexp)</h3>\n<p>Asserts that the target matches a regular expression.</p><pre><code>expect(&#39;foobar&#39;).to.match(/^foo/);\n</code></pre>",
      "summary": "<h3>.match(regexp)</h3>\n",
      "body": "<p>Asserts that the target matches a regular expression.</p><pre><code>expect(&#39;foobar&#39;).to.match(/^foo/);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1346,
    "codeStart": 1360,
    "code": "function assertMatch(re, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  this.assert(\n      re.exec(obj)\n    , 'expected #{this} to match ' + re\n    , 'expected #{this} not to match ' + re\n  );\n}\n\nAssertion.addMethod('match', assertMatch);\nAssertion.addMethod('matches', assertMatch);",
    "ctx": {
      "type": "function",
      "name": "assertMatch",
      "string": "assertMatch()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "string",
        "html": "<p>string</p>"
      },
      {
        "type": "param",
        "string": "{String} string",
        "name": "string",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} string</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.string(string)</h3>\n<p>Asserts that the string target contains another string.</p><pre><code>expect(&#39;foobar&#39;).to.have.string(&#39;bar&#39;);\n</code></pre>",
      "summary": "<h3>.string(string)</h3>\n",
      "body": "<p>Asserts that the string target contains another string.</p><pre><code>expect(&#39;foobar&#39;).to.have.string(&#39;bar&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1373,
    "codeStart": 1387,
    "code": "Assertion.addMethod('string', function (str, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  new Assertion(obj, msg).is.a('string');\n\n  this.assert(\n      ~obj.indexOf(str)\n    , 'expected #{this} to contain ' + _.inspect(str)\n    , 'expected #{this} to not contain ' + _.inspect(str)\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "keys",
        "html": "<p>keys</p>"
      },
      {
        "type": "alias",
        "string": "key",
        "html": "<p>key</p>"
      },
      {
        "type": "param",
        "string": "{...String|Array|Object} keys",
        "name": "keys",
        "description": "",
        "types": [
          "String",
          "Array",
          "Object"
        ],
        "typesDescription": "...<code>String</code>|<code>Array</code>|<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": true,
        "html": "<p>{...String|Array|Object} keys</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.keys(key1, [key2], [...])</h3>\n<p>Asserts that the target contains any or all of the passed-in keys.<br />Use in combination with <code>any</code>, <code>all</code>, <code>contains</code>, or <code>have</code> will affect<br />what will pass.</p><p>When used in conjunction with <code>any</code>, at least one key that is passed<br />in must exist in the target object. This is regardless whether or not<br />the <code>have</code> or <code>contain</code> qualifiers are used. Note, either <code>any</code> or <code>all</code><br />should be used in the assertion. If neither are used, the assertion is<br />defaulted to <code>all</code>.</p><p>When both <code>all</code> and <code>contain</code> are used, the target object must have at<br />least all of the passed-in keys but may have more keys not listed.</p><p>When both <code>all</code> and <code>have</code> are used, the target object must both contain<br />all of the passed-in keys AND the number of keys in the target object must<br />match the number of keys passed in (in other words, a target object must<br />have all and only all of the passed-in keys).</p><pre><code>expect({ foo: 1, bar: 2 }).to.have.any.keys(&#39;foo&#39;, &#39;baz&#39;);\nexpect({ foo: 1, bar: 2 }).to.have.any.keys(&#39;foo&#39;);\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys(&#39;bar&#39;, &#39;baz&#39;);\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys([&#39;foo&#39;]);\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys({&#39;foo&#39;: 6});\nexpect({ foo: 1, bar: 2 }).to.have.all.keys([&#39;bar&#39;, &#39;foo&#39;]);\nexpect({ foo: 1, bar: 2 }).to.have.all.keys({&#39;bar&#39;: 6, &#39;foo&#39;: 7});\nexpect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys([&#39;bar&#39;, &#39;foo&#39;]);\nexpect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({&#39;bar&#39;: 6});\n</code></pre>",
      "summary": "<h3>.keys(key1, [key2], [...])</h3>\n",
      "body": "<p>Asserts that the target contains any or all of the passed-in keys.<br />Use in combination with <code>any</code>, <code>all</code>, <code>contains</code>, or <code>have</code> will affect<br />what will pass.</p><p>When used in conjunction with <code>any</code>, at least one key that is passed<br />in must exist in the target object. This is regardless whether or not<br />the <code>have</code> or <code>contain</code> qualifiers are used. Note, either <code>any</code> or <code>all</code><br />should be used in the assertion. If neither are used, the assertion is<br />defaulted to <code>all</code>.</p><p>When both <code>all</code> and <code>contain</code> are used, the target object must have at<br />least all of the passed-in keys but may have more keys not listed.</p><p>When both <code>all</code> and <code>have</code> are used, the target object must both contain<br />all of the passed-in keys AND the number of keys in the target object must<br />match the number of keys passed in (in other words, a target object must<br />have all and only all of the passed-in keys).</p><pre><code>expect({ foo: 1, bar: 2 }).to.have.any.keys(&#39;foo&#39;, &#39;baz&#39;);\nexpect({ foo: 1, bar: 2 }).to.have.any.keys(&#39;foo&#39;);\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys(&#39;bar&#39;, &#39;baz&#39;);\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys([&#39;foo&#39;]);\nexpect({ foo: 1, bar: 2 }).to.contain.any.keys({&#39;foo&#39;: 6});\nexpect({ foo: 1, bar: 2 }).to.have.all.keys([&#39;bar&#39;, &#39;foo&#39;]);\nexpect({ foo: 1, bar: 2 }).to.have.all.keys({&#39;bar&#39;: 6, &#39;foo&#39;: 7});\nexpect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys([&#39;bar&#39;, &#39;foo&#39;]);\nexpect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({&#39;bar&#39;: 6});\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1400,
    "codeStart": 1439,
    "code": "function assertKeys (keys) {\n  var obj = flag(this, 'object')\n    , str\n    , ok = true\n    , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';\n\n  switch (_.type(keys)) {\n    case \"array\":\n      if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n      break;\n    case \"object\":\n      if (arguments.length > 1) throw (new Error(mixedArgsMsg));\n      keys = Object.keys(keys);\n      break;\n    default:\n      keys = Array.prototype.slice.call(arguments);\n  }\n\n  if (!keys.length) throw new Error('keys required');\n\n  var actual = Object.keys(obj)\n    , expected = keys\n    , len = keys.length\n    , any = flag(this, 'any')\n    , all = flag(this, 'all');\n\n  if (!any && !all) {\n    all = true;\n  }\n\n  // Has any\n  if (any) {\n    var intersection = expected.filter(function(key) {\n      return ~actual.indexOf(key);\n    });\n    ok = intersection.length > 0;\n  }\n\n  // Has all\n  if (all) {\n    ok = keys.every(function(key){\n      return ~actual.indexOf(key);\n    });\n    if (!flag(this, 'negate') && !flag(this, 'contains')) {\n      ok = ok && keys.length == actual.length;\n    }\n  }\n\n  // Key string\n  if (len > 1) {\n    keys = keys.map(function(key){\n      return _.inspect(key);\n    });\n    var last = keys.pop();\n    if (all) {\n      str = keys.join(', ') + ', and ' + last;\n    }\n    if (any) {\n      str = keys.join(', ') + ', or ' + last;\n    }\n  } else {\n    str = _.inspect(keys[0]);\n  }\n\n  // Form\n  str = (len > 1 ? 'keys ' : 'key ') + str;\n\n  // Have / include\n  str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n  // Assertion\n  this.assert(\n      ok\n    , 'expected #{this} to ' + str\n    , 'expected #{this} to not ' + str\n    , expected.slice(0).sort()\n    , actual.sort()\n    , true\n  );\n}\n\nAssertion.addMethod('keys', assertKeys);\nAssertion.addMethod('key', assertKeys);",
    "ctx": {
      "type": "function",
      "name": "assertKeys",
      "string": "assertKeys()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "throw",
        "html": "<p>throw</p>"
      },
      {
        "type": "alias",
        "string": "throws",
        "html": "<p>throws</p>"
      },
      {
        "type": "alias",
        "string": "Throw",
        "html": "<p>Throw</p>"
      },
      {
        "type": "param",
        "string": "{ErrorConstructor} constructor",
        "name": "constructor",
        "description": "",
        "types": [
          "ErrorConstructor"
        ],
        "typesDescription": "<a href=\"ErrorConstructor.html\">ErrorConstructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ErrorConstructor} constructor</p>"
      },
      {
        "type": "param",
        "string": "{String|RegExp} expected error message",
        "name": "expected",
        "description": "<p>error message</p>",
        "types": [
          "String",
          "RegExp"
        ],
        "typesDescription": "<code>String</code>|<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "see",
        "string": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "title": "",
        "url": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "html": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types</a></p>"
      },
      {
        "type": "returns",
        "string": "error for chaining (null if no error)",
        "types": [],
        "typesDescription": "",
        "variable": false,
        "nonNullable": false,
        "nullable": false,
        "optional": false,
        "description": "<p>error for chaining (null if no error)</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.throw(constructor)</h3>\n<p>Asserts that the function target will throw a specific error, or specific type of error<br />(as determined using <code>instanceof</code>), optionally with a RegExp or string inclusion test<br />for the error&#39;s message.</p><pre><code>var err = new ReferenceError(&#39;This is a bad function.&#39;);\nvar fn = function () { throw err; }\nexpect(fn).to.throw(ReferenceError);\nexpect(fn).to.throw(Error);\nexpect(fn).to.throw(/bad function/);\nexpect(fn).to.not.throw(&#39;good function&#39;);\nexpect(fn).to.throw(ReferenceError, /bad function/);\nexpect(fn).to.throw(err);\n</code></pre><p>Please note that when a throw expectation is negated, it will check each<br />parameter independently, starting with error constructor type. The appropriate way<br />to check for the existence of a type of error but for a message that does not match<br />is to use <code>and</code>.</p><pre><code>expect(fn).to.throw(ReferenceError)\n   .and.not.throw(/good function/);\n</code></pre>",
      "summary": "<h3>.throw(constructor)</h3>\n",
      "body": "<p>Asserts that the function target will throw a specific error, or specific type of error<br />(as determined using <code>instanceof</code>), optionally with a RegExp or string inclusion test<br />for the error&#39;s message.</p><pre><code>var err = new ReferenceError(&#39;This is a bad function.&#39;);\nvar fn = function () { throw err; }\nexpect(fn).to.throw(ReferenceError);\nexpect(fn).to.throw(Error);\nexpect(fn).to.throw(/bad function/);\nexpect(fn).to.not.throw(&#39;good function&#39;);\nexpect(fn).to.throw(ReferenceError, /bad function/);\nexpect(fn).to.throw(err);\n</code></pre><p>Please note that when a throw expectation is negated, it will check each<br />parameter independently, starting with error constructor type. The appropriate way<br />to check for the existence of a type of error but for a message that does not match<br />is to use <code>and</code>.</p><pre><code>expect(fn).to.throw(ReferenceError)\n   .and.not.throw(/good function/);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1523,
    "codeStart": 1559,
    "code": "function assertThrows (constructor, errMsg, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  new Assertion(obj, msg).is.a('function');\n\n  var thrown = false\n    , desiredError = null\n    , name = null\n    , thrownError = null;\n\n  if (arguments.length === 0) {\n    errMsg = null;\n    constructor = null;\n  } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {\n    errMsg = constructor;\n    constructor = null;\n  } else if (constructor && constructor instanceof Error) {\n    desiredError = constructor;\n    constructor = null;\n    errMsg = null;\n  } else if (typeof constructor === 'function') {\n    name = constructor.prototype.name;\n    if (!name || (name === 'Error' && constructor !== Error)) {\n      name = constructor.name || (new constructor()).name;\n    }\n  } else {\n    constructor = null;\n  }\n\n  try {\n    obj();\n  } catch (err) {\n    // first, check desired error\n    if (desiredError) {\n      this.assert(\n          err === desiredError\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}'\n        , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n        , (err instanceof Error ? err.toString() : err)\n      );\n\n      flag(this, 'object', err);\n      return this;\n    }\n\n    // next, check constructor\n    if (constructor) {\n      this.assert(\n          err instanceof constructor\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp} but #{act} was thrown'\n        , name\n        , (err instanceof Error ? err.toString() : err)\n      );\n\n      if (!errMsg) {\n        flag(this, 'object', err);\n        return this;\n      }\n    }\n\n    // next, check message\n    var message = 'error' === _.type(err) && \"message\" in err\n      ? err.message\n      : '' + err;\n\n    if ((message != null) && errMsg && errMsg instanceof RegExp) {\n      this.assert(\n          errMsg.exec(message)\n        , 'expected #{this} to throw error matching #{exp} but got #{act}'\n        , 'expected #{this} to throw error not matching #{exp}'\n        , errMsg\n        , message\n      );\n\n      flag(this, 'object', err);\n      return this;\n    } else if ((message != null) && errMsg && 'string' === typeof errMsg) {\n      this.assert(\n          ~message.indexOf(errMsg)\n        , 'expected #{this} to throw error including #{exp} but got #{act}'\n        , 'expected #{this} to throw error not including #{act}'\n        , errMsg\n        , message\n      );\n\n      flag(this, 'object', err);\n      return this;\n    } else {\n      thrown = true;\n      thrownError = err;\n    }\n  }\n\n  var actuallyGot = ''\n    , expectedThrown = name !== null\n      ? name\n      : desiredError\n        ? '#{exp}' //_.inspect(desiredError)\n        : 'an error';\n\n  if (thrown) {\n    actuallyGot = ' but #{act} was thrown'\n  }\n\n  this.assert(\n      thrown === true\n    , 'expected #{this} to throw ' + expectedThrown + actuallyGot\n    , 'expected #{this} to not throw ' + expectedThrown + actuallyGot\n    , (desiredError instanceof Error ? desiredError.toString() : desiredError)\n    , (thrownError instanceof Error ? thrownError.toString() : thrownError)\n  );\n\n  flag(this, 'object', thrownError);\n};\n\nAssertion.addMethod('throw', assertThrows);\nAssertion.addMethod('throws', assertThrows);\nAssertion.addMethod('Throw', assertThrows);",
    "ctx": {
      "type": "function",
      "name": "assertThrows",
      "string": "assertThrows()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "respondTo",
        "html": "<p>respondTo</p>"
      },
      {
        "type": "alias",
        "string": "respondsTo",
        "html": "<p>respondsTo</p>"
      },
      {
        "type": "param",
        "string": "{String} method",
        "name": "method",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} method</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.respondTo(method)</h3>\n<p>Asserts that the object or class target will respond to a method.</p><pre><code>Klass.prototype.bar = function(){};\nexpect(Klass).to.respondTo(&#39;bar&#39;);\nexpect(obj).to.respondTo(&#39;bar&#39;);\n</code></pre><p>To check if a constructor will respond to a static function,<br />set the <code>itself</code> flag.</p><pre><code>Klass.baz = function(){};\nexpect(Klass).itself.to.respondTo(&#39;baz&#39;);\n</code></pre>",
      "summary": "<h3>.respondTo(method)</h3>\n",
      "body": "<p>Asserts that the object or class target will respond to a method.</p><pre><code>Klass.prototype.bar = function(){};\nexpect(Klass).to.respondTo(&#39;bar&#39;);\nexpect(obj).to.respondTo(&#39;bar&#39;);\n</code></pre><p>To check if a constructor will respond to a static function,<br />set the <code>itself</code> flag.</p><pre><code>Klass.baz = function(){};\nexpect(Klass).itself.to.respondTo(&#39;baz&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1680,
    "codeStart": 1703,
    "code": "function respondTo (method, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object')\n    , itself = flag(this, 'itself')\n    , context = ('function' === _.type(obj) && !itself)\n      ? obj.prototype[method]\n      : obj[method];\n\n  this.assert(\n      'function' === typeof context\n    , 'expected #{this} to respond to ' + _.inspect(method)\n    , 'expected #{this} to not respond to ' + _.inspect(method)\n  );\n}\n\nAssertion.addMethod('respondTo', respondTo);\nAssertion.addMethod('respondsTo', respondTo);",
    "ctx": {
      "type": "function",
      "name": "respondTo",
      "string": "respondTo()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "itself",
        "html": "<p>itself</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.itself</h3>\n<p>Sets the <code>itself</code> flag, later used by the <code>respondTo</code> assertion.</p><pre><code>function Foo() {}\nFoo.bar = function() {}\nFoo.prototype.baz = function() {}\n\nexpect(Foo).itself.to.respondTo(&#39;bar&#39;);\nexpect(Foo).itself.not.to.respondTo(&#39;baz&#39;);\n</code></pre>",
      "summary": "<h3>.itself</h3>\n",
      "body": "<p>Sets the <code>itself</code> flag, later used by the <code>respondTo</code> assertion.</p><pre><code>function Foo() {}\nFoo.bar = function() {}\nFoo.prototype.baz = function() {}\n\nexpect(Foo).itself.to.respondTo(&#39;bar&#39;);\nexpect(Foo).itself.not.to.respondTo(&#39;baz&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1721,
    "codeStart": 1738,
    "code": "Assertion.addProperty('itself', function () {\n  flag(this, 'itself', true);\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "satisfy",
        "html": "<p>satisfy</p>"
      },
      {
        "type": "alias",
        "string": "satisfies",
        "html": "<p>satisfies</p>"
      },
      {
        "type": "param",
        "string": "{Function} matcher",
        "name": "matcher",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} matcher</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.satisfy(method)</h3>\n<p>Asserts that the target passes a given truth test.</p><pre><code>expect(1).to.satisfy(function(num) { return num &gt; 0; });\n</code></pre>",
      "summary": "<h3>.satisfy(method)</h3>\n",
      "body": "<p>Asserts that the target passes a given truth test.</p><pre><code>expect(1).to.satisfy(function(num) { return num &gt; 0; });\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1742,
    "codeStart": 1757,
    "code": "function satisfy (matcher, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n  var result = matcher(obj);\n  this.assert(\n      result\n    , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n    , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n    , this.negate ? false : true\n    , result\n  );\n}\n\nAssertion.addMethod('satisfy', satisfy);\nAssertion.addMethod('satisfies', satisfy);",
    "ctx": {
      "type": "function",
      "name": "satisfy",
      "string": "satisfy()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "closeTo",
        "html": "<p>closeTo</p>"
      },
      {
        "type": "alias",
        "string": "approximately",
        "html": "<p>approximately</p>"
      },
      {
        "type": "param",
        "string": "{Number} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} expected</p>"
      },
      {
        "type": "param",
        "string": "{Number} delta",
        "name": "delta",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} delta</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.closeTo(expected, delta)</h3>\n<p>Asserts that the target is equal <code>expected</code>, to within a +/- <code>delta</code> range.</p><pre><code>expect(1.5).to.be.closeTo(1, 0.5);\n</code></pre>",
      "summary": "<h3>.closeTo(expected, delta)</h3>\n",
      "body": "<p>Asserts that the target is equal <code>expected</code>, to within a +/- <code>delta</code> range.</p><pre><code>expect(1.5).to.be.closeTo(1, 0.5);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1773,
    "codeStart": 1789,
    "code": "function closeTo(expected, delta, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n\n  new Assertion(obj, msg).is.a('number');\n  if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {\n    throw new Error('the arguments to closeTo or approximately must be numbers');\n  }\n\n  this.assert(\n      Math.abs(obj - expected) <= delta\n    , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n    , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n  );\n}\n\nAssertion.addMethod('closeTo', closeTo);\nAssertion.addMethod('approximately', closeTo);\n\nfunction isSubsetOf(subset, superset, cmp) {\n  return subset.every(function(elem) {\n    if (!cmp) return superset.indexOf(elem) !== -1;\n\n    return superset.some(function(elem2) {\n      return cmp(elem, elem2);\n    });\n  })\n}",
    "ctx": {
      "type": "function",
      "name": "closeTo",
      "string": "closeTo()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "members",
        "html": "<p>members</p>"
      },
      {
        "type": "param",
        "string": "{Array} set",
        "name": "set",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} set</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.members(set)</h3>\n<p>Asserts that the target is a superset of <code>set</code>,<br />or that the target and <code>set</code> have the same strictly-equal (===) members.<br />Alternately, if the <code>deep</code> flag is set, set members are compared for deep<br />equality.</p><pre><code>expect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);\n\nexpect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n</code></pre>",
      "summary": "<h3>.members(set)</h3>\n",
      "body": "<p>Asserts that the target is a superset of <code>set</code>,<br />or that the target and <code>set</code> have the same strictly-equal (===) members.<br />Alternately, if the <code>deep</code> flag is set, set members are compared for deep<br />equality.</p><pre><code>expect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\n\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);\n\nexpect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1818,
    "codeStart": 1841,
    "code": "Assertion.addMethod('members', function (subset, msg) {\n  if (msg) flag(this, 'message', msg);\n  var obj = flag(this, 'object');\n\n  new Assertion(obj).to.be.an('array');\n  new Assertion(subset).to.be.an('array');\n\n  var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n  if (flag(this, 'contains')) {\n    return this.assert(\n        isSubsetOf(subset, obj, cmp)\n      , 'expected #{this} to be a superset of #{act}'\n      , 'expected #{this} to not be a superset of #{act}'\n      , obj\n      , subset\n    );\n  }\n\n  this.assert(\n      isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)\n      , 'expected #{this} to have the same members as #{act}'\n      , 'expected #{this} to not have the same members as #{act}'\n      , obj\n      , subset\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "oneOf",
        "html": "<p>oneOf</p>"
      },
      {
        "type": "param",
        "string": "{Array<*>} list",
        "name": "list",
        "description": "",
        "types": [
          "Array.<*>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>*</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array&lt;*&gt;} list</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.oneOf(list)</h3>\n<p>Assert that a value appears somewhere in the top level of array <code>list</code>.</p><pre><code>expect(&#39;a&#39;).to.be.oneOf([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]);\nexpect(9).to.not.be.oneOf([&#39;z&#39;]);\nexpect([3]).to.not.be.oneOf([1, 2, [3]]);\n\nvar three = [3];\n// for object-types, contents are not compared\nexpect(three).to.not.be.oneOf([1, 2, [3]]);\n// comparing references works\nexpect(three).to.be.oneOf([1, 2, three]);\n</code></pre>",
      "summary": "<h3>.oneOf(list)</h3>\n",
      "body": "<p>Assert that a value appears somewhere in the top level of array <code>list</code>.</p><pre><code>expect(&#39;a&#39;).to.be.oneOf([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]);\nexpect(9).to.not.be.oneOf([&#39;z&#39;]);\nexpect([3]).to.not.be.oneOf([1, 2, [3]]);\n\nvar three = [3];\n// for object-types, contents are not compared\nexpect(three).to.not.be.oneOf([1, 2, [3]]);\n// comparing references works\nexpect(three).to.be.oneOf([1, 2, three]);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1869,
    "codeStart": 1891,
    "code": "function oneOf (list, msg) {\n  if (msg) flag(this, 'message', msg);\n  var expected = flag(this, 'object');\n  new Assertion(list).to.be.an('array');\n\n  this.assert(\n      list.indexOf(expected) > -1\n    , 'expected #{this} to be one of #{exp}'\n    , 'expected #{this} to not be one of #{exp}'\n    , list\n    , expected\n  );\n}\n\nAssertion.addMethod('oneOf', oneOf);",
    "ctx": {
      "type": "function",
      "name": "oneOf",
      "string": "oneOf()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "change",
        "html": "<p>change</p>"
      },
      {
        "type": "alias",
        "string": "changes",
        "html": "<p>changes</p>"
      },
      {
        "type": "alias",
        "string": "Change",
        "html": "<p>Change</p>"
      },
      {
        "type": "param",
        "string": "{String} object",
        "name": "object",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.change(function)</h3>\n<p>Asserts that a function changes an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val += 3 };\nvar noChangeFn = function() { return &#39;foo&#39; + &#39;bar&#39;; }\nexpect(fn).to.change(obj, &#39;val&#39;);\nexpect(noChangeFn).to.not.change(obj, &#39;val&#39;)\n</code></pre>",
      "summary": "<h3>.change(function)</h3>\n",
      "body": "<p>Asserts that a function changes an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val += 3 };\nvar noChangeFn = function() { return &#39;foo&#39; + &#39;bar&#39;; }\nexpect(fn).to.change(obj, &#39;val&#39;);\nexpect(noChangeFn).to.not.change(obj, &#39;val&#39;)\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1908,
    "codeStart": 1929,
    "code": "function assertChanges (object, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  var fn = flag(this, 'object');\n  new Assertion(object, msg).to.have.property(prop);\n  new Assertion(fn).is.a('function');\n\n  var initial = object[prop];\n  fn();\n\n  this.assert(\n    initial !== object[prop]\n    , 'expected .' + prop + ' to change'\n    , 'expected .' + prop + ' to not change'\n  );\n}\n\nAssertion.addChainableMethod('change', assertChanges);\nAssertion.addChainableMethod('changes', assertChanges);",
    "ctx": {
      "type": "function",
      "name": "assertChanges",
      "string": "assertChanges()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "increase",
        "html": "<p>increase</p>"
      },
      {
        "type": "alias",
        "string": "increases",
        "html": "<p>increases</p>"
      },
      {
        "type": "alias",
        "string": "Increase",
        "html": "<p>Increase</p>"
      },
      {
        "type": "param",
        "string": "{String} object",
        "name": "object",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.increase(function)</h3>\n<p>Asserts that a function increases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 15 };\nexpect(fn).to.increase(obj, &#39;val&#39;);\n</code></pre>",
      "summary": "<h3>.increase(function)</h3>\n",
      "body": "<p>Asserts that a function increases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 15 };\nexpect(fn).to.increase(obj, &#39;val&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1948,
    "codeStart": 1967,
    "code": "function assertIncreases (object, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  var fn = flag(this, 'object');\n  new Assertion(object, msg).to.have.property(prop);\n  new Assertion(fn).is.a('function');\n\n  var initial = object[prop];\n  fn();\n\n  this.assert(\n    object[prop] - initial > 0\n    , 'expected .' + prop + ' to increase'\n    , 'expected .' + prop + ' to not increase'\n  );\n}\n\nAssertion.addChainableMethod('increase', assertIncreases);\nAssertion.addChainableMethod('increases', assertIncreases);",
    "ctx": {
      "type": "function",
      "name": "assertIncreases",
      "string": "assertIncreases()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "decrease",
        "html": "<p>decrease</p>"
      },
      {
        "type": "alias",
        "string": "decreases",
        "html": "<p>decreases</p>"
      },
      {
        "type": "alias",
        "string": "Decrease",
        "html": "<p>Decrease</p>"
      },
      {
        "type": "param",
        "string": "{String} object",
        "name": "object",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.decrease(function)</h3>\n<p>Asserts that a function decreases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 5 };\nexpect(fn).to.decrease(obj, &#39;val&#39;);\n</code></pre>",
      "summary": "<h3>.decrease(function)</h3>\n",
      "body": "<p>Asserts that a function decreases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 5 };\nexpect(fn).to.decrease(obj, &#39;val&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 1986,
    "codeStart": 2005,
    "code": "function assertDecreases (object, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  var fn = flag(this, 'object');\n  new Assertion(object, msg).to.have.property(prop);\n  new Assertion(fn).is.a('function');\n\n  var initial = object[prop];\n  fn();\n\n  this.assert(\n    object[prop] - initial < 0\n    , 'expected .' + prop + ' to decrease'\n    , 'expected .' + prop + ' to not decrease'\n  );\n}\n\nAssertion.addChainableMethod('decrease', assertDecreases);\nAssertion.addChainableMethod('decreases', assertDecreases);",
    "ctx": {
      "type": "function",
      "name": "assertDecreases",
      "string": "assertDecreases()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "extensible",
        "html": "<p>extensible</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.extensible</h3>\n<p>Asserts that the target is extensible (can have new properties added to<br />it).</p><pre><code>var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\n\nexpect({}).to.be.extensible;\nexpect(nonExtensibleObject).to.not.be.extensible;\nexpect(sealedObject).to.not.be.extensible;\nexpect(frozenObject).to.not.be.extensible;\n</code></pre>",
      "summary": "<h3>.extensible</h3>\n",
      "body": "<p>Asserts that the target is extensible (can have new properties added to<br />it).</p><pre><code>var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\n\nexpect({}).to.be.extensible;\nexpect(nonExtensibleObject).to.not.be.extensible;\nexpect(sealedObject).to.not.be.extensible;\nexpect(frozenObject).to.not.be.extensible;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2024,
    "codeStart": 2044,
    "code": "Assertion.addProperty('extensible', function() {\n  var obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n  // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n  var isExtensible;\n\n  try {\n    isExtensible = Object.isExtensible(obj);\n  } catch (err) {\n    if (err instanceof TypeError) isExtensible = false;\n    else throw err;\n  }\n\n  this.assert(\n    isExtensible\n    , 'expected #{this} to be extensible'\n    , 'expected #{this} to not be extensible'\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "sealed",
        "html": "<p>sealed</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.sealed</h3>\n<p>Asserts that the target is sealed (cannot have new properties added to it<br />and its existing properties cannot be removed).</p><pre><code>var sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\n\nexpect(sealedObject).to.be.sealed;\nexpect(frozenObject).to.be.sealed;\nexpect({}).to.not.be.sealed;\n</code></pre>",
      "summary": "<h3>.sealed</h3>\n",
      "body": "<p>Asserts that the target is sealed (cannot have new properties added to it<br />and its existing properties cannot be removed).</p><pre><code>var sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\n\nexpect(sealedObject).to.be.sealed;\nexpect(frozenObject).to.be.sealed;\nexpect({}).to.not.be.sealed;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2068,
    "codeStart": 2086,
    "code": "Assertion.addProperty('sealed', function() {\n  var obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n  // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n  var isSealed;\n\n  try {\n    isSealed = Object.isSealed(obj);\n  } catch (err) {\n    if (err instanceof TypeError) isSealed = true;\n    else throw err;\n  }\n\n  this.assert(\n    isSealed\n    , 'expected #{this} to be sealed'\n    , 'expected #{this} to not be sealed'\n  );\n});",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "frozen",
        "html": "<p>frozen</p>"
      },
      {
        "type": "namespace",
        "string": "BDD",
        "html": "<p>BDD</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.frozen</h3>\n<p>Asserts that the target is frozen (cannot have new properties added to it<br />and its existing properties cannot be modified).</p><pre><code>var frozenObject = Object.freeze({});\n\nexpect(frozenObject).to.be.frozen;\nexpect({}).to.not.be.frozen;\n</code></pre>",
      "summary": "<h3>.frozen</h3>\n",
      "body": "<p>Asserts that the target is frozen (cannot have new properties added to it<br />and its existing properties cannot be modified).</p><pre><code>var frozenObject = Object.freeze({});\n\nexpect(frozenObject).to.be.frozen;\nexpect({}).to.not.be.frozen;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2110,
    "codeStart": 2126,
    "code": "Assertion.addProperty('frozen', function() {\n  var obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n  // The following provides ES6 behavior when a TypeError is thrown under ES5.\n\n  var isFrozen;\n\n  try {\n    isFrozen = Object.isFrozen(obj);\n  } catch (err) {\n    if (err instanceof TypeError) isFrozen = true;\n    else throw err;\n  }\n\n  this.assert(\n    isFrozen\n    , 'expected #{this} to be frozen'\n    , 'expected #{this} to not be frozen'\n  );\n});\n};\n\n},{}],6:[function(require,module,exports){",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>chai<br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#x3a;&#106;&#97;&#x6b;&#101;&#x40;&#97;&#x6c;&#111;&#103;&#x69;&#99;&#x61;&#x6c;&#x70;&#97;&#x72;&#97;&#x64;&#x6f;&#x78;&#x2e;&#x63;&#111;&#x6d;\">&#106;&#97;&#x6b;&#101;&#x40;&#97;&#x6c;&#111;&#103;&#x69;&#99;&#x61;&#x6c;&#x70;&#97;&#x72;&#97;&#x64;&#x6f;&#x78;&#x2e;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>chai<br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#106;&#x61;&#107;&#x65;&#64;&#97;&#x6c;&#x6f;&#x67;&#105;&#99;&#x61;&#x6c;&#x70;&#97;&#x72;&#97;&#x64;&#x6f;&#120;&#46;&#99;&#111;&#x6d;\">&#106;&#x61;&#107;&#x65;&#64;&#97;&#x6c;&#x6f;&#x67;&#105;&#99;&#x61;&#x6c;&#x70;&#97;&#x72;&#97;&#x64;&#x6f;&#120;&#46;&#99;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 2152,
    "codeStart": 2159,
    "code": "module.exports = function (chai, util) {",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai dependencies.</p>",
      "summary": "<p>Chai dependencies.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 2161,
    "codeStart": 2165,
    "code": "var Assertion = chai.Assertion\n  , flag = util.flag;",
    "ctx": {
      "type": "declaration",
      "name": "Assertion",
      "value": "chai.Assertion",
      "string": "Assertion"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Module export.</p>",
      "summary": "<p>Module export.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 2168,
    "codeStart": 2171
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} expression to test for truthiness",
        "name": "expression",
        "description": "<p>to test for truthiness</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message to display on error",
        "name": "message",
        "description": "<p>to display on error</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "name",
        "string": "assert",
        "html": "<p>assert</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>assert(expression, message)</h3>\n<p>Write your own test expressions.</p><pre><code>assert(&#39;foo&#39; !== &#39;bar&#39;, &#39;foo is not bar&#39;);\nassert(Array.isArray([]), &#39;empty arrays are arrays&#39;);\n</code></pre>",
      "summary": "<h3>assert(expression, message)</h3>\n",
      "body": "<p>Write your own test expressions.</p><pre><code>assert(&#39;foo&#39; !== &#39;bar&#39;, &#39;foo is not bar&#39;);\nassert(Array.isArray([]), &#39;empty arrays are arrays&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2172,
    "codeStart": 2187,
    "code": "var assert = chai.assert = function (express, errmsg) {\n  var test = new Assertion(null, null, chai.assert);\n  test.assert(\n      express\n    , errmsg\n    , '[ negation message unavailable ]'\n  );\n};",
    "ctx": {
      "type": "declaration",
      "name": "assert",
      "value": "chai.assert = function (express, errmsg) {",
      "string": "assert"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "fail",
        "html": "<p>fail</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "param",
        "string": "{String} operator",
        "name": "operator",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} operator</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.fail(actual, expected, [message], [operator])</h3>\n<p>Throw a failure. Node.js <code>assert</code> module-compatible.</p>",
      "summary": "<h3>.fail(actual, expected, [message], [operator])</h3>\n",
      "body": "<p>Throw a failure. Node.js <code>assert</code> module-compatible.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2196,
    "codeStart": 2210,
    "code": "assert.fail = function (actual, expected, message, operator) {\n  message = message || 'assert.fail()';\n  throw new chai.AssertionError(message, {\n      actual: actual\n    , expected: expected\n    , operator: operator\n  }, assert.fail);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "fail",
      "string": "assert.fail()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isOk",
        "html": "<p>isOk</p>"
      },
      {
        "type": "alias",
        "string": "ok",
        "html": "<p>ok</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} object to test",
        "name": "object",
        "description": "<p>to test</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isOk(object, [message])</h3>\n<p>Asserts that <code>object</code> is truthy.</p><pre><code>assert.isOk(&#39;everything&#39;, &#39;everything is ok&#39;);\nassert.isOk(false, &#39;this will fail&#39;);\n</code></pre>",
      "summary": "<h3>.isOk(object, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> is truthy.</p><pre><code>assert.isOk(&#39;everything&#39;, &#39;everything is ok&#39;);\nassert.isOk(false, &#39;this will fail&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2219,
    "codeStart": 2235,
    "code": "assert.isOk = function (val, msg) {\n  new Assertion(val, msg).is.ok;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isOk",
      "string": "assert.isOk()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotOk",
        "html": "<p>isNotOk</p>"
      },
      {
        "type": "alias",
        "string": "notOk",
        "html": "<p>notOk</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} object to test",
        "name": "object",
        "description": "<p>to test</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotOk(object, [message])</h3>\n<p>Asserts that <code>object</code> is falsy.</p><pre><code>assert.isNotOk(&#39;everything&#39;, &#39;this will fail&#39;);\nassert.isNotOk(false, &#39;this will pass&#39;);\n</code></pre>",
      "summary": "<h3>.isNotOk(object, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> is falsy.</p><pre><code>assert.isNotOk(&#39;everything&#39;, &#39;this will fail&#39;);\nassert.isNotOk(false, &#39;this will pass&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2239,
    "codeStart": 2255,
    "code": "assert.isNotOk = function (val, msg) {\n  new Assertion(val, msg).is.not.ok;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotOk",
      "string": "assert.isNotOk()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "equal",
        "html": "<p>equal</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.equal(actual, expected, [message])</h3>\n<p>Asserts non-strict equality (<code>==</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>assert.equal(3, &#39;3&#39;, &#39;== coerces values to strings&#39;);\n</code></pre>",
      "summary": "<h3>.equal(actual, expected, [message])</h3>\n",
      "body": "<p>Asserts non-strict equality (<code>==</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>assert.equal(3, &#39;3&#39;, &#39;== coerces values to strings&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2259,
    "codeStart": 2274,
    "code": "assert.equal = function (act, exp, msg) {\n  var test = new Assertion(act, msg, assert.equal);\n\n  test.assert(\n      exp == flag(test, 'object')\n    , 'expected #{this} to equal #{exp}'\n    , 'expected #{this} to not equal #{act}'\n    , exp\n    , act\n  );\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "equal",
      "string": "assert.equal()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notEqual",
        "html": "<p>notEqual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notEqual(actual, expected, [message])</h3>\n<p>Asserts non-strict inequality (<code>!=</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>assert.notEqual(3, 4, &#39;these numbers are not equal&#39;);\n</code></pre>",
      "summary": "<h3>.notEqual(actual, expected, [message])</h3>\n",
      "body": "<p>Asserts non-strict inequality (<code>!=</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>assert.notEqual(3, 4, &#39;these numbers are not equal&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2286,
    "codeStart": 2301,
    "code": "assert.notEqual = function (act, exp, msg) {\n  var test = new Assertion(act, msg, assert.notEqual);\n\n  test.assert(\n      exp != flag(test, 'object')\n    , 'expected #{this} to not equal #{exp}'\n    , 'expected #{this} to equal #{act}'\n    , exp\n    , act\n  );\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notEqual",
      "string": "assert.notEqual()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "strictEqual",
        "html": "<p>strictEqual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.strictEqual(actual, expected, [message])</h3>\n<p>Asserts strict equality (<code>===</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>assert.strictEqual(true, true, &#39;these booleans are strictly equal&#39;);\n</code></pre>",
      "summary": "<h3>.strictEqual(actual, expected, [message])</h3>\n",
      "body": "<p>Asserts strict equality (<code>===</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>assert.strictEqual(true, true, &#39;these booleans are strictly equal&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2313,
    "codeStart": 2328,
    "code": "assert.strictEqual = function (act, exp, msg) {\n  new Assertion(act, msg).to.equal(exp);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "strictEqual",
      "string": "assert.strictEqual()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notStrictEqual",
        "html": "<p>notStrictEqual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notStrictEqual(actual, expected, [message])</h3>\n<p>Asserts strict inequality (<code>!==</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>assert.notStrictEqual(3, &#39;3&#39;, &#39;no coercion for strict equality&#39;);\n</code></pre>",
      "summary": "<h3>.notStrictEqual(actual, expected, [message])</h3>\n",
      "body": "<p>Asserts strict inequality (<code>!==</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>assert.notStrictEqual(3, &#39;3&#39;, &#39;no coercion for strict equality&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2332,
    "codeStart": 2347,
    "code": "assert.notStrictEqual = function (act, exp, msg) {\n  new Assertion(act, msg).to.not.equal(exp);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notStrictEqual",
      "string": "assert.notStrictEqual()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "deepEqual",
        "html": "<p>deepEqual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.deepEqual(actual, expected, [message])</h3>\n<p>Asserts that <code>actual</code> is deeply equal to <code>expected</code>.</p><pre><code>assert.deepEqual({ tea: &#39;green&#39; }, { tea: &#39;green&#39; });\n</code></pre>",
      "summary": "<h3>.deepEqual(actual, expected, [message])</h3>\n",
      "body": "<p>Asserts that <code>actual</code> is deeply equal to <code>expected</code>.</p><pre><code>assert.deepEqual({ tea: &#39;green&#39; }, { tea: &#39;green&#39; });\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2351,
    "codeStart": 2366,
    "code": "assert.deepEqual = function (act, exp, msg) {\n  new Assertion(act, msg).to.eql(exp);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "deepEqual",
      "string": "assert.deepEqual()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notDeepEqual",
        "html": "<p>notDeepEqual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notDeepEqual(actual, expected, [message])</h3>\n<p>Assert that <code>actual</code> is not deeply equal to <code>expected</code>.</p><pre><code>assert.notDeepEqual({ tea: &#39;green&#39; }, { tea: &#39;jasmine&#39; });\n</code></pre>",
      "summary": "<h3>.notDeepEqual(actual, expected, [message])</h3>\n",
      "body": "<p>Assert that <code>actual</code> is not deeply equal to <code>expected</code>.</p><pre><code>assert.notDeepEqual({ tea: &#39;green&#39; }, { tea: &#39;jasmine&#39; });\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2370,
    "codeStart": 2385,
    "code": "assert.notDeepEqual = function (act, exp, msg) {\n  new Assertion(act, msg).to.not.eql(exp);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notDeepEqual",
      "string": "assert.notDeepEqual()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isAbove",
        "html": "<p>isAbove</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} valueToCheck",
        "name": "valueToCheck",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} valueToCheck</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} valueToBeAbove",
        "name": "valueToBeAbove",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} valueToBeAbove</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isAbove(valueToCheck, valueToBeAbove, [message])</h3>\n<p>Asserts <code>valueToCheck</code> is strictly greater than (&gt;) <code>valueToBeAbove</code></p><pre><code>assert.isAbove(5, 2, &#39;5 is strictly greater than 2&#39;);\n</code></pre>",
      "summary": "<h3>.isAbove(valueToCheck, valueToBeAbove, [message])</h3>\n",
      "body": "<p>Asserts <code>valueToCheck</code> is strictly greater than (&gt;) <code>valueToBeAbove</code></p><pre><code>assert.isAbove(5, 2, &#39;5 is strictly greater than 2&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2389,
    "codeStart": 2404,
    "code": "assert.isAbove = function (val, abv, msg) {\n  new Assertion(val, msg).to.be.above(abv);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isAbove",
      "string": "assert.isAbove()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isAtLeast",
        "html": "<p>isAtLeast</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} valueToCheck",
        "name": "valueToCheck",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} valueToCheck</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} valueToBeAtLeast",
        "name": "valueToBeAtLeast",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} valueToBeAtLeast</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isAtLeast(valueToCheck, valueToBeAtLeast, [message])</h3>\n<p>Asserts <code>valueToCheck</code> is greater than or equal to (&gt;=) <code>valueToBeAtLeast</code></p><pre><code>assert.isAtLeast(5, 2, &#39;5 is greater or equal to 2&#39;);\nassert.isAtLeast(3, 3, &#39;3 is greater or equal to 3&#39;);\n</code></pre>",
      "summary": "<h3>.isAtLeast(valueToCheck, valueToBeAtLeast, [message])</h3>\n",
      "body": "<p>Asserts <code>valueToCheck</code> is greater than or equal to (&gt;=) <code>valueToBeAtLeast</code></p><pre><code>assert.isAtLeast(5, 2, &#39;5 is greater or equal to 2&#39;);\nassert.isAtLeast(3, 3, &#39;3 is greater or equal to 3&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2408,
    "codeStart": 2424,
    "code": "assert.isAtLeast = function (val, atlst, msg) {\n  new Assertion(val, msg).to.be.least(atlst);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isAtLeast",
      "string": "assert.isAtLeast()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isBelow",
        "html": "<p>isBelow</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} valueToCheck",
        "name": "valueToCheck",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} valueToCheck</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} valueToBeBelow",
        "name": "valueToBeBelow",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} valueToBeBelow</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isBelow(valueToCheck, valueToBeBelow, [message])</h3>\n<p>Asserts <code>valueToCheck</code> is strictly less than (&lt;) <code>valueToBeBelow</code></p><pre><code>assert.isBelow(3, 6, &#39;3 is strictly less than 6&#39;);\n</code></pre>",
      "summary": "<h3>.isBelow(valueToCheck, valueToBeBelow, [message])</h3>\n",
      "body": "<p>Asserts <code>valueToCheck</code> is strictly less than (&lt;) <code>valueToBeBelow</code></p><pre><code>assert.isBelow(3, 6, &#39;3 is strictly less than 6&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2428,
    "codeStart": 2443,
    "code": "assert.isBelow = function (val, blw, msg) {\n  new Assertion(val, msg).to.be.below(blw);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isBelow",
      "string": "assert.isBelow()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isAtMost",
        "html": "<p>isAtMost</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} valueToCheck",
        "name": "valueToCheck",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} valueToCheck</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} valueToBeAtMost",
        "name": "valueToBeAtMost",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} valueToBeAtMost</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isAtMost(valueToCheck, valueToBeAtMost, [message])</h3>\n<p>Asserts <code>valueToCheck</code> is less than or equal to (&lt;=) <code>valueToBeAtMost</code></p><pre><code>assert.isAtMost(3, 6, &#39;3 is less than or equal to 6&#39;);\nassert.isAtMost(4, 4, &#39;4 is less than or equal to 4&#39;);\n</code></pre>",
      "summary": "<h3>.isAtMost(valueToCheck, valueToBeAtMost, [message])</h3>\n",
      "body": "<p>Asserts <code>valueToCheck</code> is less than or equal to (&lt;=) <code>valueToBeAtMost</code></p><pre><code>assert.isAtMost(3, 6, &#39;3 is less than or equal to 6&#39;);\nassert.isAtMost(4, 4, &#39;4 is less than or equal to 4&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2447,
    "codeStart": 2463,
    "code": "assert.isAtMost = function (val, atmst, msg) {\n  new Assertion(val, msg).to.be.most(atmst);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isAtMost",
      "string": "assert.isAtMost()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isTrue",
        "html": "<p>isTrue</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isTrue(value, [message])</h3>\n<p>Asserts that <code>value</code> is true.</p><pre><code>var teaServed = true;\nassert.isTrue(teaServed, &#39;the tea has been served&#39;);\n</code></pre>",
      "summary": "<h3>.isTrue(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is true.</p><pre><code>var teaServed = true;\nassert.isTrue(teaServed, &#39;the tea has been served&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2467,
    "codeStart": 2482,
    "code": "assert.isTrue = function (val, msg) {\n  new Assertion(val, msg).is['true'];\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isTrue",
      "string": "assert.isTrue()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotTrue",
        "html": "<p>isNotTrue</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotTrue(value, [message])</h3>\n<p>Asserts that <code>value</code> is not true.</p><pre><code>var tea = &#39;tasty chai&#39;;\nassert.isNotTrue(tea, &#39;great, time for tea!&#39;);\n</code></pre>",
      "summary": "<h3>.isNotTrue(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is not true.</p><pre><code>var tea = &#39;tasty chai&#39;;\nassert.isNotTrue(tea, &#39;great, time for tea!&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2486,
    "codeStart": 2501,
    "code": "assert.isNotTrue = function (val, msg) {\n  new Assertion(val, msg).to.not.equal(true);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotTrue",
      "string": "assert.isNotTrue()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isFalse",
        "html": "<p>isFalse</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isFalse(value, [message])</h3>\n<p>Asserts that <code>value</code> is false.</p><pre><code>var teaServed = false;\nassert.isFalse(teaServed, &#39;no tea yet? hmm...&#39;);\n</code></pre>",
      "summary": "<h3>.isFalse(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is false.</p><pre><code>var teaServed = false;\nassert.isFalse(teaServed, &#39;no tea yet? hmm...&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2505,
    "codeStart": 2520,
    "code": "assert.isFalse = function (val, msg) {\n  new Assertion(val, msg).is['false'];\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isFalse",
      "string": "assert.isFalse()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotFalse",
        "html": "<p>isNotFalse</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotFalse(value, [message])</h3>\n<p>Asserts that <code>value</code> is not false.</p><pre><code>var tea = &#39;tasty chai&#39;;\nassert.isNotFalse(tea, &#39;great, time for tea!&#39;);\n</code></pre>",
      "summary": "<h3>.isNotFalse(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is not false.</p><pre><code>var tea = &#39;tasty chai&#39;;\nassert.isNotFalse(tea, &#39;great, time for tea!&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2524,
    "codeStart": 2539,
    "code": "assert.isNotFalse = function (val, msg) {\n  new Assertion(val, msg).to.not.equal(false);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotFalse",
      "string": "assert.isNotFalse()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNull",
        "html": "<p>isNull</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNull(value, [message])</h3>\n<p>Asserts that <code>value</code> is null.</p><pre><code>assert.isNull(err, &#39;there was no error&#39;);\n</code></pre>",
      "summary": "<h3>.isNull(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is null.</p><pre><code>assert.isNull(err, &#39;there was no error&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2543,
    "codeStart": 2557,
    "code": "assert.isNull = function (val, msg) {\n  new Assertion(val, msg).to.equal(null);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNull",
      "string": "assert.isNull()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotNull",
        "html": "<p>isNotNull</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotNull(value, [message])</h3>\n<p>Asserts that <code>value</code> is not null.</p><pre><code>var tea = &#39;tasty chai&#39;;\nassert.isNotNull(tea, &#39;great, time for tea!&#39;);\n</code></pre>",
      "summary": "<h3>.isNotNull(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is not null.</p><pre><code>var tea = &#39;tasty chai&#39;;\nassert.isNotNull(tea, &#39;great, time for tea!&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2561,
    "codeStart": 2576,
    "code": "assert.isNotNull = function (val, msg) {\n  new Assertion(val, msg).to.not.equal(null);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotNull",
      "string": "assert.isNotNull()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNaN",
        "html": "<p>isNaN</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNaN</h3>\n<p>Asserts that value is NaN</p><p>   assert.isNaN(&#39;foo&#39;, &#39;foo is NaN&#39;);</p>",
      "summary": "<h3>.isNaN</h3>\n<p>Asserts that value is NaN</p>",
      "body": "<p>   assert.isNaN(&#39;foo&#39;, &#39;foo is NaN&#39;);</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2580,
    "codeStart": 2593,
    "code": "assert.isNaN = function (val, msg) {\n  new Assertion(val, msg).to.be.NaN;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNaN",
      "string": "assert.isNaN()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotNaN",
        "html": "<p>isNotNaN</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotNaN</h3>\n<p>Asserts that value is not NaN</p><p>   assert.isNotNaN(4, &#39;4 is not NaN&#39;);</p>",
      "summary": "<h3>.isNotNaN</h3>\n<p>Asserts that value is not NaN</p>",
      "body": "<p>   assert.isNotNaN(4, &#39;4 is not NaN&#39;);</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2597,
    "codeStart": 2609,
    "code": "assert.isNotNaN = function (val, msg) {\n  new Assertion(val, msg).not.to.be.NaN;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotNaN",
      "string": "assert.isNotNaN()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isUndefined",
        "html": "<p>isUndefined</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isUndefined(value, [message])</h3>\n<p>Asserts that <code>value</code> is <code>undefined</code>.</p><pre><code>var tea;\nassert.isUndefined(tea, &#39;no tea defined&#39;);\n</code></pre>",
      "summary": "<h3>.isUndefined(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is <code>undefined</code>.</p><pre><code>var tea;\nassert.isUndefined(tea, &#39;no tea defined&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2613,
    "codeStart": 2628,
    "code": "assert.isUndefined = function (val, msg) {\n  new Assertion(val, msg).to.equal(undefined);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isUndefined",
      "string": "assert.isUndefined()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isDefined",
        "html": "<p>isDefined</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isDefined(value, [message])</h3>\n<p>Asserts that <code>value</code> is not <code>undefined</code>.</p><pre><code>var tea = &#39;cup of chai&#39;;\nassert.isDefined(tea, &#39;tea has been defined&#39;);\n</code></pre>",
      "summary": "<h3>.isDefined(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is not <code>undefined</code>.</p><pre><code>var tea = &#39;cup of chai&#39;;\nassert.isDefined(tea, &#39;tea has been defined&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2632,
    "codeStart": 2647,
    "code": "assert.isDefined = function (val, msg) {\n  new Assertion(val, msg).to.not.equal(undefined);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isDefined",
      "string": "assert.isDefined()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isFunction",
        "html": "<p>isFunction</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isFunction(value, [message])</h3>\n<p>Asserts that <code>value</code> is a function.</p><pre><code>function serveTea() { return &#39;cup of tea&#39;; };\nassert.isFunction(serveTea, &#39;great, we can have tea now&#39;);\n</code></pre>",
      "summary": "<h3>.isFunction(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is a function.</p><pre><code>function serveTea() { return &#39;cup of tea&#39;; };\nassert.isFunction(serveTea, &#39;great, we can have tea now&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2651,
    "codeStart": 2666,
    "code": "assert.isFunction = function (val, msg) {\n  new Assertion(val, msg).to.be.a('function');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isFunction",
      "string": "assert.isFunction()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotFunction",
        "html": "<p>isNotFunction</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotFunction(value, [message])</h3>\n<p>Asserts that <code>value</code> is <em>not</em> a function.</p><pre><code>var serveTea = [ &#39;heat&#39;, &#39;pour&#39;, &#39;sip&#39; ];\nassert.isNotFunction(serveTea, &#39;great, we have listed the steps&#39;);\n</code></pre>",
      "summary": "<h3>.isNotFunction(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is <em>not</em> a function.</p><pre><code>var serveTea = [ &#39;heat&#39;, &#39;pour&#39;, &#39;sip&#39; ];\nassert.isNotFunction(serveTea, &#39;great, we have listed the steps&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2670,
    "codeStart": 2685,
    "code": "assert.isNotFunction = function (val, msg) {\n  new Assertion(val, msg).to.not.be.a('function');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotFunction",
      "string": "assert.isNotFunction()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isObject",
        "html": "<p>isObject</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isObject(value, [message])</h3>\n<p>Asserts that <code>value</code> is an object of type &#39;Object&#39; (as revealed by <code>Object.prototype.toString</code>).<br /><em>The assertion does not match subclassed objects.</em></p><pre><code>var selection = { name: &#39;Chai&#39;, serve: &#39;with spices&#39; };\nassert.isObject(selection, &#39;tea selection is an object&#39;);\n</code></pre>",
      "summary": "<h3>.isObject(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is an object of type &#39;Object&#39; (as revealed by <code>Object.prototype.toString</code>).<br /><em>The assertion does not match subclassed objects.</em></p><pre><code>var selection = { name: &#39;Chai&#39;, serve: &#39;with spices&#39; };\nassert.isObject(selection, &#39;tea selection is an object&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2689,
    "codeStart": 2705,
    "code": "assert.isObject = function (val, msg) {\n  new Assertion(val, msg).to.be.a('object');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isObject",
      "string": "assert.isObject()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotObject",
        "html": "<p>isNotObject</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotObject(value, [message])</h3>\n<p>Asserts that <code>value</code> is <em>not</em> an object of type &#39;Object&#39; (as revealed by <code>Object.prototype.toString</code>).</p><pre><code>var selection = &#39;chai&#39;\nassert.isNotObject(selection, &#39;tea selection is not an object&#39;);\nassert.isNotObject(null, &#39;null is not an object&#39;);\n</code></pre>",
      "summary": "<h3>.isNotObject(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is <em>not</em> an object of type &#39;Object&#39; (as revealed by <code>Object.prototype.toString</code>).</p><pre><code>var selection = &#39;chai&#39;\nassert.isNotObject(selection, &#39;tea selection is not an object&#39;);\nassert.isNotObject(null, &#39;null is not an object&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2709,
    "codeStart": 2725,
    "code": "assert.isNotObject = function (val, msg) {\n  new Assertion(val, msg).to.not.be.a('object');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotObject",
      "string": "assert.isNotObject()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isArray",
        "html": "<p>isArray</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isArray(value, [message])</h3>\n<p>Asserts that <code>value</code> is an array.</p><pre><code>var menu = [ &#39;green&#39;, &#39;chai&#39;, &#39;oolong&#39; ];\nassert.isArray(menu, &#39;what kind of tea do we want?&#39;);\n</code></pre>",
      "summary": "<h3>.isArray(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is an array.</p><pre><code>var menu = [ &#39;green&#39;, &#39;chai&#39;, &#39;oolong&#39; ];\nassert.isArray(menu, &#39;what kind of tea do we want?&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2729,
    "codeStart": 2744,
    "code": "assert.isArray = function (val, msg) {\n  new Assertion(val, msg).to.be.an('array');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isArray",
      "string": "assert.isArray()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotArray",
        "html": "<p>isNotArray</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotArray(value, [message])</h3>\n<p>Asserts that <code>value</code> is <em>not</em> an array.</p><pre><code>var menu = &#39;green|chai|oolong&#39;;\nassert.isNotArray(menu, &#39;what kind of tea do we want?&#39;);\n</code></pre>",
      "summary": "<h3>.isNotArray(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is <em>not</em> an array.</p><pre><code>var menu = &#39;green|chai|oolong&#39;;\nassert.isNotArray(menu, &#39;what kind of tea do we want?&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2748,
    "codeStart": 2763,
    "code": "assert.isNotArray = function (val, msg) {\n  new Assertion(val, msg).to.not.be.an('array');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotArray",
      "string": "assert.isNotArray()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isString",
        "html": "<p>isString</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isString(value, [message])</h3>\n<p>Asserts that <code>value</code> is a string.</p><pre><code>var teaOrder = &#39;chai&#39;;\nassert.isString(teaOrder, &#39;order placed&#39;);\n</code></pre>",
      "summary": "<h3>.isString(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is a string.</p><pre><code>var teaOrder = &#39;chai&#39;;\nassert.isString(teaOrder, &#39;order placed&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2767,
    "codeStart": 2782,
    "code": "assert.isString = function (val, msg) {\n  new Assertion(val, msg).to.be.a('string');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isString",
      "string": "assert.isString()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotString",
        "html": "<p>isNotString</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotString(value, [message])</h3>\n<p>Asserts that <code>value</code> is <em>not</em> a string.</p><pre><code>var teaOrder = 4;\nassert.isNotString(teaOrder, &#39;order placed&#39;);\n</code></pre>",
      "summary": "<h3>.isNotString(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is <em>not</em> a string.</p><pre><code>var teaOrder = 4;\nassert.isNotString(teaOrder, &#39;order placed&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2786,
    "codeStart": 2801,
    "code": "assert.isNotString = function (val, msg) {\n  new Assertion(val, msg).to.not.be.a('string');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotString",
      "string": "assert.isNotString()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNumber",
        "html": "<p>isNumber</p>"
      },
      {
        "type": "param",
        "string": "{Number} value",
        "name": "value",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNumber(value, [message])</h3>\n<p>Asserts that <code>value</code> is a number.</p><pre><code>var cups = 2;\nassert.isNumber(cups, &#39;how many cups&#39;);\n</code></pre>",
      "summary": "<h3>.isNumber(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is a number.</p><pre><code>var cups = 2;\nassert.isNumber(cups, &#39;how many cups&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2805,
    "codeStart": 2820,
    "code": "assert.isNumber = function (val, msg) {\n  new Assertion(val, msg).to.be.a('number');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNumber",
      "string": "assert.isNumber()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotNumber",
        "html": "<p>isNotNumber</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotNumber(value, [message])</h3>\n<p>Asserts that <code>value</code> is <em>not</em> a number.</p><pre><code>var cups = &#39;2 cups please&#39;;\nassert.isNotNumber(cups, &#39;how many cups&#39;);\n</code></pre>",
      "summary": "<h3>.isNotNumber(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is <em>not</em> a number.</p><pre><code>var cups = &#39;2 cups please&#39;;\nassert.isNotNumber(cups, &#39;how many cups&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2824,
    "codeStart": 2839,
    "code": "assert.isNotNumber = function (val, msg) {\n  new Assertion(val, msg).to.not.be.a('number');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotNumber",
      "string": "assert.isNotNumber()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isBoolean",
        "html": "<p>isBoolean</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isBoolean(value, [message])</h3>\n<p>Asserts that <code>value</code> is a boolean.</p><pre><code>var teaReady = true\n  , teaServed = false;\n\nassert.isBoolean(teaReady, &#39;is the tea ready&#39;);\nassert.isBoolean(teaServed, &#39;has tea been served&#39;);\n</code></pre>",
      "summary": "<h3>.isBoolean(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is a boolean.</p><pre><code>var teaReady = true\n  , teaServed = false;\n\nassert.isBoolean(teaReady, &#39;is the tea ready&#39;);\nassert.isBoolean(teaServed, &#39;has tea been served&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2843,
    "codeStart": 2861,
    "code": "assert.isBoolean = function (val, msg) {\n  new Assertion(val, msg).to.be.a('boolean');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isBoolean",
      "string": "assert.isBoolean()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotBoolean",
        "html": "<p>isNotBoolean</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotBoolean(value, [message])</h3>\n<p>Asserts that <code>value</code> is <em>not</em> a boolean.</p><pre><code>var teaReady = &#39;yep&#39;\n  , teaServed = &#39;nope&#39;;\n\nassert.isNotBoolean(teaReady, &#39;is the tea ready&#39;);\nassert.isNotBoolean(teaServed, &#39;has tea been served&#39;);\n</code></pre>",
      "summary": "<h3>.isNotBoolean(value, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is <em>not</em> a boolean.</p><pre><code>var teaReady = &#39;yep&#39;\n  , teaServed = &#39;nope&#39;;\n\nassert.isNotBoolean(teaReady, &#39;is the tea ready&#39;);\nassert.isNotBoolean(teaServed, &#39;has tea been served&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2865,
    "codeStart": 2883,
    "code": "assert.isNotBoolean = function (val, msg) {\n  new Assertion(val, msg).to.not.be.a('boolean');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotBoolean",
      "string": "assert.isNotBoolean()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "typeOf",
        "html": "<p>typeOf</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} name",
        "name": "name",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} name</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.typeOf(value, name, [message])</h3>\n<p>Asserts that <code>value</code>&#39;s type is <code>name</code>, as determined by<br /><code>Object.prototype.toString</code>.</p><pre><code>assert.typeOf({ tea: &#39;chai&#39; }, &#39;object&#39;, &#39;we have an object&#39;);\nassert.typeOf([&#39;chai&#39;, &#39;jasmine&#39;], &#39;array&#39;, &#39;we have an array&#39;);\nassert.typeOf(&#39;tea&#39;, &#39;string&#39;, &#39;we have a string&#39;);\nassert.typeOf(/tea/, &#39;regexp&#39;, &#39;we have a regular expression&#39;);\nassert.typeOf(null, &#39;null&#39;, &#39;we have a null&#39;);\nassert.typeOf(undefined, &#39;undefined&#39;, &#39;we have an undefined&#39;);\n</code></pre>",
      "summary": "<h3>.typeOf(value, name, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code>&#39;s type is <code>name</code>, as determined by<br /><code>Object.prototype.toString</code>.</p><pre><code>assert.typeOf({ tea: &#39;chai&#39; }, &#39;object&#39;, &#39;we have an object&#39;);\nassert.typeOf([&#39;chai&#39;, &#39;jasmine&#39;], &#39;array&#39;, &#39;we have an array&#39;);\nassert.typeOf(&#39;tea&#39;, &#39;string&#39;, &#39;we have a string&#39;);\nassert.typeOf(/tea/, &#39;regexp&#39;, &#39;we have a regular expression&#39;);\nassert.typeOf(null, &#39;null&#39;, &#39;we have a null&#39;);\nassert.typeOf(undefined, &#39;undefined&#39;, &#39;we have an undefined&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2887,
    "codeStart": 2908,
    "code": "assert.typeOf = function (val, type, msg) {\n  new Assertion(val, msg).to.be.a(type);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "typeOf",
      "string": "assert.typeOf()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notTypeOf",
        "html": "<p>notTypeOf</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} typeof name",
        "name": "typeof",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notTypeOf(value, name, [message])</h3>\n<p>Asserts that <code>value</code>&#39;s type is <em>not</em> <code>name</code>, as determined by<br /><code>Object.prototype.toString</code>.</p><pre><code>assert.notTypeOf(&#39;tea&#39;, &#39;number&#39;, &#39;strings are not numbers&#39;);\n</code></pre>",
      "summary": "<h3>.notTypeOf(value, name, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code>&#39;s type is <em>not</em> <code>name</code>, as determined by<br /><code>Object.prototype.toString</code>.</p><pre><code>assert.notTypeOf(&#39;tea&#39;, &#39;number&#39;, &#39;strings are not numbers&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2912,
    "codeStart": 2928,
    "code": "assert.notTypeOf = function (val, type, msg) {\n  new Assertion(val, msg).to.not.be.a(type);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notTypeOf",
      "string": "assert.notTypeOf()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "instanceOf",
        "html": "<p>instanceOf</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{Constructor} constructor",
        "name": "constructor",
        "description": "",
        "types": [
          "Constructor"
        ],
        "typesDescription": "<a href=\"Constructor.html\">Constructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Constructor} constructor</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.instanceOf(object, constructor, [message])</h3>\n<p>Asserts that <code>value</code> is an instance of <code>constructor</code>.</p><pre><code>var Tea = function (name) { this.name = name; }\n  , chai = new Tea(&#39;chai&#39;);\n\nassert.instanceOf(chai, Tea, &#39;chai is an instance of tea&#39;);\n</code></pre>",
      "summary": "<h3>.instanceOf(object, constructor, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> is an instance of <code>constructor</code>.</p><pre><code>var Tea = function (name) { this.name = name; }\n  , chai = new Tea(&#39;chai&#39;);\n\nassert.instanceOf(chai, Tea, &#39;chai is an instance of tea&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2932,
    "codeStart": 2950,
    "code": "assert.instanceOf = function (val, type, msg) {\n  new Assertion(val, msg).to.be.instanceOf(type);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "instanceOf",
      "string": "assert.instanceOf()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notInstanceOf",
        "html": "<p>notInstanceOf</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{Constructor} constructor",
        "name": "constructor",
        "description": "",
        "types": [
          "Constructor"
        ],
        "typesDescription": "<a href=\"Constructor.html\">Constructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Constructor} constructor</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notInstanceOf(object, constructor, [message])</h3>\n<p>Asserts <code>value</code> is not an instance of <code>constructor</code>.</p><pre><code>var Tea = function (name) { this.name = name; }\n  , chai = new String(&#39;chai&#39;);\n\nassert.notInstanceOf(chai, Tea, &#39;chai is not an instance of tea&#39;);\n</code></pre>",
      "summary": "<h3>.notInstanceOf(object, constructor, [message])</h3>\n",
      "body": "<p>Asserts <code>value</code> is not an instance of <code>constructor</code>.</p><pre><code>var Tea = function (name) { this.name = name; }\n  , chai = new String(&#39;chai&#39;);\n\nassert.notInstanceOf(chai, Tea, &#39;chai is not an instance of tea&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2954,
    "codeStart": 2972,
    "code": "assert.notInstanceOf = function (val, type, msg) {\n  new Assertion(val, msg).to.not.be.instanceOf(type);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notInstanceOf",
      "string": "assert.notInstanceOf()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "include",
        "html": "<p>include</p>"
      },
      {
        "type": "param",
        "string": "{Array|String} haystack",
        "name": "haystack",
        "description": "",
        "types": [
          "Array",
          "String"
        ],
        "typesDescription": "<code>Array</code>|<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array|String} haystack</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} needle",
        "name": "needle",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} needle</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.include(haystack, needle, [message])</h3>\n<p>Asserts that <code>haystack</code> includes <code>needle</code>. Works<br />for strings and arrays.</p><pre><code>assert.include(&#39;foobar&#39;, &#39;bar&#39;, &#39;foobar contains string &quot;bar&quot;&#39;);\nassert.include([ 1, 2, 3 ], 3, &#39;array contains value&#39;);\n</code></pre>",
      "summary": "<h3>.include(haystack, needle, [message])</h3>\n",
      "body": "<p>Asserts that <code>haystack</code> includes <code>needle</code>. Works<br />for strings and arrays.</p><pre><code>assert.include(&#39;foobar&#39;, &#39;bar&#39;, &#39;foobar contains string &quot;bar&quot;&#39;);\nassert.include([ 1, 2, 3 ], 3, &#39;array contains value&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2976,
    "codeStart": 2993,
    "code": "assert.include = function (exp, inc, msg) {\n  new Assertion(exp, msg, assert.include).include(inc);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "include",
      "string": "assert.include()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notInclude",
        "html": "<p>notInclude</p>"
      },
      {
        "type": "param",
        "string": "{Array|String} haystack",
        "name": "haystack",
        "description": "",
        "types": [
          "Array",
          "String"
        ],
        "typesDescription": "<code>Array</code>|<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array|String} haystack</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} needle",
        "name": "needle",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} needle</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notInclude(haystack, needle, [message])</h3>\n<p>Asserts that <code>haystack</code> does not include <code>needle</code>. Works<br />for strings and arrays.</p><pre><code>assert.notInclude(&#39;foobar&#39;, &#39;baz&#39;, &#39;string not include substring&#39;);\nassert.notInclude([ 1, 2, 3 ], 4, &#39;array not include contain value&#39;);\n</code></pre>",
      "summary": "<h3>.notInclude(haystack, needle, [message])</h3>\n",
      "body": "<p>Asserts that <code>haystack</code> does not include <code>needle</code>. Works<br />for strings and arrays.</p><pre><code>assert.notInclude(&#39;foobar&#39;, &#39;baz&#39;, &#39;string not include substring&#39;);\nassert.notInclude([ 1, 2, 3 ], 4, &#39;array not include contain value&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 2997,
    "codeStart": 3014,
    "code": "assert.notInclude = function (exp, inc, msg) {\n  new Assertion(exp, msg, assert.notInclude).not.include(inc);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notInclude",
      "string": "assert.notInclude()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "match",
        "html": "<p>match</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{RegExp} regexp",
        "name": "regexp",
        "description": "",
        "types": [
          "RegExp"
        ],
        "typesDescription": "<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp} regexp</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.match(value, regexp, [message])</h3>\n<p>Asserts that <code>value</code> matches the regular expression <code>regexp</code>.</p><pre><code>assert.match(&#39;foobar&#39;, /^foo/, &#39;regexp matches&#39;);\n</code></pre>",
      "summary": "<h3>.match(value, regexp, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> matches the regular expression <code>regexp</code>.</p><pre><code>assert.match(&#39;foobar&#39;, /^foo/, &#39;regexp matches&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3018,
    "codeStart": 3033,
    "code": "assert.match = function (exp, re, msg) {\n  new Assertion(exp, msg).to.match(re);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "match",
      "string": "assert.match()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notMatch",
        "html": "<p>notMatch</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{RegExp} regexp",
        "name": "regexp",
        "description": "",
        "types": [
          "RegExp"
        ],
        "typesDescription": "<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp} regexp</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notMatch(value, regexp, [message])</h3>\n<p>Asserts that <code>value</code> does not match the regular expression <code>regexp</code>.</p><pre><code>assert.notMatch(&#39;foobar&#39;, /^foo/, &#39;regexp does not match&#39;);\n</code></pre>",
      "summary": "<h3>.notMatch(value, regexp, [message])</h3>\n",
      "body": "<p>Asserts that <code>value</code> does not match the regular expression <code>regexp</code>.</p><pre><code>assert.notMatch(&#39;foobar&#39;, /^foo/, &#39;regexp does not match&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3037,
    "codeStart": 3052,
    "code": "assert.notMatch = function (exp, re, msg) {\n  new Assertion(exp, msg).to.not.match(re);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notMatch",
      "string": "assert.notMatch()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "property",
        "html": "<p>property</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property",
        "name": "property",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} property</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.property(object, property, [message])</h3>\n<p>Asserts that <code>object</code> has a property named by <code>property</code>.</p><pre><code>assert.property({ tea: { green: &#39;matcha&#39; }}, &#39;tea&#39;);\n</code></pre>",
      "summary": "<h3>.property(object, property, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> has a property named by <code>property</code>.</p><pre><code>assert.property({ tea: { green: &#39;matcha&#39; }}, &#39;tea&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3056,
    "codeStart": 3071,
    "code": "assert.property = function (obj, prop, msg) {\n  new Assertion(obj, msg).to.have.property(prop);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "property",
      "string": "assert.property()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notProperty",
        "html": "<p>notProperty</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property",
        "name": "property",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} property</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notProperty(object, property, [message])</h3>\n<p>Asserts that <code>object</code> does <em>not</em> have a property named by <code>property</code>.</p><pre><code>assert.notProperty({ tea: { green: &#39;matcha&#39; }}, &#39;coffee&#39;);\n</code></pre>",
      "summary": "<h3>.notProperty(object, property, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> does <em>not</em> have a property named by <code>property</code>.</p><pre><code>assert.notProperty({ tea: { green: &#39;matcha&#39; }}, &#39;coffee&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3075,
    "codeStart": 3090,
    "code": "assert.notProperty = function (obj, prop, msg) {\n  new Assertion(obj, msg).to.not.have.property(prop);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notProperty",
      "string": "assert.notProperty()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "deepProperty",
        "html": "<p>deepProperty</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property",
        "name": "property",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} property</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.deepProperty(object, property, [message])</h3>\n<p>Asserts that <code>object</code> has a property named by <code>property</code>, which can be a<br />string using dot- and bracket-notation for deep reference.</p><pre><code>assert.deepProperty({ tea: { green: &#39;matcha&#39; }}, &#39;tea.green&#39;);\n</code></pre>",
      "summary": "<h3>.deepProperty(object, property, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> has a property named by <code>property</code>, which can be a<br />string using dot- and bracket-notation for deep reference.</p><pre><code>assert.deepProperty({ tea: { green: &#39;matcha&#39; }}, &#39;tea.green&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3094,
    "codeStart": 3110,
    "code": "assert.deepProperty = function (obj, prop, msg) {\n  new Assertion(obj, msg).to.have.deep.property(prop);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "deepProperty",
      "string": "assert.deepProperty()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "notDeepProperty",
        "html": "<p>notDeepProperty</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property",
        "name": "property",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} property</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.notDeepProperty(object, property, [message])</h3>\n<p>Asserts that <code>object</code> does <em>not</em> have a property named by <code>property</code>, which<br />can be a string using dot- and bracket-notation for deep reference.</p><pre><code>assert.notDeepProperty({ tea: { green: &#39;matcha&#39; }}, &#39;tea.oolong&#39;);\n</code></pre>",
      "summary": "<h3>.notDeepProperty(object, property, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> does <em>not</em> have a property named by <code>property</code>, which<br />can be a string using dot- and bracket-notation for deep reference.</p><pre><code>assert.notDeepProperty({ tea: { green: &#39;matcha&#39; }}, &#39;tea.oolong&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3114,
    "codeStart": 3130,
    "code": "assert.notDeepProperty = function (obj, prop, msg) {\n  new Assertion(obj, msg).to.not.have.deep.property(prop);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "notDeepProperty",
      "string": "assert.notDeepProperty()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "propertyVal",
        "html": "<p>propertyVal</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property",
        "name": "property",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} property</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.propertyVal(object, property, value, [message])</h3>\n<p>Asserts that <code>object</code> has a property named by <code>property</code> with value given<br />by <code>value</code>.</p><pre><code>assert.propertyVal({ tea: &#39;is good&#39; }, &#39;tea&#39;, &#39;is good&#39;);\n</code></pre>",
      "summary": "<h3>.propertyVal(object, property, value, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> has a property named by <code>property</code> with value given<br />by <code>value</code>.</p><pre><code>assert.propertyVal({ tea: &#39;is good&#39; }, &#39;tea&#39;, &#39;is good&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3134,
    "codeStart": 3151,
    "code": "assert.propertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg).to.have.property(prop, val);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "propertyVal",
      "string": "assert.propertyVal()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "propertyNotVal",
        "html": "<p>propertyNotVal</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property",
        "name": "property",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} property</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.propertyNotVal(object, property, value, [message])</h3>\n<p>Asserts that <code>object</code> has a property named by <code>property</code>, but with a value<br />different from that given by <code>value</code>.</p><pre><code>assert.propertyNotVal({ tea: &#39;is good&#39; }, &#39;tea&#39;, &#39;is bad&#39;);\n</code></pre>",
      "summary": "<h3>.propertyNotVal(object, property, value, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> has a property named by <code>property</code>, but with a value<br />different from that given by <code>value</code>.</p><pre><code>assert.propertyNotVal({ tea: &#39;is good&#39; }, &#39;tea&#39;, &#39;is bad&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3155,
    "codeStart": 3172,
    "code": "assert.propertyNotVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg).to.not.have.property(prop, val);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "propertyNotVal",
      "string": "assert.propertyNotVal()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "deepPropertyVal",
        "html": "<p>deepPropertyVal</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property",
        "name": "property",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} property</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.deepPropertyVal(object, property, value, [message])</h3>\n<p>Asserts that <code>object</code> has a property named by <code>property</code> with value given<br />by <code>value</code>. <code>property</code> can use dot- and bracket-notation for deep<br />reference.</p><pre><code>assert.deepPropertyVal({ tea: { green: &#39;matcha&#39; }}, &#39;tea.green&#39;, &#39;matcha&#39;);\n</code></pre>",
      "summary": "<h3>.deepPropertyVal(object, property, value, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> has a property named by <code>property</code> with value given<br />by <code>value</code>. <code>property</code> can use dot- and bracket-notation for deep<br />reference.</p><pre><code>assert.deepPropertyVal({ tea: { green: &#39;matcha&#39; }}, &#39;tea.green&#39;, &#39;matcha&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3176,
    "codeStart": 3194,
    "code": "assert.deepPropertyVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg).to.have.deep.property(prop, val);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "deepPropertyVal",
      "string": "assert.deepPropertyVal()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "deepPropertyNotVal",
        "html": "<p>deepPropertyNotVal</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property",
        "name": "property",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} property</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value",
        "name": "value",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} value</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.deepPropertyNotVal(object, property, value, [message])</h3>\n<p>Asserts that <code>object</code> has a property named by <code>property</code>, but with a value<br />different from that given by <code>value</code>. <code>property</code> can use dot- and<br />bracket-notation for deep reference.</p><pre><code>assert.deepPropertyNotVal({ tea: { green: &#39;matcha&#39; }}, &#39;tea.green&#39;, &#39;konacha&#39;);\n</code></pre>",
      "summary": "<h3>.deepPropertyNotVal(object, property, value, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> has a property named by <code>property</code>, but with a value<br />different from that given by <code>value</code>. <code>property</code> can use dot- and<br />bracket-notation for deep reference.</p><pre><code>assert.deepPropertyNotVal({ tea: { green: &#39;matcha&#39; }}, &#39;tea.green&#39;, &#39;konacha&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3198,
    "codeStart": 3216,
    "code": "assert.deepPropertyNotVal = function (obj, prop, val, msg) {\n  new Assertion(obj, msg).to.not.have.deep.property(prop, val);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "deepPropertyNotVal",
      "string": "assert.deepPropertyNotVal()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "lengthOf",
        "html": "<p>lengthOf</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} object",
        "name": "object",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} object</p>"
      },
      {
        "type": "param",
        "string": "{Number} length",
        "name": "length",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} length</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.lengthOf(object, length, [message])</h3>\n<p>Asserts that <code>object</code> has a <code>length</code> property with the expected value.</p><pre><code>assert.lengthOf([1,2,3], 3, &#39;array has length of 3&#39;);\nassert.lengthOf(&#39;foobar&#39;, 6, &#39;string has length of 6&#39;);\n</code></pre>",
      "summary": "<h3>.lengthOf(object, length, [message])</h3>\n",
      "body": "<p>Asserts that <code>object</code> has a <code>length</code> property with the expected value.</p><pre><code>assert.lengthOf([1,2,3], 3, &#39;array has length of 3&#39;);\nassert.lengthOf(&#39;foobar&#39;, 6, &#39;string has length of 6&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3220,
    "codeStart": 3236,
    "code": "assert.lengthOf = function (exp, len, msg) {\n  new Assertion(exp, msg).to.have.length(len);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "lengthOf",
      "string": "assert.lengthOf()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "throws",
        "html": "<p>throws</p>"
      },
      {
        "type": "alias",
        "string": "throw",
        "html": "<p>throw</p>"
      },
      {
        "type": "alias",
        "string": "Throw",
        "html": "<p>Throw</p>"
      },
      {
        "type": "param",
        "string": "{Function} function",
        "name": "function",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} function</p>"
      },
      {
        "type": "param",
        "string": "{ErrorConstructor} constructor",
        "name": "constructor",
        "description": "",
        "types": [
          "ErrorConstructor"
        ],
        "typesDescription": "<a href=\"ErrorConstructor.html\">ErrorConstructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ErrorConstructor} constructor</p>"
      },
      {
        "type": "param",
        "string": "{RegExp} regexp",
        "name": "regexp",
        "description": "",
        "types": [
          "RegExp"
        ],
        "typesDescription": "<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp} regexp</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "see",
        "string": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "title": "",
        "url": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "html": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types</a></p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.throws(function, [constructor/string/regexp], [string/regexp], [message])</h3>\n<p>Asserts that <code>function</code> will throw an error that is an instance of<br /><code>constructor</code>, or alternately that it will throw an error with message<br />matching <code>regexp</code>.</p><pre><code>assert.throws(fn, &#39;function throws a reference error&#39;);\nassert.throws(fn, /function throws a reference error/);\nassert.throws(fn, ReferenceError);\nassert.throws(fn, ReferenceError, &#39;function throws a reference error&#39;);\nassert.throws(fn, ReferenceError, /function throws a reference error/);\n</code></pre>",
      "summary": "<h3>.throws(function, [constructor/string/regexp], [string/regexp], [message])</h3>\n",
      "body": "<p>Asserts that <code>function</code> will throw an error that is an instance of<br /><code>constructor</code>, or alternately that it will throw an error with message<br />matching <code>regexp</code>.</p><pre><code>assert.throws(fn, &#39;function throws a reference error&#39;);\nassert.throws(fn, /function throws a reference error/);\nassert.throws(fn, ReferenceError);\nassert.throws(fn, ReferenceError, &#39;function throws a reference error&#39;);\nassert.throws(fn, ReferenceError, /function throws a reference error/);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3240,
    "codeStart": 3265,
    "code": "assert.throws = function (fn, errt, errs, msg) {\n  if ('string' === typeof errt || errt instanceof RegExp) {\n    errs = errt;\n    errt = null;\n  }\n\n  var assertErr = new Assertion(fn, msg).to.throw(errt, errs);\n  return flag(assertErr, 'object');\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "throws",
      "string": "assert.throws()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "doesNotThrow",
        "html": "<p>doesNotThrow</p>"
      },
      {
        "type": "param",
        "string": "{Function} function",
        "name": "function",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} function</p>"
      },
      {
        "type": "param",
        "string": "{ErrorConstructor} constructor",
        "name": "constructor",
        "description": "",
        "types": [
          "ErrorConstructor"
        ],
        "typesDescription": "<a href=\"ErrorConstructor.html\">ErrorConstructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ErrorConstructor} constructor</p>"
      },
      {
        "type": "param",
        "string": "{RegExp} regexp",
        "name": "regexp",
        "description": "",
        "types": [
          "RegExp"
        ],
        "typesDescription": "<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp} regexp</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "see",
        "string": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "title": "",
        "url": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "html": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types</a></p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.doesNotThrow(function, [constructor/regexp], [message])</h3>\n<p>Asserts that <code>function</code> will <em>not</em> throw an error that is an instance of<br /><code>constructor</code>, or alternately that it will not throw an error with message<br />matching <code>regexp</code>.</p><pre><code>assert.doesNotThrow(fn, Error, &#39;function does not throw&#39;);\n</code></pre>",
      "summary": "<h3>.doesNotThrow(function, [constructor/regexp], [message])</h3>\n",
      "body": "<p>Asserts that <code>function</code> will <em>not</em> throw an error that is an instance of<br /><code>constructor</code>, or alternately that it will not throw an error with message<br />matching <code>regexp</code>.</p><pre><code>assert.doesNotThrow(fn, Error, &#39;function does not throw&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3275,
    "codeStart": 3294,
    "code": "assert.doesNotThrow = function (fn, type, msg) {\n  if ('string' === typeof type) {\n    msg = type;\n    type = null;\n  }\n\n  new Assertion(fn, msg).to.not.Throw(type);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "doesNotThrow",
      "string": "assert.doesNotThrow()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "operator",
        "html": "<p>operator</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} val1",
        "name": "val1",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} val1</p>"
      },
      {
        "type": "param",
        "string": "{String} operator",
        "name": "operator",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} operator</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} val2",
        "name": "val2",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} val2</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.operator(val1, operator, val2, [message])</h3>\n<p>Compares two values using <code>operator</code>.</p><pre><code>assert.operator(1, &#39;&lt;&#39;, 2, &#39;everything is ok&#39;);\nassert.operator(1, &#39;&gt;&#39;, 2, &#39;this will fail&#39;);\n</code></pre>",
      "summary": "<h3>.operator(val1, operator, val2, [message])</h3>\n",
      "body": "<p>Compares two values using <code>operator</code>.</p><pre><code>assert.operator(1, &#39;&lt;&#39;, 2, &#39;everything is ok&#39;);\nassert.operator(1, &#39;&gt;&#39;, 2, &#39;this will fail&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3303,
    "codeStart": 3320,
    "code": "assert.operator = function (val, operator, val2, msg) {\n  var ok;\n  switch(operator) {\n    case '==':\n      ok = val == val2;\n      break;\n    case '===':\n      ok = val === val2;\n      break;\n    case '>':\n      ok = val > val2;\n      break;\n    case '>=':\n      ok = val >= val2;\n      break;\n    case '<':\n      ok = val < val2;\n      break;\n    case '<=':\n      ok = val <= val2;\n      break;\n    case '!=':\n      ok = val != val2;\n      break;\n    case '!==':\n      ok = val !== val2;\n      break;\n    default:\n      throw new Error('Invalid operator \"' + operator + '\"');\n  }\n  var test = new Assertion(ok, msg);\n  test.assert(\n      true === flag(test, 'object')\n    , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n    , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "operator",
      "string": "assert.operator()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "closeTo",
        "html": "<p>closeTo</p>"
      },
      {
        "type": "param",
        "string": "{Number} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} actual</p>"
      },
      {
        "type": "param",
        "string": "{Number} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} expected</p>"
      },
      {
        "type": "param",
        "string": "{Number} delta",
        "name": "delta",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} delta</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.closeTo(actual, expected, delta, [message])</h3>\n<p>Asserts that the target is equal <code>expected</code>, to within a +/- <code>delta</code> range.</p><pre><code>assert.closeTo(1.5, 1, 0.5, &#39;numbers are close&#39;);\n</code></pre>",
      "summary": "<h3>.closeTo(actual, expected, delta, [message])</h3>\n",
      "body": "<p>Asserts that the target is equal <code>expected</code>, to within a +/- <code>delta</code> range.</p><pre><code>assert.closeTo(1.5, 1, 0.5, &#39;numbers are close&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3357,
    "codeStart": 3373,
    "code": "assert.closeTo = function (act, exp, delta, msg) {\n  new Assertion(act, msg).to.be.closeTo(exp, delta);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "closeTo",
      "string": "assert.closeTo()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "approximately",
        "html": "<p>approximately</p>"
      },
      {
        "type": "param",
        "string": "{Number} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} actual</p>"
      },
      {
        "type": "param",
        "string": "{Number} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} expected</p>"
      },
      {
        "type": "param",
        "string": "{Number} delta",
        "name": "delta",
        "description": "",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Number} delta</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.approximately(actual, expected, delta, [message])</h3>\n<p>Asserts that the target is equal <code>expected</code>, to within a +/- <code>delta</code> range.</p><pre><code>assert.approximately(1.5, 1, 0.5, &#39;numbers are close&#39;);\n</code></pre>",
      "summary": "<h3>.approximately(actual, expected, delta, [message])</h3>\n",
      "body": "<p>Asserts that the target is equal <code>expected</code>, to within a +/- <code>delta</code> range.</p><pre><code>assert.approximately(1.5, 1, 0.5, &#39;numbers are close&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3377,
    "codeStart": 3393,
    "code": "assert.approximately = function (act, exp, delta, msg) {\n  new Assertion(act, msg).to.be.approximately(exp, delta);\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "approximately",
      "string": "assert.approximately()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "sameMembers",
        "html": "<p>sameMembers</p>"
      },
      {
        "type": "param",
        "string": "{Array} set1",
        "name": "set1",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} set1</p>"
      },
      {
        "type": "param",
        "string": "{Array} set2",
        "name": "set2",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} set2</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.sameMembers(set1, set2, [message])</h3>\n<p>Asserts that <code>set1</code> and <code>set2</code> have the same members.<br />Order is not taken into account.</p><pre><code>assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], &#39;same members&#39;);\n</code></pre>",
      "summary": "<h3>.sameMembers(set1, set2, [message])</h3>\n",
      "body": "<p>Asserts that <code>set1</code> and <code>set2</code> have the same members.<br />Order is not taken into account.</p><pre><code>assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], &#39;same members&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3397,
    "codeStart": 3413,
    "code": "assert.sameMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg).to.have.same.members(set2);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "sameMembers",
      "string": "assert.sameMembers()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "sameDeepMembers",
        "html": "<p>sameDeepMembers</p>"
      },
      {
        "type": "param",
        "string": "{Array} set1",
        "name": "set1",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} set1</p>"
      },
      {
        "type": "param",
        "string": "{Array} set2",
        "name": "set2",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} set2</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.sameDeepMembers(set1, set2, [message])</h3>\n<p>Asserts that <code>set1</code> and <code>set2</code> have the same members - using a deep equality checking.<br />Order is not taken into account.</p><pre><code>assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], &#39;same deep members&#39;);\n</code></pre>",
      "summary": "<h3>.sameDeepMembers(set1, set2, [message])</h3>\n",
      "body": "<p>Asserts that <code>set1</code> and <code>set2</code> have the same members - using a deep equality checking.<br />Order is not taken into account.</p><pre><code>assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], &#39;same deep members&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3417,
    "codeStart": 3433,
    "code": "assert.sameDeepMembers = function (set1, set2, msg) {\n  new Assertion(set1, msg).to.have.same.deep.members(set2);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "sameDeepMembers",
      "string": "assert.sameDeepMembers()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "includeMembers",
        "html": "<p>includeMembers</p>"
      },
      {
        "type": "param",
        "string": "{Array} superset",
        "name": "superset",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} superset</p>"
      },
      {
        "type": "param",
        "string": "{Array} subset",
        "name": "subset",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} subset</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.includeMembers(superset, subset, [message])</h3>\n<p>Asserts that <code>subset</code> is included in <code>superset</code>.<br />Order is not taken into account.</p><pre><code>assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], &#39;include members&#39;);\n</code></pre>",
      "summary": "<h3>.includeMembers(superset, subset, [message])</h3>\n",
      "body": "<p>Asserts that <code>subset</code> is included in <code>superset</code>.<br />Order is not taken into account.</p><pre><code>assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], &#39;include members&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3437,
    "codeStart": 3453,
    "code": "assert.includeMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg).to.include.members(subset);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "includeMembers",
      "string": "assert.includeMembers()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "includeDeepMembers",
        "html": "<p>includeDeepMembers</p>"
      },
      {
        "type": "param",
        "string": "{Array} superset",
        "name": "superset",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} superset</p>"
      },
      {
        "type": "param",
        "string": "{Array} subset",
        "name": "subset",
        "description": "",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array} subset</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.includeDeepMembers(superset, subset, [message])</h3>\n<p>Asserts that <code>subset</code> is included in <code>superset</code> - using deep equality checking.<br />Order is not taken into account.<br />Duplicates are ignored.</p><pre><code>assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], &#39;include deep members&#39;);\n</code></pre>",
      "summary": "<h3>.includeDeepMembers(superset, subset, [message])</h3>\n",
      "body": "<p>Asserts that <code>subset</code> is included in <code>superset</code> - using deep equality checking.<br />Order is not taken into account.<br />Duplicates are ignored.</p><pre><code>assert.includeDeepMembers([ {a: 1}, {b: 2}, {c: 3} ], [ {b: 2}, {a: 1}, {b: 2} ], &#39;include deep members&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3457,
    "codeStart": 3474,
    "code": "assert.includeDeepMembers = function (superset, subset, msg) {\n  new Assertion(superset, msg).to.include.deep.members(subset);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "includeDeepMembers",
      "string": "assert.includeDeepMembers()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "oneOf",
        "html": "<p>oneOf</p>"
      },
      {
        "type": "param",
        "string": "{*} inList",
        "name": "inList",
        "description": "",
        "types": [],
        "typesDescription": "<code>*</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{*} inList</p>"
      },
      {
        "type": "param",
        "string": "{Array<*>} list",
        "name": "list",
        "description": "",
        "types": [
          "Array.<*>"
        ],
        "typesDescription": "<code>Array</code>.&lt;<code>*</code>&gt;",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Array&lt;*&gt;} list</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.oneOf(inList, list, [message])</h3>\n<p>Asserts that non-object, non-array value <code>inList</code> appears in the flat array <code>list</code>.</p><pre><code>assert.oneOf(1, [ 2, 1 ], &#39;Not found in list&#39;);\n</code></pre>",
      "summary": "<h3>.oneOf(inList, list, [message])</h3>\n",
      "body": "<p>Asserts that non-object, non-array value <code>inList</code> appears in the flat array <code>list</code>.</p><pre><code>assert.oneOf(1, [ 2, 1 ], &#39;Not found in list&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3478,
    "codeStart": 3493,
    "code": "assert.oneOf = function (inList, list, msg) {\n  new Assertion(inList, msg).to.be.oneOf(list);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "oneOf",
      "string": "assert.oneOf()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "changes",
        "html": "<p>changes</p>"
      },
      {
        "type": "param",
        "string": "{Function} modifier function",
        "name": "modifier",
        "description": "<p>function</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.changes(function, object, property)</h3>\n<p>Asserts that a function changes the value of a property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 22 };\nassert.changes(fn, obj, &#39;val&#39;);\n</code></pre>",
      "summary": "<h3>.changes(function, object, property)</h3>\n",
      "body": "<p>Asserts that a function changes the value of a property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 22 };\nassert.changes(fn, obj, &#39;val&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3497,
    "codeStart": 3515,
    "code": "assert.changes = function (fn, obj, prop) {\n  new Assertion(fn).to.change(obj, prop);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "changes",
      "string": "assert.changes()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "doesNotChange",
        "html": "<p>doesNotChange</p>"
      },
      {
        "type": "param",
        "string": "{Function} modifier function",
        "name": "modifier",
        "description": "<p>function</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.doesNotChange(function, object, property)</h3>\n<p>Asserts that a function does not changes the value of a property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { console.log(&#39;foo&#39;); };\nassert.doesNotChange(fn, obj, &#39;val&#39;);\n</code></pre>",
      "summary": "<h3>.doesNotChange(function, object, property)</h3>\n",
      "body": "<p>Asserts that a function does not changes the value of a property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { console.log(&#39;foo&#39;); };\nassert.doesNotChange(fn, obj, &#39;val&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3519,
    "codeStart": 3537,
    "code": "assert.doesNotChange = function (fn, obj, prop) {\n  new Assertion(fn).to.not.change(obj, prop);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "doesNotChange",
      "string": "assert.doesNotChange()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "increases",
        "html": "<p>increases</p>"
      },
      {
        "type": "param",
        "string": "{Function} modifier function",
        "name": "modifier",
        "description": "<p>function</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.increases(function, object, property)</h3>\n<p>Asserts that a function increases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 13 };\nassert.increases(fn, obj, &#39;val&#39;);\n</code></pre>",
      "summary": "<h3>.increases(function, object, property)</h3>\n",
      "body": "<p>Asserts that a function increases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 13 };\nassert.increases(fn, obj, &#39;val&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3541,
    "codeStart": 3559,
    "code": "assert.increases = function (fn, obj, prop) {\n  new Assertion(fn).to.increase(obj, prop);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "increases",
      "string": "assert.increases()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "doesNotIncrease",
        "html": "<p>doesNotIncrease</p>"
      },
      {
        "type": "param",
        "string": "{Function} modifier function",
        "name": "modifier",
        "description": "<p>function</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.doesNotIncrease(function, object, property)</h3>\n<p>Asserts that a function does not increase object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 8 };\nassert.doesNotIncrease(fn, obj, &#39;val&#39;);\n</code></pre>",
      "summary": "<h3>.doesNotIncrease(function, object, property)</h3>\n",
      "body": "<p>Asserts that a function does not increase object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 8 };\nassert.doesNotIncrease(fn, obj, &#39;val&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3563,
    "codeStart": 3581,
    "code": "assert.doesNotIncrease = function (fn, obj, prop) {\n  new Assertion(fn).to.not.increase(obj, prop);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "doesNotIncrease",
      "string": "assert.doesNotIncrease()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "decreases",
        "html": "<p>decreases</p>"
      },
      {
        "type": "param",
        "string": "{Function} modifier function",
        "name": "modifier",
        "description": "<p>function</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.decreases(function, object, property)</h3>\n<p>Asserts that a function decreases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 5 };\nassert.decreases(fn, obj, &#39;val&#39;);\n</code></pre>",
      "summary": "<h3>.decreases(function, object, property)</h3>\n",
      "body": "<p>Asserts that a function decreases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 5 };\nassert.decreases(fn, obj, &#39;val&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3585,
    "codeStart": 3603,
    "code": "assert.decreases = function (fn, obj, prop) {\n  new Assertion(fn).to.decrease(obj, prop);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "decreases",
      "string": "assert.decreases()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "doesNotDecrease",
        "html": "<p>doesNotDecrease</p>"
      },
      {
        "type": "param",
        "string": "{Function} modifier function",
        "name": "modifier",
        "description": "<p>function</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} property name",
        "name": "property",
        "description": "<p>name</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.doesNotDecrease(function, object, property)</h3>\n<p>Asserts that a function does not decreases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 15 };\nassert.doesNotDecrease(fn, obj, &#39;val&#39;);\n</code></pre>",
      "summary": "<h3>.doesNotDecrease(function, object, property)</h3>\n",
      "body": "<p>Asserts that a function does not decreases an object property</p><pre><code>var obj = { val: 10 };\nvar fn = function() { obj.val = 15 };\nassert.doesNotDecrease(fn, obj, &#39;val&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3607,
    "codeStart": 3625,
    "code": "assert.doesNotDecrease = function (fn, obj, prop) {\n  new Assertion(fn).to.not.decrease(obj, prop);\n}",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "doesNotDecrease",
      "string": "assert.doesNotDecrease()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "ifError",
        "html": "<p>ifError</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.ifError(object)</h3>\n<p>Asserts if value is not a false value, and throws if it is a true value.<br />This is added to allow for chai to be a drop-in replacement for Node&#39;s<br />assert class.</p><pre><code>var err = new Error(&#39;I am a custom error&#39;);\nassert.ifError(err); // Rethrows err!\n</code></pre>",
      "summary": "<h3>.ifError(object)</h3>\n",
      "body": "<p>Asserts if value is not a false value, and throws if it is a true value.<br />This is added to allow for chai to be a drop-in replacement for Node&#39;s<br />assert class.</p><pre><code>var err = new Error(&#39;I am a custom error&#39;);\nassert.ifError(err); // Rethrows err!\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 3629,
    "codeStart": 3645,
    "code": "assert.ifError = function (val) {\n  if (val) {\n    throw(val);\n  }\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "ifError",
      "string": "assert.ifError()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isExtensible",
        "html": "<p>isExtensible</p>"
      },
      {
        "type": "alias",
        "string": "extensible",
        "html": "<p>extensible</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isExtensible(object)</h3>\n<p>Asserts that <code>object</code> is extensible (can have new properties added to it).</p><pre><code>assert.isExtensible({});\n</code></pre>",
      "summary": "<h3>.isExtensible(object)</h3>\n",
      "body": "<p>Asserts that <code>object</code> is extensible (can have new properties added to it).</p><pre><code>assert.isExtensible({});\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3651,
    "codeStart": 3666,
    "code": "assert.isExtensible = function (obj, msg) {\n  new Assertion(obj, msg).to.be.extensible;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isExtensible",
      "string": "assert.isExtensible()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotExtensible",
        "html": "<p>isNotExtensible</p>"
      },
      {
        "type": "alias",
        "string": "notExtensible",
        "html": "<p>notExtensible</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotExtensible(object)</h3>\n<p>Asserts that <code>object</code> is <em>not</em> extensible.</p><pre><code>var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freese({});\n\nassert.isNotExtensible(nonExtensibleObject);\nassert.isNotExtensible(sealedObject);\nassert.isNotExtensible(frozenObject);\n</code></pre>",
      "summary": "<h3>.isNotExtensible(object)</h3>\n",
      "body": "<p>Asserts that <code>object</code> is <em>not</em> extensible.</p><pre><code>var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freese({});\n\nassert.isNotExtensible(nonExtensibleObject);\nassert.isNotExtensible(sealedObject);\nassert.isNotExtensible(frozenObject);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3670,
    "codeStart": 3691,
    "code": "assert.isNotExtensible = function (obj, msg) {\n  new Assertion(obj, msg).to.not.be.extensible;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotExtensible",
      "string": "assert.isNotExtensible()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isSealed",
        "html": "<p>isSealed</p>"
      },
      {
        "type": "alias",
        "string": "sealed",
        "html": "<p>sealed</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isSealed(object)</h3>\n<p>Asserts that <code>object</code> is sealed (cannot have new properties added to it<br />and its existing properties cannot be removed).</p><pre><code>var sealedObject = Object.seal({});\nvar frozenObject = Object.seal({});\n\nassert.isSealed(sealedObject);\nassert.isSealed(frozenObject);\n</code></pre>",
      "summary": "<h3>.isSealed(object)</h3>\n",
      "body": "<p>Asserts that <code>object</code> is sealed (cannot have new properties added to it<br />and its existing properties cannot be removed).</p><pre><code>var sealedObject = Object.seal({});\nvar frozenObject = Object.seal({});\n\nassert.isSealed(sealedObject);\nassert.isSealed(frozenObject);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3695,
    "codeStart": 3715,
    "code": "assert.isSealed = function (obj, msg) {\n  new Assertion(obj, msg).to.be.sealed;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isSealed",
      "string": "assert.isSealed()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotSealed",
        "html": "<p>isNotSealed</p>"
      },
      {
        "type": "alias",
        "string": "notSealed",
        "html": "<p>notSealed</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotSealed(object)</h3>\n<p>Asserts that <code>object</code> is <em>not</em> sealed.</p><pre><code>assert.isNotSealed({});\n</code></pre>",
      "summary": "<h3>.isNotSealed(object)</h3>\n",
      "body": "<p>Asserts that <code>object</code> is <em>not</em> sealed.</p><pre><code>assert.isNotSealed({});\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3719,
    "codeStart": 3734,
    "code": "assert.isNotSealed = function (obj, msg) {\n  new Assertion(obj, msg).to.not.be.sealed;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotSealed",
      "string": "assert.isNotSealed()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isFrozen",
        "html": "<p>isFrozen</p>"
      },
      {
        "type": "alias",
        "string": "frozen",
        "html": "<p>frozen</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isFrozen(object)</h3>\n<p>Asserts that <code>object</code> is frozen (cannot have new properties added to it<br />and its existing properties cannot be modified).</p><pre><code>var frozenObject = Object.freeze({});\nassert.frozen(frozenObject);\n</code></pre>",
      "summary": "<h3>.isFrozen(object)</h3>\n",
      "body": "<p>Asserts that <code>object</code> is frozen (cannot have new properties added to it<br />and its existing properties cannot be modified).</p><pre><code>var frozenObject = Object.freeze({});\nassert.frozen(frozenObject);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3738,
    "codeStart": 3755,
    "code": "assert.isFrozen = function (obj, msg) {\n  new Assertion(obj, msg).to.be.frozen;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isFrozen",
      "string": "assert.isFrozen()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "isNotFrozen",
        "html": "<p>isNotFrozen</p>"
      },
      {
        "type": "alias",
        "string": "notFrozen",
        "html": "<p>notFrozen</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "param",
        "string": "{String} message _optional_",
        "name": "message",
        "description": "<p><em>optional</em></p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Assert",
        "html": "<p>Assert</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.isNotFrozen(object)</h3>\n<p>Asserts that <code>object</code> is <em>not</em> frozen.</p><pre><code>assert.isNotFrozen({});\n</code></pre>",
      "summary": "<h3>.isNotFrozen(object)</h3>\n",
      "body": "<p>Asserts that <code>object</code> is <em>not</em> frozen.</p><pre><code>assert.isNotFrozen({});\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3759,
    "codeStart": 3774,
    "code": "assert.isNotFrozen = function (obj, msg) {\n  new Assertion(obj, msg).to.not.be.frozen;\n};",
    "ctx": {
      "type": "method",
      "receiver": "assert",
      "name": "isNotFrozen",
      "string": "assert.isNotFrozen()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Aliases.</p>",
      "summary": "<p>Aliases.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 3778,
    "codeStart": 3782,
    "code": "(function alias(name, as){\n  assert[as] = assert[name];\n  return alias;\n})\n('isOk', 'ok')\n('isNotOk', 'notOk')\n('throws', 'throw')\n('throws', 'Throw')\n('isExtensible', 'extensible')\n('isNotExtensible', 'notExtensible')\n('isSealed', 'sealed')\n('isNotSealed', 'notSealed')\n('isFrozen', 'frozen')\n('isNotFrozen', 'notFrozen');\n};\n\n},{}],7:[function(require,module,exports){",
    "ctx": false
  },
  {
    "tags": [],
    "description": {
      "full": "<p>chai<br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#x6a;&#x61;&#x6b;&#x65;&#x40;&#97;&#108;&#111;&#103;&#x69;&#99;&#97;&#x6c;&#112;&#97;&#114;&#x61;&#100;&#x6f;&#x78;&#46;&#99;&#x6f;&#x6d;\">&#x6a;&#x61;&#x6b;&#x65;&#x40;&#97;&#108;&#111;&#103;&#x69;&#99;&#97;&#x6c;&#112;&#97;&#114;&#x61;&#100;&#x6f;&#x78;&#46;&#99;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>chai<br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x6a;&#97;&#x6b;&#101;&#x40;&#97;&#108;&#111;&#x67;&#105;&#99;&#x61;&#x6c;&#112;&#x61;&#114;&#97;&#100;&#111;&#x78;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6a;&#97;&#x6b;&#101;&#x40;&#97;&#108;&#111;&#x67;&#105;&#99;&#x61;&#x6c;&#112;&#x61;&#114;&#97;&#100;&#111;&#x78;&#x2e;&#x63;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 3799,
    "codeStart": 3805,
    "code": "module.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "fail",
        "html": "<p>fail</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "param",
        "string": "{String} operator",
        "name": "operator",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} operator</p>"
      },
      {
        "type": "namespace",
        "string": "Expect",
        "html": "<p>Expect</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.fail(actual, expected, [message], [operator])</h3>\n<p>Throw a failure.</p>",
      "summary": "<h3>.fail(actual, expected, [message], [operator])</h3>\n",
      "body": "<p>Throw a failure.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3810,
    "codeStart": 3824,
    "code": "chai.expect.fail = function (actual, expected, message, operator) {\n  message = message || 'expect.fail()';\n  throw new chai.AssertionError(message, {\n      actual: actual\n    , expected: expected\n    , operator: operator\n  }, chai.expect.fail);\n};\n};\n\n},{}],8:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "chai.expect",
      "name": "fail",
      "string": "chai.expect.fail()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>chai<br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#x6a;&#x61;&#x6b;&#x65;&#x40;&#x61;&#108;&#111;&#x67;&#x69;&#x63;&#x61;&#108;&#x70;&#x61;&#x72;&#x61;&#x64;&#x6f;&#120;&#46;&#99;&#111;&#x6d;\">&#x6a;&#x61;&#x6b;&#x65;&#x40;&#x61;&#108;&#111;&#x67;&#x69;&#x63;&#x61;&#108;&#x70;&#x61;&#x72;&#x61;&#x64;&#x6f;&#120;&#46;&#99;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>chai<br />Copyright(c) 2011-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#58;&#106;&#x61;&#x6b;&#101;&#64;&#97;&#108;&#x6f;&#103;&#x69;&#x63;&#x61;&#x6c;&#x70;&#97;&#x72;&#97;&#x64;&#111;&#120;&#x2e;&#99;&#x6f;&#x6d;\">&#106;&#x61;&#x6b;&#101;&#64;&#97;&#108;&#x6f;&#103;&#x69;&#x63;&#x61;&#x6c;&#x70;&#97;&#x72;&#97;&#x64;&#111;&#120;&#x2e;&#99;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 3835,
    "codeStart": 3841,
    "code": "module.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "fail",
        "html": "<p>fail</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "param",
        "string": "{String} operator",
        "name": "operator",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} operator</p>"
      },
      {
        "type": "namespace",
        "string": "Should",
        "html": "<p>Should</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.fail(actual, expected, [message], [operator])</h3>\n<p>Throw a failure.</p>",
      "summary": "<h3>.fail(actual, expected, [message], [operator])</h3>\n",
      "body": "<p>Throw a failure.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3875,
    "codeStart": 3889,
    "code": "should.fail = function (actual, expected, message, operator) {\n  message = message || 'should.fail()';\n  throw new chai.AssertionError(message, {\n      actual: actual\n    , expected: expected\n    , operator: operator\n  }, should.fail);\n};",
    "ctx": {
      "type": "method",
      "receiver": "should",
      "name": "fail",
      "string": "should.fail()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "equal",
        "html": "<p>equal</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Should",
        "html": "<p>Should</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.equal(actual, expected, [message])</h3>\n<p>Asserts non-strict equality (<code>==</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>should.equal(3, &#39;3&#39;, &#39;== coerces values to strings&#39;);\n</code></pre>",
      "summary": "<h3>.equal(actual, expected, [message])</h3>\n",
      "body": "<p>Asserts non-strict equality (<code>==</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>should.equal(3, &#39;3&#39;, &#39;== coerces values to strings&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3898,
    "codeStart": 3913,
    "code": "should.equal = function (val1, val2, msg) {\n  new Assertion(val1, msg).to.equal(val2);\n};",
    "ctx": {
      "type": "method",
      "receiver": "should",
      "name": "equal",
      "string": "should.equal()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "throw",
        "html": "<p>throw</p>"
      },
      {
        "type": "alias",
        "string": "Throw",
        "html": "<p>Throw</p>"
      },
      {
        "type": "param",
        "string": "{Function} function",
        "name": "function",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} function</p>"
      },
      {
        "type": "param",
        "string": "{ErrorConstructor} constructor",
        "name": "constructor",
        "description": "",
        "types": [
          "ErrorConstructor"
        ],
        "typesDescription": "<a href=\"ErrorConstructor.html\">ErrorConstructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ErrorConstructor} constructor</p>"
      },
      {
        "type": "param",
        "string": "{RegExp} regexp",
        "name": "regexp",
        "description": "",
        "types": [
          "RegExp"
        ],
        "typesDescription": "<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp} regexp</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "see",
        "string": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "title": "",
        "url": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "html": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types</a></p>"
      },
      {
        "type": "namespace",
        "string": "Should",
        "html": "<p>Should</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.throw(function, [constructor/string/regexp], [string/regexp], [message])</h3>\n<p>Asserts that <code>function</code> will throw an error that is an instance of<br /><code>constructor</code>, or alternately that it will throw an error with message<br />matching <code>regexp</code>.</p><pre><code>should.throw(fn, &#39;function throws a reference error&#39;);\nshould.throw(fn, /function throws a reference error/);\nshould.throw(fn, ReferenceError);\nshould.throw(fn, ReferenceError, &#39;function throws a reference error&#39;);\nshould.throw(fn, ReferenceError, /function throws a reference error/);\n</code></pre>",
      "summary": "<h3>.throw(function, [constructor/string/regexp], [string/regexp], [message])</h3>\n",
      "body": "<p>Asserts that <code>function</code> will throw an error that is an instance of<br /><code>constructor</code>, or alternately that it will throw an error with message<br />matching <code>regexp</code>.</p><pre><code>should.throw(fn, &#39;function throws a reference error&#39;);\nshould.throw(fn, /function throws a reference error/);\nshould.throw(fn, ReferenceError);\nshould.throw(fn, ReferenceError, &#39;function throws a reference error&#39;);\nshould.throw(fn, ReferenceError, /function throws a reference error/);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3917,
    "codeStart": 3941,
    "code": "should.Throw = function (fn, errt, errs, msg) {\n  new Assertion(fn, msg).to.Throw(errt, errs);\n};",
    "ctx": {
      "type": "method",
      "receiver": "should",
      "name": "Throw",
      "string": "should.Throw()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "exist",
        "html": "<p>exist</p>"
      },
      {
        "type": "namespace",
        "string": "Should",
        "html": "<p>Should</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.exist</h3>\n<p>Asserts that the target is neither <code>null</code> nor <code>undefined</code>.</p><pre><code>var foo = &#39;hi&#39;;\n\nshould.exist(foo, &#39;foo exists&#39;);\n</code></pre>",
      "summary": "<h3>.exist</h3>\n",
      "body": "<p>Asserts that the target is neither <code>null</code> nor <code>undefined</code>.</p><pre><code>var foo = &#39;hi&#39;;\n\nshould.exist(foo, &#39;foo exists&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3945,
    "codeStart": 3959,
    "code": "should.exist = function (val, msg) {\n  new Assertion(val, msg).to.exist;\n}\n\n// negation\nshould.not = {}",
    "ctx": {
      "type": "method",
      "receiver": "should",
      "name": "exist",
      "string": "should.exist()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "not.equal",
        "html": "<p>not.equal</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} actual",
        "name": "actual",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} actual</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} expected",
        "name": "expected",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} expected</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "namespace",
        "string": "Should",
        "html": "<p>Should</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.not.equal(actual, expected, [message])</h3>\n<p>Asserts non-strict inequality (<code>!=</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>should.not.equal(3, 4, &#39;these numbers are not equal&#39;);\n</code></pre>",
      "summary": "<h3>.not.equal(actual, expected, [message])</h3>\n",
      "body": "<p>Asserts non-strict inequality (<code>!=</code>) of <code>actual</code> and <code>expected</code>.</p><pre><code>should.not.equal(3, 4, &#39;these numbers are not equal&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3966,
    "codeStart": 3981,
    "code": "should.not.equal = function (val1, val2, msg) {\n  new Assertion(val1, msg).to.not.equal(val2);\n};",
    "ctx": {
      "type": "method",
      "receiver": "should.not",
      "name": "equal",
      "string": "should.not.equal()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "not.throw",
        "html": "<p>not.throw</p>"
      },
      {
        "type": "alias",
        "string": "not.Throw",
        "html": "<p>not.Throw</p>"
      },
      {
        "type": "param",
        "string": "{Function} function",
        "name": "function",
        "description": "",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Function} function</p>"
      },
      {
        "type": "param",
        "string": "{ErrorConstructor} constructor",
        "name": "constructor",
        "description": "",
        "types": [
          "ErrorConstructor"
        ],
        "typesDescription": "<a href=\"ErrorConstructor.html\">ErrorConstructor</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{ErrorConstructor} constructor</p>"
      },
      {
        "type": "param",
        "string": "{RegExp} regexp",
        "name": "regexp",
        "description": "",
        "types": [
          "RegExp"
        ],
        "typesDescription": "<code>RegExp</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp} regexp</p>"
      },
      {
        "type": "param",
        "string": "{String} message",
        "name": "message",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} message</p>"
      },
      {
        "type": "see",
        "string": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "title": "",
        "url": "https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types",
        "html": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types</a></p>"
      },
      {
        "type": "namespace",
        "string": "Should",
        "html": "<p>Should</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.throw(function, [constructor/regexp], [message])</h3>\n<p>Asserts that <code>function</code> will <em>not</em> throw an error that is an instance of<br /><code>constructor</code>, or alternately that it will not throw an error with message<br />matching <code>regexp</code>.</p><pre><code>should.not.throw(fn, Error, &#39;function does not throw&#39;);\n</code></pre>",
      "summary": "<h3>.throw(function, [constructor/regexp], [message])</h3>\n",
      "body": "<p>Asserts that <code>function</code> will <em>not</em> throw an error that is an instance of<br /><code>constructor</code>, or alternately that it will not throw an error with message<br />matching <code>regexp</code>.</p><pre><code>should.not.throw(fn, Error, &#39;function does not throw&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 3985,
    "codeStart": 4005,
    "code": "should.not.Throw = function (fn, errt, errs, msg) {\n  new Assertion(fn, msg).to.not.Throw(errt, errs);\n};",
    "ctx": {
      "type": "method",
      "receiver": "should.not",
      "name": "Throw",
      "string": "should.not.Throw()"
    }
  },
  {
    "tags": [
      {
        "type": "name",
        "string": "not.exist",
        "html": "<p>not.exist</p>"
      },
      {
        "type": "namespace",
        "string": "Should",
        "html": "<p>Should</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.not.exist</h3>\n<p>Asserts that the target is neither <code>null</code> nor <code>undefined</code>.</p><pre><code>var bar = null;\n\nshould.not.exist(bar, &#39;bar does not exist&#39;);\n</code></pre>",
      "summary": "<h3>.not.exist</h3>\n",
      "body": "<p>Asserts that the target is neither <code>null</code> nor <code>undefined</code>.</p><pre><code>var bar = null;\n\nshould.not.exist(bar, &#39;bar does not exist&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4009,
    "codeStart": 4023,
    "code": "should.not.exist = function (val, msg) {\n  new Assertion(val, msg).to.not.exist;\n}\n\nshould['throw'] = should['Throw'];\nshould.not['throw'] = should.not['Throw'];\n\nreturn should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n},{}],9:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "should.not",
      "name": "exist",
      "string": "should.not.exist()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - addChainingMethod utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x6a;&#x61;&#107;&#101;&#64;&#x61;&#x6c;&#x6f;&#x67;&#105;&#x63;&#97;&#108;&#x70;&#x61;&#x72;&#97;&#x64;&#111;&#x78;&#x2e;&#x63;&#x6f;&#109;\">&#x6a;&#x61;&#107;&#101;&#64;&#x61;&#x6c;&#x6f;&#x67;&#105;&#x63;&#97;&#108;&#x70;&#x61;&#x72;&#97;&#x64;&#111;&#x78;&#x2e;&#x63;&#x6f;&#109;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - addChainingMethod utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x6a;&#97;&#x6b;&#101;&#64;&#x61;&#x6c;&#111;&#103;&#105;&#x63;&#97;&#108;&#x70;&#97;&#x72;&#97;&#x64;&#x6f;&#120;&#x2e;&#99;&#111;&#x6d;\">&#x6a;&#97;&#x6b;&#101;&#64;&#x61;&#x6c;&#111;&#103;&#105;&#x63;&#97;&#108;&#x70;&#97;&#x72;&#97;&#x64;&#x6f;&#120;&#x2e;&#99;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4038,
    "codeStart": 4043
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Module dependencies</p>",
      "summary": "<p>Module dependencies</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4044,
    "codeStart": 4048,
    "code": "var transferFlags = require('./transferFlags');\nvar flag = require('./flag');\nvar config = require('../config');",
    "ctx": {
      "type": "declaration",
      "name": "transferFlags",
      "value": "require('./transferFlags')",
      "string": "transferFlags"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Module variables</p>",
      "summary": "<p>Module variables</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4052,
    "codeStart": 4056,
    "code": "// Check whether `__proto__` is supported\nvar hasProtoSupport = '__proto__' in Object;\n\n// Without `__proto__` support, this module will need to add properties to a function.\n// However, some Function.prototype methods cannot be overwritten,\n// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).\nvar excludeNames = /^(?:length|name|arguments|caller)$/;\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} ctx object to which the method is added",
        "name": "ctx",
        "description": "<p>object to which the method is added</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} name of method to add",
        "name": "name",
        "description": "<p>of method to add</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Function} method function to be used for `name`, when called",
        "name": "method",
        "description": "<p>function to be used for <code>name</code>, when called</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Function} chainingBehavior function to be called every time the property is accessed",
        "name": "chainingBehavior",
        "description": "<p>function to be called every time the property is accessed</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "addChainableMethod",
        "html": "<p>addChainableMethod</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>addChainableMethod (ctx, name, method, chainingBehavior)</h3>\n<p>Adds a method to an object, such that the method can also be chained.</p><pre><code>utils.addChainableMethod(chai.Assertion.prototype, &#39;foo&#39;, function (str) {\n  var obj = utils.flag(this, &#39;object&#39;);\n  new chai.Assertion(obj).to.be.equal(str);\n});\n</code></pre><p>Can also be accessed directly from <code>chai.Assertion</code>.</p><pre><code>chai.Assertion.addChainableMethod(&#39;foo&#39;, fn, chainingBehavior);\n</code></pre><p>The result can then be used as both a method assertion, executing both <code>method</code> and<br /><code>chainingBehavior</code>, or as a language chain, which only executes <code>chainingBehavior</code>.</p><pre><code>expect(fooStr).to.be.foo(&#39;bar&#39;);\nexpect(fooStr).to.be.foo.equal(&#39;foo&#39;);\n</code></pre>",
      "summary": "<h3>addChainableMethod (ctx, name, method, chainingBehavior)</h3>\n",
      "body": "<p>Adds a method to an object, such that the method can also be chained.</p><pre><code>utils.addChainableMethod(chai.Assertion.prototype, &#39;foo&#39;, function (str) {\n  var obj = utils.flag(this, &#39;object&#39;);\n  new chai.Assertion(obj).to.be.equal(str);\n});\n</code></pre><p>Can also be accessed directly from <code>chai.Assertion</code>.</p><pre><code>chai.Assertion.addChainableMethod(&#39;foo&#39;, fn, chainingBehavior);\n</code></pre><p>The result can then be used as both a method assertion, executing both <code>method</code> and<br /><code>chainingBehavior</code>, or as a language chain, which only executes <code>chainingBehavior</code>.</p><pre><code>expect(fooStr).to.be.foo(&#39;bar&#39;);\nexpect(fooStr).to.be.foo.equal(&#39;foo&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4068,
    "codeStart": 4097,
    "code": "module.exports = function (ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var assert = function assert() {\n          var old_ssfi = flag(this, 'ssfi');\n          if (old_ssfi && config.includeStack === false)\n            flag(this, 'ssfi', assert);\n          var result = chainableBehavior.method.apply(this, arguments);\n          return result === undefined ? this : result;\n        };\n\n        // Use `__proto__` if available\n        if (hasProtoSupport) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = assert.__proto__ = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (!excludeNames.test(asserterName)) {\n              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n              Object.defineProperty(assert, asserterName, pd);\n            }\n          });\n        }\n\n        transferFlags(this, assert);\n        return assert;\n      }\n    , configurable: true\n  });\n};\n\n},{\"../config\":4,\"./flag\":13,\"./transferFlags\":29}],10:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - addMethod utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#106;&#97;&#107;&#x65;&#64;&#x61;&#x6c;&#x6f;&#103;&#x69;&#x63;&#x61;&#108;&#112;&#97;&#114;&#97;&#x64;&#x6f;&#120;&#46;&#x63;&#x6f;&#x6d;\">&#106;&#97;&#107;&#x65;&#64;&#x61;&#x6c;&#x6f;&#103;&#x69;&#x63;&#x61;&#108;&#112;&#97;&#114;&#97;&#x64;&#x6f;&#120;&#46;&#x63;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - addMethod utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#106;&#x61;&#x6b;&#x65;&#64;&#97;&#108;&#111;&#103;&#105;&#99;&#97;&#x6c;&#112;&#97;&#114;&#x61;&#x64;&#x6f;&#120;&#46;&#99;&#x6f;&#x6d;\">&#106;&#x61;&#x6b;&#x65;&#64;&#97;&#108;&#111;&#103;&#105;&#99;&#97;&#x6c;&#112;&#97;&#114;&#x61;&#x64;&#x6f;&#120;&#46;&#99;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4152,
    "codeStart": 4158,
    "code": "var config = require('../config');",
    "ctx": {
      "type": "declaration",
      "name": "config",
      "value": "require('../config')",
      "string": "config"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} ctx object to which the method is added",
        "name": "ctx",
        "description": "<p>object to which the method is added</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} name of method to add",
        "name": "name",
        "description": "<p>of method to add</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Function} method function to be used for name",
        "name": "method",
        "description": "<p>function to be used for name</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "addMethod",
        "html": "<p>addMethod</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.addMethod (ctx, name, method)</h3>\n<p>Adds a method to the prototype of an object.</p><pre><code>utils.addMethod(chai.Assertion.prototype, &#39;foo&#39;, function (str) {\n  var obj = utils.flag(this, &#39;object&#39;);\n  new chai.Assertion(obj).to.be.equal(str);\n});\n</code></pre><p>Can also be accessed directly from <code>chai.Assertion</code>.</p><pre><code>chai.Assertion.addMethod(&#39;foo&#39;, fn);\n</code></pre><p>Then can be used as any other assertion.</p><pre><code>expect(fooStr).to.be.foo(&#39;bar&#39;);\n</code></pre>",
      "summary": "<h3>.addMethod (ctx, name, method)</h3>\n",
      "body": "<p>Adds a method to the prototype of an object.</p><pre><code>utils.addMethod(chai.Assertion.prototype, &#39;foo&#39;, function (str) {\n  var obj = utils.flag(this, &#39;object&#39;);\n  new chai.Assertion(obj).to.be.equal(str);\n});\n</code></pre><p>Can also be accessed directly from <code>chai.Assertion</code>.</p><pre><code>chai.Assertion.addMethod(&#39;foo&#39;, fn);\n</code></pre><p>Then can be used as any other assertion.</p><pre><code>expect(fooStr).to.be.foo(&#39;bar&#39;);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4160,
    "codeStart": 4185,
    "code": "var flag = require('./flag');\n\nmodule.exports = function (ctx, name, method) {\n  ctx[name] = function () {\n    var old_ssfi = flag(this, 'ssfi');\n    if (old_ssfi && config.includeStack === false)\n      flag(this, 'ssfi', ctx[name]);\n    var result = method.apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n},{\"../config\":4,\"./flag\":13}],11:[function(require,module,exports){",
    "ctx": {
      "type": "declaration",
      "name": "flag",
      "value": "require('./flag')",
      "string": "flag"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - addProperty utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#106;&#x61;&#107;&#x65;&#64;&#x61;&#108;&#x6f;&#x67;&#x69;&#99;&#97;&#108;&#112;&#97;&#x72;&#97;&#100;&#111;&#x78;&#46;&#x63;&#111;&#x6d;\">&#106;&#x61;&#107;&#x65;&#64;&#x61;&#108;&#x6f;&#x67;&#x69;&#99;&#97;&#108;&#112;&#97;&#x72;&#97;&#100;&#111;&#x78;&#46;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - addProperty utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#x6a;&#x61;&#107;&#101;&#64;&#x61;&#x6c;&#x6f;&#x67;&#x69;&#99;&#97;&#108;&#x70;&#97;&#114;&#97;&#100;&#x6f;&#x78;&#46;&#99;&#111;&#109;\">&#x6a;&#x61;&#107;&#101;&#64;&#x61;&#x6c;&#x6f;&#x67;&#x69;&#99;&#97;&#108;&#x70;&#97;&#114;&#97;&#100;&#x6f;&#x78;&#46;&#99;&#111;&#109;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4198,
    "codeStart": 4204,
    "code": "var config = require('../config');\nvar flag = require('./flag');",
    "ctx": {
      "type": "declaration",
      "name": "config",
      "value": "require('../config')",
      "string": "config"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} ctx object to which the property is added",
        "name": "ctx",
        "description": "<p>object to which the property is added</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} name of property to add",
        "name": "name",
        "description": "<p>of property to add</p>",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Function} getter function to be used for name",
        "name": "getter",
        "description": "<p>function to be used for name</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "addProperty",
        "html": "<p>addProperty</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>addProperty (ctx, name, getter)</h3>\n<p>Adds a property to the prototype of an object.</p><pre><code>utils.addProperty(chai.Assertion.prototype, &#39;foo&#39;, function () {\n  var obj = utils.flag(this, &#39;object&#39;);\n  new chai.Assertion(obj).to.be.instanceof(Foo);\n});\n</code></pre><p>Can also be accessed directly from <code>chai.Assertion</code>.</p><pre><code>chai.Assertion.addProperty(&#39;foo&#39;, fn);\n</code></pre><p>Then can be used as any other assertion.</p><pre><code>expect(myFoo).to.be.foo;\n</code></pre>",
      "summary": "<h3>addProperty (ctx, name, getter)</h3>\n",
      "body": "<p>Adds a property to the prototype of an object.</p><pre><code>utils.addProperty(chai.Assertion.prototype, &#39;foo&#39;, function () {\n  var obj = utils.flag(this, &#39;object&#39;);\n  new chai.Assertion(obj).to.be.instanceof(Foo);\n});\n</code></pre><p>Can also be accessed directly from <code>chai.Assertion</code>.</p><pre><code>chai.Assertion.addProperty(&#39;foo&#39;, fn);\n</code></pre><p>Then can be used as any other assertion.</p><pre><code>expect(myFoo).to.be.foo;\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4207,
    "codeStart": 4233,
    "code": "module.exports = function (ctx, name, getter) {\n  Object.defineProperty(ctx, name,\n    { get: function addProperty() {\n        var old_ssfi = flag(this, 'ssfi');\n        if (old_ssfi && config.includeStack === false)\n          flag(this, 'ssfi', addProperty);\n\n        var result = getter.call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n},{\"../config\":4,\"./flag\":13}],12:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - expectTypes utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x6a;&#x61;&#x6b;&#101;&#x40;&#97;&#108;&#x6f;&#103;&#105;&#99;&#97;&#108;&#x70;&#97;&#114;&#x61;&#x64;&#111;&#120;&#46;&#x63;&#x6f;&#x6d;\">&#x6a;&#x61;&#x6b;&#101;&#x40;&#97;&#108;&#x6f;&#103;&#105;&#99;&#97;&#108;&#x70;&#97;&#114;&#x61;&#x64;&#111;&#120;&#46;&#x63;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - expectTypes utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#x6a;&#97;&#x6b;&#x65;&#x40;&#97;&#108;&#111;&#103;&#105;&#99;&#97;&#x6c;&#x70;&#x61;&#114;&#97;&#100;&#111;&#120;&#46;&#99;&#x6f;&#109;\">&#x6a;&#97;&#x6b;&#x65;&#x40;&#97;&#108;&#111;&#103;&#105;&#99;&#97;&#x6c;&#x70;&#x61;&#114;&#97;&#100;&#111;&#120;&#46;&#99;&#x6f;&#109;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4248,
    "codeStart": 4253
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} obj constructed Assertion",
        "name": "obj",
        "description": "<p>constructed Assertion</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Array} type A list of allowed types for this assertion",
        "name": "type",
        "description": "<p>A list of allowed types for this assertion</p>",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "expectTypes",
        "html": "<p>expectTypes</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>expectTypes(obj, types)</h3>\n<p>Ensures that the object being tested against is of a valid type.</p><pre><code>utils.expectTypes(this, [&#39;array&#39;, &#39;object&#39;, &#39;string&#39;]);\n</code></pre>",
      "summary": "<h3>expectTypes(obj, types)</h3>\n",
      "body": "<p>Ensures that the object being tested against is of a valid type.</p><pre><code>utils.expectTypes(this, [&#39;array&#39;, &#39;object&#39;, &#39;string&#39;]);\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4254,
    "codeStart": 4268,
    "code": "var AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function (obj, types) {\n  var obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lirum, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  if (!types.some(function (expected) { return type(obj) === expected; })) {\n    throw new AssertionError(\n      'object tested must be ' + str + ', but ' + type(obj) + ' given'\n    );\n  }\n};\n\n},{\"./flag\":13,\"assertion-error\":30,\"type-detect\":35}],13:[function(require,module,exports){",
    "ctx": {
      "type": "declaration",
      "name": "AssertionError",
      "value": "require('assertion-error')",
      "string": "AssertionError"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - flag utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#x6a;&#x61;&#x6b;&#101;&#x40;&#97;&#108;&#111;&#x67;&#x69;&#99;&#97;&#x6c;&#x70;&#97;&#x72;&#x61;&#x64;&#111;&#120;&#x2e;&#99;&#x6f;&#x6d;\">&#x6a;&#x61;&#x6b;&#101;&#x40;&#97;&#108;&#111;&#x67;&#x69;&#99;&#97;&#x6c;&#x70;&#97;&#x72;&#x61;&#x64;&#111;&#120;&#x2e;&#99;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - flag utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#97;&#105;&#108;&#116;&#111;&#58;&#x6a;&#x61;&#107;&#101;&#x40;&#97;&#x6c;&#111;&#103;&#x69;&#x63;&#97;&#x6c;&#x70;&#x61;&#x72;&#97;&#x64;&#x6f;&#x78;&#46;&#99;&#111;&#x6d;\">&#x6a;&#x61;&#107;&#101;&#x40;&#97;&#x6c;&#111;&#103;&#x69;&#x63;&#97;&#x6c;&#x70;&#x61;&#x72;&#97;&#x64;&#x6f;&#x78;&#46;&#99;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4292,
    "codeStart": 4297
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} object constructed Assertion",
        "name": "object",
        "description": "<p>constructed Assertion</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{String} key",
        "name": "key",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} key</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} value (optional)",
        "name": "value",
        "description": "<p>(optional)</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "flag",
        "html": "<p>flag</p>"
      },
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "<h3>flag(object, key, [value])</h3>\n<p>Get or set a flag value on an object. If a<br />value is provided it will be set, else it will<br />return the currently set value or <code>undefined</code> if<br />the value is not set.</p><pre><code>utils.flag(this, &#39;foo&#39;, &#39;bar&#39;); // setter\nutils.flag(this, &#39;foo&#39;); // getter, returns `bar`\n</code></pre>",
      "summary": "<h3>flag(object, key, [value])</h3>\n",
      "body": "<p>Get or set a flag value on an object. If a<br />value is provided it will be set, else it will<br />return the currently set value or <code>undefined</code> if<br />the value is not set.</p><pre><code>utils.flag(this, &#39;foo&#39;, &#39;bar&#39;); // setter\nutils.flag(this, &#39;foo&#39;); // getter, returns `bar`\n</code></pre>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4298,
    "codeStart": 4317,
    "code": "module.exports = function (obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n},{}],14:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - getActual utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#106;&#x61;&#x6b;&#x65;&#64;&#x61;&#x6c;&#x6f;&#x67;&#x69;&#x63;&#x61;&#x6c;&#112;&#97;&#x72;&#x61;&#x64;&#x6f;&#120;&#x2e;&#x63;&#x6f;&#x6d;\">&#106;&#x61;&#x6b;&#x65;&#64;&#x61;&#x6c;&#x6f;&#x67;&#x69;&#x63;&#x61;&#x6c;&#112;&#97;&#x72;&#x61;&#x64;&#x6f;&#120;&#x2e;&#x63;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - getActual utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x6a;&#x61;&#107;&#x65;&#x40;&#97;&#108;&#x6f;&#103;&#x69;&#99;&#97;&#108;&#112;&#97;&#114;&#x61;&#100;&#111;&#120;&#46;&#99;&#111;&#x6d;\">&#x6a;&#x61;&#107;&#x65;&#x40;&#97;&#108;&#x6f;&#103;&#x69;&#99;&#97;&#108;&#112;&#97;&#114;&#x61;&#100;&#111;&#120;&#46;&#99;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4327,
    "codeStart": 4332
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} object (constructed Assertion)",
        "name": "object",
        "description": "<p>(constructed Assertion)</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Arguments} chai.Assertion.prototype.assert arguments",
        "name": "chai.Assertion.prototype.assert",
        "description": "<p>arguments</p>",
        "types": [
          "Arguments"
        ],
        "typesDescription": "<a href=\"Arguments.html\">Arguments</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "getActual",
        "html": "<p>getActual</p>"
      }
    ],
    "description": {
      "full": "<h1>getActual(object, [actual])</h1>\n<p>Returns the <code>actual</code> value for an Assertion</p>",
      "summary": "<h1>getActual(object, [actual])</h1>\n",
      "body": "<p>Returns the <code>actual</code> value for an Assertion</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4333,
    "codeStart": 4344,
    "code": "module.exports = function (obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n},{}],15:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - getEnumerableProperties utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#106;&#97;&#x6b;&#101;&#x40;&#97;&#108;&#x6f;&#x67;&#x69;&#x63;&#x61;&#108;&#112;&#97;&#114;&#x61;&#100;&#x6f;&#120;&#x2e;&#x63;&#x6f;&#x6d;\">&#106;&#97;&#x6b;&#101;&#x40;&#97;&#108;&#x6f;&#x67;&#x69;&#x63;&#x61;&#108;&#112;&#97;&#114;&#x61;&#100;&#x6f;&#120;&#x2e;&#x63;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - getEnumerableProperties utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#106;&#x61;&#107;&#101;&#x40;&#x61;&#108;&#111;&#103;&#x69;&#99;&#x61;&#x6c;&#112;&#97;&#x72;&#x61;&#x64;&#x6f;&#120;&#x2e;&#x63;&#111;&#x6d;\">&#106;&#x61;&#107;&#101;&#x40;&#x61;&#108;&#111;&#103;&#x69;&#99;&#x61;&#x6c;&#112;&#97;&#x72;&#x61;&#x64;&#x6f;&#120;&#x2e;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4349,
    "codeStart": 4354
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "returns",
        "string": "{Array}",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Array}</p>"
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "getEnumerableProperties",
        "html": "<p>getEnumerableProperties</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.getEnumerableProperties(object)</h3>\n<p>This allows the retrieval of enumerable property names of an object,<br />inherited or not.</p>",
      "summary": "<h3>.getEnumerableProperties(object)</h3>\n",
      "body": "<p>This allows the retrieval of enumerable property names of an object,<br />inherited or not.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4355,
    "codeStart": 4368,
    "code": "module.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n\n},{}],16:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - message composition utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#106;&#x61;&#x6b;&#101;&#x40;&#97;&#108;&#x6f;&#103;&#x69;&#x63;&#x61;&#x6c;&#112;&#97;&#114;&#97;&#x64;&#x6f;&#120;&#46;&#x63;&#x6f;&#x6d;\">&#106;&#x61;&#x6b;&#101;&#x40;&#97;&#108;&#x6f;&#103;&#x69;&#x63;&#x61;&#x6c;&#112;&#97;&#114;&#97;&#x64;&#x6f;&#120;&#46;&#x63;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - message composition utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#106;&#x61;&#x6b;&#101;&#x40;&#97;&#x6c;&#x6f;&#103;&#x69;&#99;&#x61;&#x6c;&#112;&#x61;&#114;&#x61;&#x64;&#x6f;&#x78;&#46;&#99;&#111;&#x6d;\">&#106;&#x61;&#x6b;&#101;&#x40;&#97;&#x6c;&#x6f;&#103;&#x69;&#99;&#x61;&#x6c;&#112;&#x61;&#114;&#x61;&#x64;&#x6f;&#x78;&#46;&#99;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4377,
    "codeStart": 4382
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Module dependancies</p>",
      "summary": "<p>Module dependancies</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4383,
    "codeStart": 4387,
    "code": "var flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');",
    "ctx": {
      "type": "declaration",
      "name": "flag",
      "value": "require('./flag')",
      "string": "flag"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} object (constructed Assertion)",
        "name": "object",
        "description": "<p>(constructed Assertion)</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Arguments} chai.Assertion.prototype.assert arguments",
        "name": "chai.Assertion.prototype.assert",
        "description": "<p>arguments</p>",
        "types": [
          "Arguments"
        ],
        "typesDescription": "<a href=\"Arguments.html\">Arguments</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "getMessage",
        "html": "<p>getMessage</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.getMessage(object, message, negateMessage)</h3>\n<p>Construct the error message based on flags<br />and template tags. Template tags will return<br />a stringified inspection of the object referenced.</p><p>Message template tags:</p><ul>\n<li><code>#{this}</code> current asserted object</li>\n<li><code>#{act}</code> actual value</li>\n<li><code>#{exp}</code> expected value</li>\n</ul>\n",
      "summary": "<h3>.getMessage(object, message, negateMessage)</h3>\n",
      "body": "<p>Construct the error message based on flags<br />and template tags. Template tags will return<br />a stringified inspection of the object referenced.</p><p>Message template tags:</p><ul>\n<li><code>#{this}</code> current asserted object</li>\n<li><code>#{act}</code> actual value</li>\n<li><code>#{exp}</code> expected value</li>\n</ul>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4392,
    "codeStart": 4411,
    "code": "module.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n},{\"./flag\":13,\"./getActual\":14,\"./inspect\":23,\"./objDisplay\":24}],17:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - getName utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#106;&#97;&#107;&#101;&#x40;&#97;&#108;&#111;&#103;&#105;&#99;&#97;&#x6c;&#x70;&#97;&#114;&#97;&#x64;&#111;&#x78;&#46;&#x63;&#111;&#x6d;\">&#106;&#97;&#107;&#101;&#x40;&#97;&#108;&#111;&#103;&#105;&#99;&#97;&#x6c;&#x70;&#97;&#114;&#97;&#x64;&#111;&#x78;&#46;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - getName utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#97;&#105;&#108;&#x74;&#111;&#x3a;&#x6a;&#97;&#x6b;&#101;&#x40;&#x61;&#108;&#111;&#103;&#x69;&#99;&#x61;&#x6c;&#x70;&#97;&#x72;&#97;&#x64;&#x6f;&#x78;&#46;&#x63;&#111;&#109;\">&#x6a;&#97;&#x6b;&#101;&#x40;&#x61;&#108;&#111;&#103;&#x69;&#99;&#x61;&#x6c;&#x70;&#97;&#x72;&#97;&#x64;&#x6f;&#x78;&#46;&#x63;&#111;&#109;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4430,
    "codeStart": 4435
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Function} a function (usually a constructor)",
        "name": "a",
        "description": "<p>function (usually a constructor)</p>",
        "types": [
          "Function"
        ],
        "typesDescription": "<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "getName",
        "html": "<p>getName</p>"
      }
    ],
    "description": {
      "full": "<h1>getName(func)</h1>\n<p>Gets the name of a function, in a cross-browser way.</p>",
      "summary": "<h1>getName(func)</h1>\n",
      "body": "<p>Gets the name of a function, in a cross-browser way.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4436,
    "codeStart": 4446,
    "code": "module.exports = function (func) {\n  if (func.name) return func.name;\n\n  var match = /^\\s?function ([^(]*)\\(/.exec(func);\n  return match && match[1] ? match[1] : \"\";\n};\n\n},{}],18:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - getPathInfo utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x6a;&#97;&#x6b;&#x65;&#x40;&#97;&#108;&#x6f;&#x67;&#105;&#x63;&#x61;&#x6c;&#x70;&#x61;&#114;&#x61;&#100;&#x6f;&#120;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6a;&#97;&#x6b;&#x65;&#x40;&#97;&#108;&#x6f;&#x67;&#105;&#x63;&#x61;&#x6c;&#x70;&#x61;&#114;&#x61;&#100;&#x6f;&#120;&#x2e;&#x63;&#x6f;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - getPathInfo utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x6a;&#x61;&#107;&#101;&#x40;&#x61;&#x6c;&#111;&#x67;&#x69;&#x63;&#97;&#108;&#x70;&#x61;&#114;&#97;&#x64;&#x6f;&#120;&#46;&#x63;&#111;&#x6d;\">&#x6a;&#x61;&#107;&#101;&#x40;&#x61;&#x6c;&#111;&#x67;&#x69;&#x63;&#97;&#108;&#x70;&#x61;&#114;&#97;&#x64;&#x6f;&#120;&#46;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4454,
    "codeStart": 4460,
    "code": "var hasProperty = require('./hasProperty');",
    "ctx": {
      "type": "declaration",
      "name": "hasProperty",
      "value": "require('./hasProperty')",
      "string": "hasProperty"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{String} path",
        "name": "path",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} path</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "returns",
        "string": "{Object} info",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>info</p>"
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "getPathInfo",
        "html": "<p>getPathInfo</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.getPathInfo(path, object)</h3>\n<p>This allows the retrieval of property info in an<br />object given a string path.</p><p>The path info consists of an object with the<br />following properties:</p><ul>\n<li>parent - The parent object of the property referenced by <code>path</code></li>\n<li>name - The name of the final property, a number if it was an array indexer</li>\n<li>value - The value of the property, if it exists, otherwise <code>undefined</code></li>\n<li>exists - Whether the property exists or not</li>\n</ul>\n",
      "summary": "<h3>.getPathInfo(path, object)</h3>\n",
      "body": "<p>This allows the retrieval of property info in an<br />object given a string path.</p><p>The path info consists of an object with the<br />following properties:</p><ul>\n<li>parent - The parent object of the property referenced by <code>path</code></li>\n<li>name - The name of the final property, a number if it was an array indexer</li>\n<li>value - The value of the property, if it exists, otherwise <code>undefined</code></li>\n<li>exists - Whether the property exists or not</li>\n</ul>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4462,
    "codeStart": 4484,
    "code": "module.exports = function getPathInfo(path, obj) {\n  var parsed = parsePath(path),\n      last = parsed[parsed.length - 1];\n\n  var info = {\n    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: _getPathValue(parsed, obj)\n  };\n  info.exists = hasProperty(info.name, info.parent);\n\n  return info;\n};",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{String} path",
        "name": "path",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} path</p>"
      },
      {
        "type": "returns",
        "string": "{Object} parsed",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>parsed</p>"
      },
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "<h2>parsePath(path)</h2>\n<p>Helper function used to parse string object<br />paths. Use in conjunction with <code>_getPathValue</code>.</p><pre><code> var parsed = parsePath(&#39;myobject.property.subprop&#39;);\n</code></pre><h3>Paths:</h3>\n<ul>\n<li>Can be as near infinitely deep and nested</li>\n<li>Arrays are also valid using the formal <code>myobject.document[3].property</code>.</li>\n<li>Literal dots and brackets (not delimiter) must be backslash-escaped.</li>\n</ul>\n",
      "summary": "<h2>parsePath(path)</h2>\n",
      "body": "<p>Helper function used to parse string object<br />paths. Use in conjunction with <code>_getPathValue</code>.</p><pre><code> var parsed = parsePath(&#39;myobject.property.subprop&#39;);\n</code></pre><h3>Paths:</h3>\n<ul>\n<li>Can be as near infinitely deep and nested</li>\n<li>Arrays are also valid using the formal <code>myobject.document[3].property</code>.</li>\n<li>Literal dots and brackets (not delimiter) must be backslash-escaped.</li>\n</ul>\n"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4499,
    "codeStart": 4518,
    "code": "function parsePath (path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[')\n    , parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function (value) {\n    var re = /^\\[(\\d+)\\]$/\n      , mArr = re.exec(value);\n    if (mArr) return { i: parseFloat(mArr[1]) };\n    else return { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n  });\n}",
    "ctx": {
      "type": "function",
      "name": "parsePath",
      "string": "parsePath()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} parsed definition from `parsePath`.",
        "name": "parsed",
        "description": "<p>definition from <code>parsePath</code>.</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Object} object to search against",
        "name": "object",
        "description": "<p>to search against</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} object to search against",
        "name": "object",
        "description": "<p>to search against</p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "returns",
        "string": "{Object|Undefined} value",
        "types": [
          "Object",
          "Undefined"
        ],
        "typesDescription": "<code>Object</code>|<code>Undefined</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>value</p>"
      },
      {
        "type": "api",
        "string": "private",
        "visibility": "private",
        "html": "<p>private</p>"
      }
    ],
    "description": {
      "full": "<h2>_getPathValue(parsed, obj)</h2>\n<p>Helper companion function for <code>.parsePath</code> that returns<br />the value located at the parsed address.</p><pre><code> var value = getPathValue(parsed, obj);\n</code></pre>",
      "summary": "<h2>_getPathValue(parsed, obj)</h2>\n",
      "body": "<p>Helper companion function for <code>.parsePath</code> that returns<br />the value located at the parsed address.</p><pre><code> var value = getPathValue(parsed, obj);\n</code></pre>"
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4530,
    "codeStart": 4545,
    "code": "function _getPathValue (parsed, obj, index) {\n  var tmp = obj\n    , res;\n\n  index = (index === undefined ? parsed.length : index);\n\n  for (var i = 0, l = index; i < l; i++) {\n    var part = parsed[i];\n    if (tmp) {\n      if ('undefined' !== typeof part.p)\n        tmp = tmp[part.p];\n      else if ('undefined' !== typeof part.i)\n        tmp = tmp[part.i];\n      if (i == (l - 1)) res = tmp;\n    } else {\n      res = undefined;\n    }\n  }\n  return res;\n}\n\n},{\"./hasProperty\":21}],19:[function(require,module,exports){",
    "ctx": {
      "type": "function",
      "name": "_getPathValue",
      "string": "_getPathValue()"
    }
  },
  {
    "tags": [
      {
        "type": "see",
        "string": "https://github.com/logicalparadox/filtr\nMIT Licensed",
        "title": "https://github.com/logicalparadox/filtr",
        "url": "MIT Licensed",
        "html": "<p><a href=\"https://github.com/logicalparadox/filtr\">https://github.com/logicalparadox/filtr</a><br />MIT Licensed</p>"
      }
    ],
    "description": {
      "full": "<p>Chai - getPathValue utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x6a;&#97;&#107;&#x65;&#x40;&#97;&#x6c;&#111;&#103;&#105;&#99;&#97;&#108;&#112;&#97;&#114;&#x61;&#100;&#111;&#x78;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6a;&#97;&#107;&#x65;&#x40;&#97;&#x6c;&#111;&#103;&#105;&#99;&#97;&#108;&#112;&#97;&#114;&#x61;&#100;&#111;&#x78;&#x2e;&#x63;&#x6f;&#x6d;</a></p>",
      "summary": "<p>Chai - getPathValue utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#106;&#x61;&#107;&#x65;&#64;&#x61;&#108;&#x6f;&#103;&#105;&#x63;&#x61;&#x6c;&#112;&#97;&#x72;&#x61;&#x64;&#111;&#x78;&#x2e;&#99;&#x6f;&#109;\">&#106;&#x61;&#107;&#x65;&#64;&#x61;&#108;&#x6f;&#103;&#105;&#x63;&#x61;&#x6c;&#112;&#97;&#x72;&#x61;&#x64;&#111;&#x78;&#x2e;&#99;&#x6f;&#109;</a></p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4567,
    "codeStart": 4574,
    "code": "var getPathInfo = require('./getPathInfo');",
    "ctx": {
      "type": "declaration",
      "name": "getPathInfo",
      "value": "require('./getPathInfo')",
      "string": "getPathInfo"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{String} path",
        "name": "path",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} path</p>"
      },
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "returns",
        "string": "{Object} value or `undefined`",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>value or <code>undefined</code></p>"
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "getPathValue",
        "html": "<p>getPathValue</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.getPathValue(path, object)</h3>\n<p>This allows the retrieval of values in an<br />object given a string path.</p><pre><code>var obj = {\n    prop1: {\n        arr: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n      , str: &#39;Hello&#39;\n    }\n  , prop2: {\n        arr: [ { nested: &#39;Universe&#39; } ]\n      , str: &#39;Hello again!&#39;\n    }\n}\n</code></pre><p>The following would be the results.</p><pre><code>getPathValue(&#39;prop1.str&#39;, obj); // Hello\ngetPathValue(&#39;prop1.att[2]&#39;, obj); // b\ngetPathValue(&#39;prop2.arr[0].nested&#39;, obj); // Universe\n</code></pre>",
      "summary": "<h3>.getPathValue(path, object)</h3>\n",
      "body": "<p>This allows the retrieval of values in an<br />object given a string path.</p><pre><code>var obj = {\n    prop1: {\n        arr: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n      , str: &#39;Hello&#39;\n    }\n  , prop2: {\n        arr: [ { nested: &#39;Universe&#39; } ]\n      , str: &#39;Hello again!&#39;\n    }\n}\n</code></pre><p>The following would be the results.</p><pre><code>getPathValue(&#39;prop1.str&#39;, obj); // Hello\ngetPathValue(&#39;prop1.att[2]&#39;, obj); // b\ngetPathValue(&#39;prop2.arr[0].nested&#39;, obj); // Universe\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4576,
    "codeStart": 4606,
    "code": "module.exports = function(path, obj) {\n  var info = getPathInfo(path, obj);\n  return info.value;\n};\n\n},{\"./getPathInfo\":18}],20:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - getProperties utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x6a;&#97;&#107;&#x65;&#x40;&#97;&#x6c;&#111;&#103;&#x69;&#99;&#97;&#108;&#x70;&#x61;&#114;&#97;&#x64;&#111;&#120;&#46;&#x63;&#111;&#109;\">&#x6a;&#97;&#107;&#x65;&#x40;&#97;&#x6c;&#111;&#103;&#x69;&#99;&#97;&#108;&#x70;&#x61;&#114;&#97;&#x64;&#111;&#120;&#46;&#x63;&#111;&#109;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - getProperties utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#106;&#97;&#x6b;&#101;&#x40;&#97;&#x6c;&#x6f;&#x67;&#105;&#x63;&#97;&#108;&#x70;&#x61;&#114;&#97;&#100;&#111;&#120;&#46;&#x63;&#111;&#x6d;\">&#106;&#97;&#x6b;&#101;&#x40;&#97;&#x6c;&#x6f;&#x67;&#105;&#x63;&#97;&#108;&#x70;&#x61;&#114;&#97;&#100;&#111;&#120;&#46;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4612,
    "codeStart": 4617
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} object",
        "name": "object",
        "description": "",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Object} object</p>"
      },
      {
        "type": "returns",
        "string": "{Array}",
        "types": [
          "Array"
        ],
        "typesDescription": "<code>Array</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "",
        "html": "<p>{Array}</p>"
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "getProperties",
        "html": "<p>getProperties</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.getProperties(object)</h3>\n<p>This allows the retrieval of property names of an object, enumerable or not,<br />inherited or not.</p>",
      "summary": "<h3>.getProperties(object)</h3>\n",
      "body": "<p>This allows the retrieval of property names of an object, enumerable or not,<br />inherited or not.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4618,
    "codeStart": 4631,
    "code": "module.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n},{}],21:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "receiver": "module",
      "name": "exports",
      "string": "module.exports()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Chai - hasProperty utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#106;&#x61;&#x6b;&#x65;&#64;&#97;&#108;&#111;&#103;&#x69;&#x63;&#x61;&#108;&#112;&#x61;&#114;&#x61;&#100;&#x6f;&#x78;&#46;&#99;&#111;&#x6d;\">&#106;&#x61;&#x6b;&#x65;&#64;&#97;&#108;&#111;&#103;&#x69;&#x63;&#x61;&#108;&#112;&#x61;&#114;&#x61;&#100;&#x6f;&#x78;&#46;&#99;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>Chai - hasProperty utility<br />Copyright(c) 2012-2014 Jake Luer <a href=\"&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x6a;&#97;&#x6b;&#101;&#64;&#97;&#108;&#111;&#103;&#x69;&#x63;&#x61;&#x6c;&#112;&#97;&#x72;&#97;&#x64;&#x6f;&#120;&#x2e;&#99;&#111;&#x6d;\">&#x6a;&#97;&#x6b;&#101;&#64;&#97;&#108;&#111;&#103;&#x69;&#x63;&#x61;&#x6c;&#112;&#97;&#x72;&#97;&#x64;&#x6f;&#120;&#x2e;&#99;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4650,
    "codeStart": 4656,
    "code": "var type = require('type-detect');",
    "ctx": {
      "type": "declaration",
      "name": "type",
      "value": "require('type-detect')",
      "string": "type"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Objuect} object",
        "name": "object",
        "description": "",
        "types": [
          "Objuect"
        ],
        "typesDescription": "<a href=\"Objuect.html\">Objuect</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Objuect} object</p>"
      },
      {
        "type": "param",
        "string": "{String|Number} name",
        "name": "name",
        "description": "",
        "types": [
          "String",
          "Number"
        ],
        "typesDescription": "<code>String</code>|<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String|Number} name</p>"
      },
      {
        "type": "returns",
        "string": "{Boolean} whether it exists",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>whether it exists</p>"
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "getPathInfo",
        "html": "<p>getPathInfo</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>.hasProperty(object, name)</h3>\n<p>This allows checking whether an object has<br />named property or numeric array index.</p><p>Basically does the same thing as the <code>in</code><br />operator but works properly with natives<br />and null/undefined values.</p><pre><code>var obj = {\n    arr: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n  , str: &#39;Hello&#39;\n}\n</code></pre><p>The following would be the results.</p><pre><code>hasProperty(&#39;str&#39;, obj);  // true\nhasProperty(&#39;constructor&#39;, obj);  // true\nhasProperty(&#39;bar&#39;, obj);  // false\n\nhasProperty(&#39;length&#39;, obj.str); // true\nhasProperty(1, obj.str);  // true\nhasProperty(5, obj.str);  // false\n\nhasProperty(&#39;length&#39;, obj.arr);  // true\nhasProperty(2, obj.arr);  // true\nhasProperty(3, obj.arr);  // false\n</code></pre>",
      "summary": "<h3>.hasProperty(object, name)</h3>\n",
      "body": "<p>This allows checking whether an object has<br />named property or numeric array index.</p><p>Basically does the same thing as the <code>in</code><br />operator but works properly with natives<br />and null/undefined values.</p><pre><code>var obj = {\n    arr: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n  , str: &#39;Hello&#39;\n}\n</code></pre><p>The following would be the results.</p><pre><code>hasProperty(&#39;str&#39;, obj);  // true\nhasProperty(&#39;constructor&#39;, obj);  // true\nhasProperty(&#39;bar&#39;, obj);  // false\n\nhasProperty(&#39;length&#39;, obj.str); // true\nhasProperty(1, obj.str);  // true\nhasProperty(5, obj.str);  // false\n\nhasProperty(&#39;length&#39;, obj.arr);  // true\nhasProperty(2, obj.arr);  // true\nhasProperty(3, obj.arr);  // false\n</code></pre>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4658,
    "codeStart": 4695,
    "code": "var literals = {\n    'number': Number\n  , 'string': String\n};\n\nmodule.exports = function hasProperty(name, obj) {\n  var ot = type(obj);\n\n  // Bad Object, obviously no props at all\n  if(ot === 'null' || ot === 'undefined')\n    return false;\n\n  // The `in` operator does not work with certain literals\n  // box these before the check\n  if(literals[ot] && typeof obj !== 'object')\n    obj = new literals[ot](obj);\n\n  return name in obj;\n};\n\n},{\"type-detect\":35}],22:[function(require,module,exports){",
    "ctx": {
      "type": "declaration",
      "name": "literals",
      "value": "{",
      "string": "literals"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>chai<br />Copyright(c) 2011 Jake Luer <a href=\"&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#106;&#x61;&#x6b;&#x65;&#x40;&#x61;&#x6c;&#x6f;&#x67;&#x69;&#99;&#x61;&#x6c;&#x70;&#x61;&#114;&#97;&#100;&#111;&#x78;&#46;&#x63;&#111;&#x6d;\">&#106;&#x61;&#x6b;&#x65;&#x40;&#x61;&#x6c;&#x6f;&#x67;&#x69;&#99;&#x61;&#x6c;&#x70;&#x61;&#114;&#97;&#100;&#111;&#x78;&#46;&#x63;&#111;&#x6d;</a><br />MIT Licensed</p>",
      "summary": "<p>chai<br />Copyright(c) 2011 Jake Luer <a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#106;&#97;&#107;&#x65;&#64;&#97;&#108;&#111;&#x67;&#105;&#99;&#x61;&#108;&#112;&#97;&#114;&#x61;&#100;&#x6f;&#x78;&#x2e;&#99;&#111;&#109;\">&#106;&#97;&#107;&#x65;&#64;&#97;&#108;&#111;&#x67;&#105;&#99;&#x61;&#108;&#112;&#97;&#114;&#x61;&#100;&#x6f;&#x78;&#x2e;&#99;&#111;&#109;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4716,
    "codeStart": 4721
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Main exports</p>",
      "summary": "<p>Main exports</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4722,
    "codeStart": 4726,
    "code": "var exports = module.exports = {};",
    "ctx": {
      "type": "declaration",
      "name": "exports",
      "value": "module.exports = {}",
      "string": "exports"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>test utility</p>",
      "summary": "<p>test utility</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4728,
    "codeStart": 4732,
    "code": "exports.test = require('./test');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "test",
      "value": "require('./test')",
      "string": "exports.test"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>type utility</p>",
      "summary": "<p>type utility</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4734,
    "codeStart": 4738,
    "code": "exports.type = require('type-detect');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "type",
      "value": "require('type-detect')",
      "string": "exports.type"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>expectTypes utility</p>",
      "summary": "<p>expectTypes utility</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4740,
    "codeStart": 4743,
    "code": "exports.expectTypes = require('./expectTypes');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "expectTypes",
      "value": "require('./expectTypes')",
      "string": "exports.expectTypes"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>message utility</p>",
      "summary": "<p>message utility</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4745,
    "codeStart": 4749,
    "code": "exports.getMessage = require('./getMessage');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "getMessage",
      "value": "require('./getMessage')",
      "string": "exports.getMessage"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>actual utility</p>",
      "summary": "<p>actual utility</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4751,
    "codeStart": 4755,
    "code": "exports.getActual = require('./getActual');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "getActual",
      "value": "require('./getActual')",
      "string": "exports.getActual"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Inspect util</p>",
      "summary": "<p>Inspect util</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4757,
    "codeStart": 4761,
    "code": "exports.inspect = require('./inspect');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "inspect",
      "value": "require('./inspect')",
      "string": "exports.inspect"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Object Display util</p>",
      "summary": "<p>Object Display util</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4763,
    "codeStart": 4767,
    "code": "exports.objDisplay = require('./objDisplay');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "objDisplay",
      "value": "require('./objDisplay')",
      "string": "exports.objDisplay"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Flag utility</p>",
      "summary": "<p>Flag utility</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4769,
    "codeStart": 4773,
    "code": "exports.flag = require('./flag');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "flag",
      "value": "require('./flag')",
      "string": "exports.flag"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Flag transferring utility</p>",
      "summary": "<p>Flag transferring utility</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4775,
    "codeStart": 4779,
    "code": "exports.transferFlags = require('./transferFlags');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "transferFlags",
      "value": "require('./transferFlags')",
      "string": "exports.transferFlags"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Deep equal utility</p>",
      "summary": "<p>Deep equal utility</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4781,
    "codeStart": 4785,
    "code": "exports.eql = require('deep-eql');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "eql",
      "value": "require('deep-eql')",
      "string": "exports.eql"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Deep path value</p>",
      "summary": "<p>Deep path value</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4787,
    "codeStart": 4791,
    "code": "exports.getPathValue = require('./getPathValue');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "getPathValue",
      "value": "require('./getPathValue')",
      "string": "exports.getPathValue"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Deep path info</p>",
      "summary": "<p>Deep path info</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4793,
    "codeStart": 4797,
    "code": "exports.getPathInfo = require('./getPathInfo');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "getPathInfo",
      "value": "require('./getPathInfo')",
      "string": "exports.getPathInfo"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Check if a property exists</p>",
      "summary": "<p>Check if a property exists</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4799,
    "codeStart": 4803,
    "code": "exports.hasProperty = require('./hasProperty');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "hasProperty",
      "value": "require('./hasProperty')",
      "string": "exports.hasProperty"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Function name</p>",
      "summary": "<p>Function name</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4805,
    "codeStart": 4809,
    "code": "exports.getName = require('./getName');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "getName",
      "value": "require('./getName')",
      "string": "exports.getName"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>add Property</p>",
      "summary": "<p>add Property</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4811,
    "codeStart": 4815,
    "code": "exports.addProperty = require('./addProperty');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "addProperty",
      "value": "require('./addProperty')",
      "string": "exports.addProperty"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>add Method</p>",
      "summary": "<p>add Method</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4817,
    "codeStart": 4821,
    "code": "exports.addMethod = require('./addMethod');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "addMethod",
      "value": "require('./addMethod')",
      "string": "exports.addMethod"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>overwrite Property</p>",
      "summary": "<p>overwrite Property</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4823,
    "codeStart": 4827,
    "code": "exports.overwriteProperty = require('./overwriteProperty');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "overwriteProperty",
      "value": "require('./overwriteProperty')",
      "string": "exports.overwriteProperty"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>overwrite Method</p>",
      "summary": "<p>overwrite Method</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4829,
    "codeStart": 4833,
    "code": "exports.overwriteMethod = require('./overwriteMethod');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "overwriteMethod",
      "value": "require('./overwriteMethod')",
      "string": "exports.overwriteMethod"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Add a chainable method</p>",
      "summary": "<p>Add a chainable method</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4835,
    "codeStart": 4839,
    "code": "exports.addChainableMethod = require('./addChainableMethod');",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "addChainableMethod",
      "value": "require('./addChainableMethod')",
      "string": "exports.addChainableMethod"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Overwrite chainable method</p>",
      "summary": "<p>Overwrite chainable method</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 4841,
    "codeStart": 4845,
    "code": "exports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n},{\"./addChainableMethod\":9,\"./addMethod\":10,\"./addProperty\":11,\"./expectTypes\":12,\"./flag\":13,\"./getActual\":14,\"./getMessage\":16,\"./getName\":17,\"./getPathInfo\":18,\"./getPathValue\":19,\"./hasProperty\":21,\"./inspect\":23,\"./objDisplay\":24,\"./overwriteChainableMethod\":25,\"./overwriteMethod\":26,\"./overwriteProperty\":27,\"./test\":28,\"./transferFlags\":29,\"deep-eql\":31,\"type-detect\":35}],23:[function(require,module,exports){\n// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('./getName');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\n\nmodule.exports = inspect;",
    "ctx": {
      "type": "property",
      "receiver": "exports",
      "name": "overwriteChainableMethod",
      "value": "require('./overwriteChainableMethod')",
      "string": "exports.overwriteChainableMethod"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Object} obj The object to print out.",
        "name": "obj",
        "description": "<p>The object to print out.</p>",
        "types": [
          "Object"
        ],
        "typesDescription": "<code>Object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Boolean} showHidden Flag that shows hidden (not enumerable)\n   properties of objects.",
        "name": "showHidden",
        "description": "<p>Flag that shows hidden (not enumerable)    properties of objects.</p>",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Number} depth Depth in which to descend in object. Default is 2.",
        "name": "depth",
        "description": "<p>Depth in which to descend in object. Default is 2.</p>",
        "types": [
          "Number"
        ],
        "typesDescription": "<code>Number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{Boolean} colors Flag to turn on ANSI escape codes to color the\n   output. Default is false (no coloring).",
        "name": "colors",
        "description": "<p>Flag to turn on ANSI escape codes to color the    output. Default is false (no coloring).</p>",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "namespace",
        "string": "Utils",
        "html": "<p>Utils</p>"
      },
      {
        "type": "name",
        "string": "inspect",
        "html": "<p>inspect</p>"
      }
    ],
    "description": {
      "full": "<p>Echos the value of a value. Trys to print the value out<br />in the best way possible given the different types.</p>",
      "summary": "<p>Echos the value of a value. Trys to print the value out<br />in the best way possible given the different types.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 4857,
    "codeStart": 4870,
    "code": "function inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      var name = getName(value);\n      var nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    var name = getName(value);\n    var nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str;\n  if (value.__lookupGetter__) {\n    if (value.__lookupGetter__(key)) {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (value.__lookupSetter__(key)) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n},{\"./getEnumerableProperties\":15,\"./getName\":17,\"./getProperties\":20}],24:[function(require,module,exports){\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay (object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function (obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n},{\"../config\":4,\"./inspect\":23}],25:[function(require,module,exports){\n/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.length(3);\n *     expect(myFoo).to.have.length.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function () {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    return result === undefined ? this : result;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function () {\n    var result = method(_method).apply(this, arguments);\n    return result === undefined ? this : result;\n  };\n};\n\n},{}],26:[function(require,module,exports){\n/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteMethod (ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function (ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () { return this; };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  ctx[name] = function () {\n    var result = method(_super).apply(this, arguments);\n    return result === undefined ? this : result;\n  }\n};\n\n},{}],27:[function(require,module,exports){\n/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### overwriteProperty (ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function (ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function () {\n        var result = getter(_super).call(this);\n        return result === undefined ? this : result;\n      }\n    , configurable: true\n  });\n};\n\n},{}],28:[function(require,module,exports){\n/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * # test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function (obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n},{\"./flag\":13}],29:[function(require,module,exports){\n/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, and `message`)\n * will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function (assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n},{}],30:[function(require,module,exports){\n/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n},{}],31:[function(require,module,exports){\nmodule.exports = require('./lib/eql');\n\n},{\"./lib/eql\":32}],32:[function(require,module,exports){\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\n\n/*!\n * Buffer.isBuffer browser shim\n */\n\nvar Buffer;\ntry { Buffer = require('buffer').Buffer; }\ncatch(ex) {\n  Buffer = {};\n  Buffer.isBuffer = function() { return false; }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\n\n/**\n * Assert super-strict (egal) equality between\n * two objects of any type.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @param {Array} memoised (optional)\n * @return {Boolean} equal match\n */\n\nfunction deepEqual(a, b, m) {\n  if (sameValue(a, b)) {\n    return true;\n  } else if ('date' === type(a)) {\n    return dateEqual(a, b);\n  } else if ('regexp' === type(a)) {\n    return regexpEqual(a, b);\n  } else if (Buffer.isBuffer(a)) {\n    return bufferEqual(a, b);\n  } else if ('arguments' === type(a)) {\n    return argumentsEqual(a, b, m);\n  } else if (!typeEqual(a, b)) {\n    return false;\n  } else if (('object' !== type(a) && 'object' !== type(b))\n  && ('array' !== type(a) && 'array' !== type(b))) {\n    return sameValue(a, b);\n  } else {\n    return objectEqual(a, b, m);\n  }\n}\n\n/*!\n * Strict (egal) equality test. Ensures that NaN always\n * equals NaN and `-0` does not equal `+0`.\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} equal match\n */\n\nfunction sameValue(a, b) {\n  if (a === b) return a !== 0 || 1 / a === 1 / b;\n  return a !== a && b !== b;\n}\n\n/*!\n * Compare the types of two given objects and\n * return if they are equal. Note that an Array\n * has a type of `array` (not `object`) and arguments\n * have a type of `arguments` (not `array`/`object`).\n *\n * @param {Mixed} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction typeEqual(a, b) {\n  return type(a) === type(b);\n}\n\n/*!\n * Compare two Date objects by asserting that\n * the time values are equal using `saveValue`.\n *\n * @param {Date} a\n * @param {Date} b\n * @return {Boolean} result\n */\n\nfunction dateEqual(a, b) {\n  if ('date' !== type(b)) return false;\n  return sameValue(a.getTime(), b.getTime());\n}\n\n/*!\n * Compare two regular expressions by converting them\n * to string and checking for `sameValue`.\n *\n * @param {RegExp} a\n * @param {RegExp} b\n * @return {Boolean} result\n */\n\nfunction regexpEqual(a, b) {\n  if ('regexp' !== type(b)) return false;\n  return sameValue(a.toString(), b.toString());\n}\n\n/*!\n * Assert deep equality of two `arguments` objects.\n * Unfortunately, these must be sliced to arrays\n * prior to test to ensure no bad behavior.\n *\n * @param {Arguments} a\n * @param {Arguments} b\n * @param {Array} memoize (optional)\n * @return {Boolean} result\n */\n\nfunction argumentsEqual(a, b, m) {\n  if ('arguments' !== type(b)) return false;\n  a = [].slice.call(a);\n  b = [].slice.call(b);\n  return deepEqual(a, b, m);\n}\n\n/*!\n * Get enumerable properties of a given object.\n *\n * @param {Object} a\n * @return {Array} property names\n */\n\nfunction enumerable(a) {\n  var res = [];\n  for (var key in a) res.push(key);\n  return res;\n}\n\n/*!\n * Simple equality for flat iterable objects\n * such as Arrays or Node.js buffers.\n *\n * @param {Iterable} a\n * @param {Iterable} b\n * @return {Boolean} result\n */\n\nfunction iterableEqual(a, b) {\n  if (a.length !==  b.length) return false;\n\n  var i = 0;\n  var match = true;\n\n  for (; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      match = false;\n      break;\n    }\n  }\n\n  return match;\n}\n\n/*!\n * Extension to `iterableEqual` specifically\n * for Node.js Buffers.\n *\n * @param {Buffer} a\n * @param {Mixed} b\n * @return {Boolean} result\n */\n\nfunction bufferEqual(a, b) {\n  if (!Buffer.isBuffer(b)) return false;\n  return iterableEqual(a, b);\n}\n\n/*!\n * Block for `objectEqual` ensuring non-existing\n * values don't get in.\n *\n * @param {Mixed} object\n * @return {Boolean} result\n */\n\nfunction isValue(a) {\n  return a !== null && a !== undefined;\n}",
    "ctx": {
      "type": "function",
      "name": "inspect",
      "string": "inspect()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} a",
        "name": "a",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} a</p>"
      },
      {
        "type": "param",
        "string": "{Mixed} b",
        "name": "b",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} b</p>"
      },
      {
        "type": "return",
        "string": "{Boolean} result",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>result</p>"
      }
    ],
    "description": {
      "full": "<p>Recursively check the equality of two objects.<br />Once basic sameness has been established it will<br />defer to <code>deepEqual</code> for each enumerable key<br />in the object.</p>",
      "summary": "<p>Recursively check the equality of two objects.<br />Once basic sameness has been established it will<br />defer to <code>deepEqual</code> for each enumerable key<br />in the object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 5797,
    "codeStart": 5808,
    "code": "function objectEqual(a, b, m) {\n  if (!isValue(a) || !isValue(b)) {\n    return false;\n  }\n\n  if (a.prototype !== b.prototype) {\n    return false;\n  }\n\n  var i;\n  if (m) {\n    for (i = 0; i < m.length; i++) {\n      if ((m[i][0] === a && m[i][1] === b)\n      ||  (m[i][0] === b && m[i][1] === a)) {\n        return true;\n      }\n    }\n  } else {\n    m = [];\n  }\n\n  try {\n    var ka = enumerable(a);\n    var kb = enumerable(b);\n  } catch (ex) {\n    return false;\n  }\n\n  ka.sort();\n  kb.sort();\n\n  if (!iterableEqual(ka, kb)) {\n    return false;\n  }\n\n  m.push([ a, b ]);\n\n  var key;\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], m)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n},{\"buffer\":undefined,\"type-detect\":33}],33:[function(require,module,exports){\nmodule.exports = require('./lib/type');\n\n},{\"./lib/type\":34}],34:[function(require,module,exports){",
    "ctx": {
      "type": "function",
      "name": "objectEqual",
      "string": "objectEqual()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>type-detect<br />Copyright(c) 2013 jake luer <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x6a;&#x61;&#107;&#x65;&#x40;&#97;&#108;&#111;&#x67;&#x69;&#99;&#97;&#108;&#x70;&#97;&#114;&#97;&#x64;&#111;&#120;&#x2e;&#x63;&#111;&#109;\">&#x6a;&#x61;&#107;&#x65;&#x40;&#97;&#108;&#111;&#x67;&#x69;&#99;&#97;&#108;&#x70;&#97;&#114;&#97;&#x64;&#111;&#120;&#x2e;&#x63;&#111;&#109;</a><br />MIT Licensed</p>",
      "summary": "<p>type-detect<br />Copyright(c) 2013 jake luer <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x6a;&#97;&#x6b;&#x65;&#64;&#97;&#x6c;&#111;&#x67;&#105;&#99;&#x61;&#x6c;&#112;&#x61;&#114;&#x61;&#x64;&#x6f;&#x78;&#46;&#x63;&#x6f;&#109;\">&#x6a;&#97;&#x6b;&#x65;&#64;&#97;&#x6c;&#111;&#x67;&#105;&#99;&#x61;&#x6c;&#112;&#x61;&#114;&#x61;&#x64;&#x6f;&#x78;&#46;&#x63;&#x6f;&#109;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 5860,
    "codeStart": 5865
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Primary Exports</p>",
      "summary": "<p>Primary Exports</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 5866,
    "codeStart": 5870,
    "code": "var exports = module.exports = getType;",
    "ctx": {
      "type": "declaration",
      "name": "exports",
      "value": "module.exports = getType",
      "string": "exports"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Detectable javascript natives</p>",
      "summary": "<p>Detectable javascript natives</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 5872,
    "codeStart": 5876,
    "code": "var natives = {\n    '[object Array]': 'array'\n  , '[object RegExp]': 'regexp'\n  , '[object Function]': 'function'\n  , '[object Arguments]': 'arguments'\n  , '[object Date]': 'date'\n};",
    "ctx": {
      "type": "declaration",
      "name": "natives",
      "value": "{",
      "string": "natives"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} object",
        "name": "object",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} object</p>"
      },
      {
        "type": "return",
        "string": "{String} object type",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>object type</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>typeOf (obj)</h3>\n<p>Use several different techniques to determine<br />the type of object being tested.</p>",
      "summary": "<h3>typeOf (obj)</h3>\n",
      "body": "<p>Use several different techniques to determine<br />the type of object being tested.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5884,
    "codeStart": 5896,
    "code": "function getType (obj) {\n  var str = Object.prototype.toString.call(obj);\n  if (natives[str]) return natives[str];\n  if (obj === null) return 'null';\n  if (obj === undefined) return 'undefined';\n  if (obj === Object(obj)) return 'object';\n  return typeof obj;\n}\n\nexports.Library = Library;",
    "ctx": {
      "type": "function",
      "name": "getType",
      "string": "getType()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<h3>Library</h3>\n<p>Create a repository for custom type detection.</p><pre><code class=\"lang-js\">var lib = new type.Library;\n</code></pre>\n",
      "summary": "<h3>Library</h3>\n",
      "body": "<p>Create a repository for custom type detection.</p><pre><code class=\"lang-js\">var lib = new type.Library;\n</code></pre>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5907,
    "codeStart": 5918,
    "code": "function Library () {\n  this.tests = {};\n}",
    "ctx": {
      "type": "function",
      "name": "Library",
      "string": "Library()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} object to test",
        "name": "object",
        "description": "<p>to test</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{String} type",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>type</p>"
      }
    ],
    "description": {
      "full": "<h4>.of (obj)</h4>\n<p>Expose replacement <code>typeof</code> detection to the library.</p><pre><code class=\"lang-js\">if (&#39;string&#39; === lib.of(&#39;hello world&#39;)) {\n  // ...\n}\n</code></pre>\n",
      "summary": "<h4>.of (obj)</h4>\n",
      "body": "<p>Expose replacement <code>typeof</code> detection to the library.</p><pre><code class=\"lang-js\">if (&#39;string&#39; === lib.of(&#39;hello world&#39;)) {\n  // ...\n}\n</code></pre>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5922,
    "codeStart": 5937,
    "code": "Library.prototype.of = getType;",
    "ctx": {
      "type": "property",
      "constructor": "Library",
      "cons": "Library",
      "name": "of",
      "value": "getType",
      "string": "Library.prototype.of"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{String} type",
        "name": "type",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} type</p>"
      },
      {
        "type": "param",
        "string": "{RegExp|Function} test",
        "name": "test",
        "description": "",
        "types": [
          "RegExp",
          "Function"
        ],
        "typesDescription": "<code>RegExp</code>|<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp|Function} test</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h4>.define (type, test)</h4>\n<p>Add a test to for the <code>.test()</code> assertion.</p><p>Can be defined as a regular expression:</p><pre><code class=\"lang-js\">lib.define(&#39;int&#39;, /^[0-9]+$/);\n</code></pre>\n<p>... or as a function:</p><pre><code class=\"lang-js\">lib.define(&#39;bln&#39;, function (obj) {\n  if (&#39;boolean&#39; === lib.of(obj)) return true;\n  var blns = [ &#39;yes&#39;, &#39;no&#39;, &#39;true&#39;, &#39;false&#39;, 1, 0 ];\n  if (&#39;string&#39; === lib.of(obj)) obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n</code></pre>\n",
      "summary": "<h4>.define (type, test)</h4>\n",
      "body": "<p>Add a test to for the <code>.test()</code> assertion.</p><p>Can be defined as a regular expression:</p><pre><code class=\"lang-js\">lib.define(&#39;int&#39;, /^[0-9]+$/);\n</code></pre>\n<p>... or as a function:</p><pre><code class=\"lang-js\">lib.define(&#39;bln&#39;, function (obj) {\n  if (&#39;boolean&#39; === lib.of(obj)) return true;\n  var blns = [ &#39;yes&#39;, &#39;no&#39;, &#39;true&#39;, &#39;false&#39;, 1, 0 ];\n  if (&#39;string&#39; === lib.of(obj)) obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n</code></pre>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5939,
    "codeStart": 5966,
    "code": "Library.prototype.define = function (type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Library",
      "cons": "Library",
      "name": "define",
      "string": "Library.prototype.define()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} object",
        "name": "object",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} object</p>"
      },
      {
        "type": "param",
        "string": "{String} type",
        "name": "type",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} type</p>"
      },
      {
        "type": "return",
        "string": "{Boolean} result",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>result</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h4>.test (obj, test)</h4>\n<p>Assert that an object is of type. Will first<br />check natives, and if that does not pass it will<br />use the user defined custom tests.</p><pre><code class=\"lang-js\">assert(lib.test(&#39;1&#39;, &#39;int&#39;));\nassert(lib.test(&#39;yes&#39;, &#39;bln&#39;));\n</code></pre>\n",
      "summary": "<h4>.test (obj, test)</h4>\n",
      "body": "<p>Assert that an object is of type. Will first<br />check natives, and if that does not pass it will<br />use the user defined custom tests.</p><pre><code class=\"lang-js\">assert(lib.test(&#39;1&#39;, &#39;int&#39;));\nassert(lib.test(&#39;yes&#39;, &#39;bln&#39;));\n</code></pre>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 5972,
    "codeStart": 5990,
    "code": "Library.prototype.test = function (obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n},{}],35:[function(require,module,exports){\narguments[4][33][0].apply(exports,arguments)\n},{\"./lib/type\":36,\"dup\":33}],36:[function(require,module,exports){",
    "ctx": {
      "type": "method",
      "constructor": "Library",
      "cons": "Library",
      "name": "test",
      "string": "Library.prototype.test()"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>type-detect<br />Copyright(c) 2013 jake luer <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#106;&#97;&#107;&#x65;&#64;&#97;&#108;&#111;&#x67;&#105;&#99;&#x61;&#108;&#112;&#97;&#114;&#x61;&#x64;&#x6f;&#x78;&#46;&#99;&#x6f;&#109;\">&#106;&#97;&#107;&#x65;&#64;&#97;&#108;&#111;&#x67;&#105;&#99;&#x61;&#108;&#112;&#97;&#114;&#x61;&#x64;&#x6f;&#x78;&#46;&#99;&#x6f;&#109;</a><br />MIT Licensed</p>",
      "summary": "<p>type-detect<br />Copyright(c) 2013 jake luer <a href=\"&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#x6a;&#x61;&#x6b;&#101;&#x40;&#97;&#x6c;&#x6f;&#103;&#105;&#99;&#97;&#x6c;&#x70;&#x61;&#x72;&#x61;&#100;&#111;&#x78;&#x2e;&#x63;&#111;&#109;\">&#x6a;&#x61;&#x6b;&#101;&#x40;&#97;&#x6c;&#x6f;&#103;&#105;&#99;&#97;&#x6c;&#x70;&#x61;&#x72;&#x61;&#100;&#111;&#x78;&#x2e;&#x63;&#111;&#109;</a><br />MIT Licensed</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 6006,
    "codeStart": 6011
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Primary Exports</p>",
      "summary": "<p>Primary Exports</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 6012,
    "codeStart": 6016,
    "code": "var exports = module.exports = getType;",
    "ctx": {
      "type": "declaration",
      "name": "exports",
      "value": "module.exports = getType",
      "string": "exports"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} object",
        "name": "object",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} object</p>"
      },
      {
        "type": "return",
        "string": "{String} object type",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>object type</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h3>typeOf (obj)</h3>\n<p>Use several different techniques to determine<br />the type of object being tested.</p>",
      "summary": "<h3>typeOf (obj)</h3>\n",
      "body": "<p>Use several different techniques to determine<br />the type of object being tested.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6018,
    "codeStart": 6029,
    "code": "var objectTypeRegexp = /^\\[object (.*)\\]$/;\n\nfunction getType(obj) {\n  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();\n  // Let \"new String('')\" return 'object'\n  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';\n  // PhantomJS has type \"DOMWindow\" for null\n  if (obj === null) return 'null';\n  // PhantomJS has type \"DOMWindow\" for undefined\n  if (obj === undefined) return 'undefined';\n  return type;\n}\n\nexports.Library = Library;",
    "ctx": {
      "type": "declaration",
      "name": "objectTypeRegexp",
      "value": "/^\\[object (.*)\\]$/",
      "string": "objectTypeRegexp"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<h3>Library</h3>\n<p>Create a repository for custom type detection.</p><pre><code class=\"lang-js\">var lib = new type.Library;\n</code></pre>\n",
      "summary": "<h3>Library</h3>\n",
      "body": "<p>Create a repository for custom type detection.</p><pre><code class=\"lang-js\">var lib = new type.Library;\n</code></pre>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6044,
    "codeStart": 6055,
    "code": "function Library() {\n  if (!(this instanceof Library)) return new Library();\n  this.tests = {};\n}",
    "ctx": {
      "type": "function",
      "name": "Library",
      "string": "Library()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} object to test",
        "name": "object",
        "description": "<p>to test</p>",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "return",
        "string": "{String} type",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>type</p>"
      }
    ],
    "description": {
      "full": "<h4>.of (obj)</h4>\n<p>Expose replacement <code>typeof</code> detection to the library.</p><pre><code class=\"lang-js\">if (&#39;string&#39; === lib.of(&#39;hello world&#39;)) {\n  // ...\n}\n</code></pre>\n",
      "summary": "<h4>.of (obj)</h4>\n",
      "body": "<p>Expose replacement <code>typeof</code> detection to the library.</p><pre><code class=\"lang-js\">if (&#39;string&#39; === lib.of(&#39;hello world&#39;)) {\n  // ...\n}\n</code></pre>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6060,
    "codeStart": 6075,
    "code": "Library.prototype.of = getType;",
    "ctx": {
      "type": "property",
      "constructor": "Library",
      "cons": "Library",
      "name": "of",
      "value": "getType",
      "string": "Library.prototype.of"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{String} type",
        "name": "type",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} type</p>"
      },
      {
        "type": "param",
        "string": "{RegExp|Function} test",
        "name": "test",
        "description": "",
        "types": [
          "RegExp",
          "Function"
        ],
        "typesDescription": "<code>RegExp</code>|<code>Function</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{RegExp|Function} test</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h4>.define (type, test)</h4>\n<p>Add a test to for the <code>.test()</code> assertion.</p><p>Can be defined as a regular expression:</p><pre><code class=\"lang-js\">lib.define(&#39;int&#39;, /^[0-9]+$/);\n</code></pre>\n<p>... or as a function:</p><pre><code class=\"lang-js\">lib.define(&#39;bln&#39;, function (obj) {\n  if (&#39;boolean&#39; === lib.of(obj)) return true;\n  var blns = [ &#39;yes&#39;, &#39;no&#39;, &#39;true&#39;, &#39;false&#39;, 1, 0 ];\n  if (&#39;string&#39; === lib.of(obj)) obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n</code></pre>\n",
      "summary": "<h4>.define (type, test)</h4>\n",
      "body": "<p>Add a test to for the <code>.test()</code> assertion.</p><p>Can be defined as a regular expression:</p><pre><code class=\"lang-js\">lib.define(&#39;int&#39;, /^[0-9]+$/);\n</code></pre>\n<p>... or as a function:</p><pre><code class=\"lang-js\">lib.define(&#39;bln&#39;, function (obj) {\n  if (&#39;boolean&#39; === lib.of(obj)) return true;\n  var blns = [ &#39;yes&#39;, &#39;no&#39;, &#39;true&#39;, &#39;false&#39;, 1, 0 ];\n  if (&#39;string&#39; === lib.of(obj)) obj = obj.toLowerCase();\n  return !! ~blns.indexOf(obj);\n});\n</code></pre>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6077,
    "codeStart": 6104,
    "code": "Library.prototype.define = function(type, test) {\n  if (arguments.length === 1) return this.tests[type];\n  this.tests[type] = test;\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Library",
      "cons": "Library",
      "name": "define",
      "string": "Library.prototype.define()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{Mixed} object",
        "name": "object",
        "description": "",
        "types": [
          "Mixed"
        ],
        "typesDescription": "<a href=\"Mixed.html\">Mixed</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{Mixed} object</p>"
      },
      {
        "type": "param",
        "string": "{String} type",
        "name": "type",
        "description": "",
        "types": [
          "String"
        ],
        "typesDescription": "<code>String</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{String} type</p>"
      },
      {
        "type": "return",
        "string": "{Boolean} result",
        "types": [
          "Boolean"
        ],
        "typesDescription": "<code>Boolean</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "description": "<p>result</p>"
      },
      {
        "type": "api",
        "string": "public",
        "visibility": "public",
        "html": "<p>public</p>"
      }
    ],
    "description": {
      "full": "<h4>.test (obj, test)</h4>\n<p>Assert that an object is of type. Will first<br />check natives, and if that does not pass it will<br />use the user defined custom tests.</p><pre><code class=\"lang-js\">assert(lib.test(&#39;1&#39;, &#39;int&#39;));\nassert(lib.test(&#39;yes&#39;, &#39;bln&#39;));\n</code></pre>\n",
      "summary": "<h4>.test (obj, test)</h4>\n",
      "body": "<p>Assert that an object is of type. Will first<br />check natives, and if that does not pass it will<br />use the user defined custom tests.</p><pre><code class=\"lang-js\">assert(lib.test(&#39;1&#39;, &#39;int&#39;));\nassert(lib.test(&#39;yes&#39;, &#39;bln&#39;));\n</code></pre>\n"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 6110,
    "codeStart": 6128,
    "code": "Library.prototype.test = function(obj, type) {\n  if (type === getType(obj)) return true;\n  var test = this.tests[type];\n\n  if (test && 'regexp' === getType(test)) {\n    return test.test(obj);\n  } else if (test && 'function' === getType(test)) {\n    return test(obj);\n  } else {\n    throw new ReferenceError('Type test \"' + type + '\" not defined or invalid.');\n  }\n};\n\n},{}]},{},[1])(1)\n});",
    "ctx": {
      "type": "method",
      "constructor": "Library",
      "cons": "Library",
      "name": "test",
      "string": "Library.prototype.test()"
    }
  }
]