{"_id":"chai-change","_rev":"8-b7fa05380256d960d5f25f3afb037350","name":"chai-change","description":"Assert that a change you expected to happen, happened, with the chai library","dist-tags":{"latest":"1.0.0"},"versions":{"0.0.0":{"name":"chai-change","version":"0.0.0","author":{"name":"Tim Ruffles","email":"timruffles@googlemail.com"},"description":"Assert that a change you expected to happen, happened, with the chai library","main":"src/plugin.js","directories":{"test":"test"},"scripts":{"test":"mocha"},"license":"BSD-2-Clause","devDependencies":{"chai":"~1.9.1","mocha":"~1.18.2"},"repository":{"type":"git","url":"git@github.com:timruffles/chai-change.git"},"keywords":["chai","assertions","assert","testing","chai-plugin"],"bugs":{"url":"https://github.com/timruffles/chai-change/issues"},"_id":"chai-change@0.0.0","dist":{"shasum":"03b73d2f9b4ef7089e4f61a03dd7b15862bbcaab","tarball":"http://registry.npmjs.org/chai-change/-/chai-change-0.0.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"timruffles","email":"timruffles@googlemail.com"},"maintainers":[{"name":"timruffles","email":"timruffles@googlemail.com"}]},"1.0.0":{"name":"chai-change","version":"1.0.0","author":{"name":"Tim Ruffles","email":"timruffles@googlemail.com"},"description":"Assert that a change you expected to happen, happened, with the chai library","main":"src/plugin.js","directories":{"test":"test"},"scripts":{"test":"mocha"},"license":"BSD-2-Clause","devDependencies":{"chai":"~1.9.1","mocha":"~1.18.2","requirejs":"~2.1.11"},"repository":{"type":"git","url":"git@github.com:timruffles/chai-change.git"},"keywords":["chai","assertions","assert","testing","chai-plugin"],"bugs":{"url":"https://github.com/timruffles/chai-change/issues"},"_id":"chai-change@1.0.0","dist":{"shasum":"b7a63178af5c57767785c26405888735ac03fe0d","tarball":"http://registry.npmjs.org/chai-change/-/chai-change-1.0.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"timruffles","email":"timruffles@googlemail.com"},"maintainers":[{"name":"timruffles","email":"timruffles@googlemail.com"}]}},"readme":"# Chai Change\n\n[![Build Status](https://travis-ci.org/timruffles/chai-change.svg?branch=master)](https://travis-ci.org/timruffles/chai-change)\n\nAssert that a change you expected to happen, happened, with this plugin for the [chai](http://github.com/logicalparadox/chai) assertion library. The plugin works in node and the browser, asynchronously or synchronously.\n\nThe idea of the plugin is to make your tests more robust. Rather than doing:\n\n```javascript\nusers.create();\nexpect(users.count()).to.equal(1);\n```\n\ninstead assert that the action actually causes the expected change\n\n```javascript\nexpect(function() {\n  users.create();\n}).to.change(users.count,{by: 1});\n```\n\nThis is more robust as it avoids false positives: in this example, if `users.count()` was already 1 and `users.create()` was not implemented, the first example would still pass. Using the change expectation, since there was not a change `{by: 1}` from the starting value, the test would correctly fail.\n\n## Installation\n\n#### Node.js\n\n`chai-change` is available on npm.\n\n      $ npm install chai-change\n\n#### Browser\n\nEither install via npm, or [download `chai-change`](src/plugin.js) and save as `chai-change.js`. Then simply include after `chai.js`.\n\n```xml\n<script src=\"chai-change.js\"></script>\n```\n\n## Plug In\n\nIf you are using `chai-change` in the browser, there is nothing you need to do.\n\nIf you are using node, you just need to tell `chai` about the plugin:\n\n```js\nvar chai = require('chai');\n\nchai.use(require('chai-change'));\n```\n\n## Expect API\n\n### .change\n\nAsserts that the value returned by `getValue` changes after the function has run:\n\n```javascript\nvar x = 0;\nexpect(function() { x += 1; }).to.change(function() { return x });\n\nexpect(function() {}).not.to.change(function() { return x });\n```\n\nYou can pass options to be specific about the changes expected. Use the `from` key to enforce a starting value, a `to` key for and ending value, and a\n`by` key to enforce a numeric change.\n\n```javascript\nexpect(function() { x += 1 }).to.change(function() { return x },{by: 1});\nexpect(function() { x += 1 }).to.change(function() { return x },{from: x});\nexpect(function() { x += 1 }).to.change(function() { return x },{from: x, to: x + 1});\nexpect(function() { x += 1 }).to.change(function() { return x },{to: x + 1});\n```\n\n## Assert API\n\n### assert.change\n\nAsserts that the value returned by `getValue`\nchanges after the `affect` function has run:\n                                                                                       \n```javascript\nvar x = 0;\nassert.change(affect,getValue);\n\nfunction affect() { x += 1; }\nfunction getValue() { return x }\n```\n                                                                                       \nYou can pass options to be specific about the changes expected. Use the `from` \nkey to enforce a starting value, a `to` key for and ending value, and a\n`by` key to enforce a numeric change.\n                                                                                       \n```javascript\nassert.change(function() { x += 1 },function() { return x },{by: 1});\nassert.change(function() { x += 1 },function() { return x },{from: x});\nassert.change(function() { x += 1 },function() { return x },{from: x, to: x + 1});\nassert.change(function() { x += 1 },function() { return x },{to: x + 1});\n```\n\n### assert.noChange\n\nAsserts that the value returned by `getValue`\ndoesn't change after the `affect` has run:\n                                                          \n```javascript\nvar x = 0;\nassert.noChange(doesNothing,function() { return x });\nfunction doesNothing() {}\n```\n\n## Asynchronous asserts\n\nBoth the `affect` and `getValue` callbacks can optionally take a node-style callback, with `error` as the first parameter. If you provide either with a callback, you need to give a final `callback:` option to the change assertion, that is used to notify your test runner that the test is complete. This works best with test runners that expect node callbacks to control async tests, like mocha in the below example:\n\n```javascript\nvar count = 0;\nvar User = {\n  create: function(attrs,cb) {\n    setTimeout(function() {\n      count += 1\n      cb();\n    })\n  },\n  count: function(cb) {\n    setTimeout(function() {\n      cb(null,count);\n    })\n  },\n};\n\nexpect(function(done) {\n  User.create({name: \"bob\"},done)\n}).to.change(function(value) {\n  User.count(value);\n},{\n  by: 1,\n  callback: done\n});\n```\n\n## Tests\n\nNode: `npm install && mocha`.\n\nBrowser: `npm install` then open `test/index.html`.\n\n","maintainers":[{"name":"timruffles","email":"timruffles@googlemail.com"}],"time":{"modified":"2014-05-27T21:18:04.450Z","created":"2014-03-23T12:21:57.165Z","0.0.0":"2014-03-23T12:21:58.679Z","1.0.0":"2014-05-27T21:18:04.450Z"},"readmeFilename":"README.md","keywords":["chai","assertions","assert","testing","chai-plugin"],"repository":{"type":"git","url":"git@github.com:timruffles/chai-change.git"},"author":{"name":"Tim Ruffles","email":"timruffles@googlemail.com"},"bugs":{"url":"https://github.com/timruffles/chai-change/issues"},"license":"BSD-2-Clause","_attachments":{}}